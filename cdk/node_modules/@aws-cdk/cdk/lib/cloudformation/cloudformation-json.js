"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tokens_1 = require("../core/tokens");
const cloudformation_token_1 = require("./cloudformation-token");
/**
 * Class for JSON routines that are framework-aware
 */
class CloudFormationJSON {
    /**
     * Turn an arbitrary structure potentially containing Tokens into a JSON string.
     *
     * Returns a Token which will evaluate to CloudFormation expression that
     * will be evaluated by CloudFormation to the JSON representation of the
     * input structure.
     *
     * All Tokens substituted in this way must return strings, or the evaluation
     * in CloudFormation will fail.
     */
    static stringify(obj) {
        return new tokens_1.Token(() => {
            // Resolve inner value first so that if they evaluate to literals, we
            // maintain the type (and discard 'undefined's).
            //
            // Then replace intrinsics with a special subclass of Token that
            // overrides toJSON() to the marker string, so if we resolve() the
            // strings again it evaluates to the right string. It also
            // deep-escapes any strings inside the intrinsic, so that if literal
            // strings are used in {Fn::Join} or something, they will end up
            // escaped in the final JSON output.
            const resolved = tokens_1.resolve(obj);
            // We can just directly return this value, since resolve() will be called
            // on our return value anyway.
            return JSON.stringify(deepReplaceIntrinsics(resolved));
        });
        /**
         * Recurse into a structure, replace all intrinsics with IntrinsicTokens.
         */
        function deepReplaceIntrinsics(x) {
            if (x == null) {
                return x;
            }
            if (cloudformation_token_1.isIntrinsic(x)) {
                return wrapIntrinsic(x);
            }
            if (Array.isArray(x)) {
                return x.map(deepReplaceIntrinsics);
            }
            if (typeof x === 'object') {
                for (const key of Object.keys(x)) {
                    x[key] = deepReplaceIntrinsics(x[key]);
                }
            }
            return x;
        }
        function wrapIntrinsic(intrinsic) {
            return new IntrinsicToken(() => deepQuoteStringsForJSON(intrinsic));
        }
    }
}
exports.CloudFormationJSON = CloudFormationJSON;
/**
 * Token that also stringifies in the toJSON() operation.
 */
class IntrinsicToken extends cloudformation_token_1.CloudFormationToken {
    /**
     * Special handler that gets called when JSON.stringify() is used.
     */
    toJSON() {
        return this.toString();
    }
}
/**
 * Deep escape strings for use in a JSON context
 */
function deepQuoteStringsForJSON(x) {
    if (typeof x === 'string') {
        // Whenever we escape a string we strip off the outermost quotes
        // since we're already in a quoted context.
        const stringified = JSON.stringify(x);
        return stringified.substring(1, stringified.length - 1);
    }
    if (Array.isArray(x)) {
        return x.map(deepQuoteStringsForJSON);
    }
    if (typeof x === 'object') {
        for (const key of Object.keys(x)) {
            x[key] = deepQuoteStringsForJSON(x[key]);
        }
    }
    return x;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xvdWRmb3JtYXRpb24tanNvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNsb3VkZm9ybWF0aW9uLWpzb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwyQ0FBZ0Q7QUFDaEQsaUVBQTBFO0FBRTFFOztHQUVHO0FBQ0gsTUFBYSxrQkFBa0I7SUFDN0I7Ozs7Ozs7OztPQVNHO0lBQ0ksTUFBTSxDQUFDLFNBQVMsQ0FBQyxHQUFRO1FBQzlCLE9BQU8sSUFBSSxjQUFLLENBQUMsR0FBRyxFQUFFO1lBQ3BCLHFFQUFxRTtZQUNyRSxnREFBZ0Q7WUFDaEQsRUFBRTtZQUNGLGdFQUFnRTtZQUNoRSxrRUFBa0U7WUFDbEUsMERBQTBEO1lBQzFELG9FQUFvRTtZQUNwRSxnRUFBZ0U7WUFDaEUsb0NBQW9DO1lBQ3BDLE1BQU0sUUFBUSxHQUFHLGdCQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7WUFFOUIseUVBQXlFO1lBQ3pFLDhCQUE4QjtZQUM5QixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMscUJBQXFCLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUN6RCxDQUFDLENBQUMsQ0FBQztRQUVIOztXQUVHO1FBQ0gsU0FBUyxxQkFBcUIsQ0FBQyxDQUFNO1lBQ25DLElBQUksQ0FBQyxJQUFJLElBQUksRUFBRTtnQkFBRSxPQUFPLENBQUMsQ0FBQzthQUFFO1lBRTVCLElBQUksa0NBQVcsQ0FBQyxDQUFDLENBQUMsRUFBRTtnQkFDbEIsT0FBTyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDekI7WUFFRCxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUU7Z0JBQ3BCLE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO2FBQ3JDO1lBRUQsSUFBSSxPQUFPLENBQUMsS0FBSyxRQUFRLEVBQUU7Z0JBQ3pCLEtBQUssTUFBTSxHQUFHLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRTtvQkFDaEMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLHFCQUFxQixDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2lCQUN4QzthQUNGO1lBRUQsT0FBTyxDQUFDLENBQUM7UUFDWCxDQUFDO1FBRUQsU0FBUyxhQUFhLENBQUMsU0FBYztZQUNuQyxPQUFPLElBQUksY0FBYyxDQUFDLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7UUFDdEUsQ0FBQztJQUNILENBQUM7Q0FDRjtBQXhERCxnREF3REM7QUFFRDs7R0FFRztBQUNILE1BQU0sY0FBZSxTQUFRLDBDQUFtQjtJQUM5Qzs7T0FFRztJQUNJLE1BQU07UUFDWCxPQUFPLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUN6QixDQUFDO0NBQ0Y7QUFFRDs7R0FFRztBQUNILFNBQVMsdUJBQXVCLENBQUMsQ0FBTTtJQUNyQyxJQUFJLE9BQU8sQ0FBQyxLQUFLLFFBQVEsRUFBRTtRQUN6QixnRUFBZ0U7UUFDaEUsMkNBQTJDO1FBQzNDLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEMsT0FBTyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxXQUFXLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO0tBQ3pEO0lBRUQsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFO1FBQ3BCLE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO0tBQ3ZDO0lBRUQsSUFBSSxPQUFPLENBQUMsS0FBSyxRQUFRLEVBQUU7UUFDekIsS0FBSyxNQUFNLEdBQUcsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQ2hDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyx1QkFBdUIsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztTQUMxQztLQUNGO0lBRUQsT0FBTyxDQUFDLENBQUM7QUFDWCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVzb2x2ZSwgVG9rZW4gfSBmcm9tIFwiLi4vY29yZS90b2tlbnNcIjtcbmltcG9ydCB7IENsb3VkRm9ybWF0aW9uVG9rZW4sIGlzSW50cmluc2ljIH0gZnJvbSBcIi4vY2xvdWRmb3JtYXRpb24tdG9rZW5cIjtcblxuLyoqXG4gKiBDbGFzcyBmb3IgSlNPTiByb3V0aW5lcyB0aGF0IGFyZSBmcmFtZXdvcmstYXdhcmVcbiAqL1xuZXhwb3J0IGNsYXNzIENsb3VkRm9ybWF0aW9uSlNPTiB7XG4gIC8qKlxuICAgKiBUdXJuIGFuIGFyYml0cmFyeSBzdHJ1Y3R1cmUgcG90ZW50aWFsbHkgY29udGFpbmluZyBUb2tlbnMgaW50byBhIEpTT04gc3RyaW5nLlxuICAgKlxuICAgKiBSZXR1cm5zIGEgVG9rZW4gd2hpY2ggd2lsbCBldmFsdWF0ZSB0byBDbG91ZEZvcm1hdGlvbiBleHByZXNzaW9uIHRoYXRcbiAgICogd2lsbCBiZSBldmFsdWF0ZWQgYnkgQ2xvdWRGb3JtYXRpb24gdG8gdGhlIEpTT04gcmVwcmVzZW50YXRpb24gb2YgdGhlXG4gICAqIGlucHV0IHN0cnVjdHVyZS5cbiAgICpcbiAgICogQWxsIFRva2VucyBzdWJzdGl0dXRlZCBpbiB0aGlzIHdheSBtdXN0IHJldHVybiBzdHJpbmdzLCBvciB0aGUgZXZhbHVhdGlvblxuICAgKiBpbiBDbG91ZEZvcm1hdGlvbiB3aWxsIGZhaWwuXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIHN0cmluZ2lmeShvYmo6IGFueSk6IFRva2VuIHtcbiAgICByZXR1cm4gbmV3IFRva2VuKCgpID0+IHtcbiAgICAgIC8vIFJlc29sdmUgaW5uZXIgdmFsdWUgZmlyc3Qgc28gdGhhdCBpZiB0aGV5IGV2YWx1YXRlIHRvIGxpdGVyYWxzLCB3ZVxuICAgICAgLy8gbWFpbnRhaW4gdGhlIHR5cGUgKGFuZCBkaXNjYXJkICd1bmRlZmluZWQncykuXG4gICAgICAvL1xuICAgICAgLy8gVGhlbiByZXBsYWNlIGludHJpbnNpY3Mgd2l0aCBhIHNwZWNpYWwgc3ViY2xhc3Mgb2YgVG9rZW4gdGhhdFxuICAgICAgLy8gb3ZlcnJpZGVzIHRvSlNPTigpIHRvIHRoZSBtYXJrZXIgc3RyaW5nLCBzbyBpZiB3ZSByZXNvbHZlKCkgdGhlXG4gICAgICAvLyBzdHJpbmdzIGFnYWluIGl0IGV2YWx1YXRlcyB0byB0aGUgcmlnaHQgc3RyaW5nLiBJdCBhbHNvXG4gICAgICAvLyBkZWVwLWVzY2FwZXMgYW55IHN0cmluZ3MgaW5zaWRlIHRoZSBpbnRyaW5zaWMsIHNvIHRoYXQgaWYgbGl0ZXJhbFxuICAgICAgLy8gc3RyaW5ncyBhcmUgdXNlZCBpbiB7Rm46OkpvaW59IG9yIHNvbWV0aGluZywgdGhleSB3aWxsIGVuZCB1cFxuICAgICAgLy8gZXNjYXBlZCBpbiB0aGUgZmluYWwgSlNPTiBvdXRwdXQuXG4gICAgICBjb25zdCByZXNvbHZlZCA9IHJlc29sdmUob2JqKTtcblxuICAgICAgLy8gV2UgY2FuIGp1c3QgZGlyZWN0bHkgcmV0dXJuIHRoaXMgdmFsdWUsIHNpbmNlIHJlc29sdmUoKSB3aWxsIGJlIGNhbGxlZFxuICAgICAgLy8gb24gb3VyIHJldHVybiB2YWx1ZSBhbnl3YXkuXG4gICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoZGVlcFJlcGxhY2VJbnRyaW5zaWNzKHJlc29sdmVkKSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBSZWN1cnNlIGludG8gYSBzdHJ1Y3R1cmUsIHJlcGxhY2UgYWxsIGludHJpbnNpY3Mgd2l0aCBJbnRyaW5zaWNUb2tlbnMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZGVlcFJlcGxhY2VJbnRyaW5zaWNzKHg6IGFueSk6IGFueSB7XG4gICAgICBpZiAoeCA9PSBudWxsKSB7IHJldHVybiB4OyB9XG5cbiAgICAgIGlmIChpc0ludHJpbnNpYyh4KSkge1xuICAgICAgICByZXR1cm4gd3JhcEludHJpbnNpYyh4KTtcbiAgICAgIH1cblxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoeCkpIHtcbiAgICAgICAgcmV0dXJuIHgubWFwKGRlZXBSZXBsYWNlSW50cmluc2ljcyk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgeCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMoeCkpIHtcbiAgICAgICAgICB4W2tleV0gPSBkZWVwUmVwbGFjZUludHJpbnNpY3MoeFtrZXldKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4geDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB3cmFwSW50cmluc2ljKGludHJpbnNpYzogYW55KTogSW50cmluc2ljVG9rZW4ge1xuICAgICAgcmV0dXJuIG5ldyBJbnRyaW5zaWNUb2tlbigoKSA9PiBkZWVwUXVvdGVTdHJpbmdzRm9ySlNPTihpbnRyaW5zaWMpKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBUb2tlbiB0aGF0IGFsc28gc3RyaW5naWZpZXMgaW4gdGhlIHRvSlNPTigpIG9wZXJhdGlvbi5cbiAqL1xuY2xhc3MgSW50cmluc2ljVG9rZW4gZXh0ZW5kcyBDbG91ZEZvcm1hdGlvblRva2VuIHtcbiAgLyoqXG4gICAqIFNwZWNpYWwgaGFuZGxlciB0aGF0IGdldHMgY2FsbGVkIHdoZW4gSlNPTi5zdHJpbmdpZnkoKSBpcyB1c2VkLlxuICAgKi9cbiAgcHVibGljIHRvSlNPTigpIHtcbiAgICByZXR1cm4gdGhpcy50b1N0cmluZygpO1xuICB9XG59XG5cbi8qKlxuICogRGVlcCBlc2NhcGUgc3RyaW5ncyBmb3IgdXNlIGluIGEgSlNPTiBjb250ZXh0XG4gKi9cbmZ1bmN0aW9uIGRlZXBRdW90ZVN0cmluZ3NGb3JKU09OKHg6IGFueSk6IGFueSB7XG4gIGlmICh0eXBlb2YgeCA9PT0gJ3N0cmluZycpIHtcbiAgICAvLyBXaGVuZXZlciB3ZSBlc2NhcGUgYSBzdHJpbmcgd2Ugc3RyaXAgb2ZmIHRoZSBvdXRlcm1vc3QgcXVvdGVzXG4gICAgLy8gc2luY2Ugd2UncmUgYWxyZWFkeSBpbiBhIHF1b3RlZCBjb250ZXh0LlxuICAgIGNvbnN0IHN0cmluZ2lmaWVkID0gSlNPTi5zdHJpbmdpZnkoeCk7XG4gICAgcmV0dXJuIHN0cmluZ2lmaWVkLnN1YnN0cmluZygxLCBzdHJpbmdpZmllZC5sZW5ndGggLSAxKTtcbiAgfVxuXG4gIGlmIChBcnJheS5pc0FycmF5KHgpKSB7XG4gICAgcmV0dXJuIHgubWFwKGRlZXBRdW90ZVN0cmluZ3NGb3JKU09OKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgeCA9PT0gJ29iamVjdCcpIHtcbiAgICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyh4KSkge1xuICAgICAgeFtrZXldID0gZGVlcFF1b3RlU3RyaW5nc0ZvckpTT04oeFtrZXldKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4geDtcbn1cbiJdfQ==