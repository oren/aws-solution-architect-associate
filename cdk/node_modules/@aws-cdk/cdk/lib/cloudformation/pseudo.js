"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cloudformation_token_1 = require("./cloudformation-token");
class PseudoParameter extends cloudformation_token_1.CloudFormationToken {
    constructor(name) {
        super({ Ref: name }, name);
    }
}
exports.PseudoParameter = PseudoParameter;
class AwsAccountId extends PseudoParameter {
    constructor() {
        super('AWS::AccountId');
    }
}
exports.AwsAccountId = AwsAccountId;
class AwsDomainSuffix extends PseudoParameter {
    constructor() {
        super('AWS::DomainSuffix');
    }
}
exports.AwsDomainSuffix = AwsDomainSuffix;
class AwsURLSuffix extends PseudoParameter {
    constructor() {
        super('AWS::URLSuffix');
    }
}
exports.AwsURLSuffix = AwsURLSuffix;
class AwsNotificationARNs extends PseudoParameter {
    constructor() {
        super('AWS::NotificationARNs');
    }
}
exports.AwsNotificationARNs = AwsNotificationARNs;
class AwsNoValue extends PseudoParameter {
    constructor() {
        super('AWS::NoValue');
    }
}
exports.AwsNoValue = AwsNoValue;
class AwsPartition extends PseudoParameter {
    constructor() {
        super('AWS::Partition');
    }
}
exports.AwsPartition = AwsPartition;
class AwsRegion extends PseudoParameter {
    constructor() {
        super('AWS::Region');
    }
}
exports.AwsRegion = AwsRegion;
class AwsStackId extends PseudoParameter {
    constructor() {
        super('AWS::StackId');
    }
}
exports.AwsStackId = AwsStackId;
class AwsStackName extends PseudoParameter {
    constructor() {
        super('AWS::StackName');
    }
}
exports.AwsStackName = AwsStackName;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHNldWRvLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicHNldWRvLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsaUVBQTZEO0FBRTdELE1BQWEsZUFBZ0IsU0FBUSwwQ0FBbUI7SUFDdEQsWUFBWSxJQUFZO1FBQ3RCLEtBQUssQ0FBQyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM3QixDQUFDO0NBQ0Y7QUFKRCwwQ0FJQztBQUVELE1BQWEsWUFBYSxTQUFRLGVBQWU7SUFDL0M7UUFDRSxLQUFLLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztJQUMxQixDQUFDO0NBQ0Y7QUFKRCxvQ0FJQztBQUVELE1BQWEsZUFBZ0IsU0FBUSxlQUFlO0lBQ2xEO1FBQ0UsS0FBSyxDQUFDLG1CQUFtQixDQUFDLENBQUM7SUFDN0IsQ0FBQztDQUNGO0FBSkQsMENBSUM7QUFFRCxNQUFhLFlBQWEsU0FBUSxlQUFlO0lBQy9DO1FBQ0UsS0FBSyxDQUFDLGdCQUFnQixDQUFDLENBQUM7SUFDMUIsQ0FBQztDQUNGO0FBSkQsb0NBSUM7QUFFRCxNQUFhLG1CQUFvQixTQUFRLGVBQWU7SUFDdEQ7UUFDRSxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQztJQUNqQyxDQUFDO0NBQ0Y7QUFKRCxrREFJQztBQUVELE1BQWEsVUFBVyxTQUFRLGVBQWU7SUFDN0M7UUFDRSxLQUFLLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDeEIsQ0FBQztDQUNGO0FBSkQsZ0NBSUM7QUFFRCxNQUFhLFlBQWEsU0FBUSxlQUFlO0lBQy9DO1FBQ0UsS0FBSyxDQUFDLGdCQUFnQixDQUFDLENBQUM7SUFDMUIsQ0FBQztDQUNGO0FBSkQsb0NBSUM7QUFFRCxNQUFhLFNBQVUsU0FBUSxlQUFlO0lBQzVDO1FBQ0UsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQ3ZCLENBQUM7Q0FDRjtBQUpELDhCQUlDO0FBRUQsTUFBYSxVQUFXLFNBQVEsZUFBZTtJQUM3QztRQUNFLEtBQUssQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUN4QixDQUFDO0NBQ0Y7QUFKRCxnQ0FJQztBQUVELE1BQWEsWUFBYSxTQUFRLGVBQWU7SUFDL0M7UUFDRSxLQUFLLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztJQUMxQixDQUFDO0NBQ0Y7QUFKRCxvQ0FJQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENsb3VkRm9ybWF0aW9uVG9rZW4gfSBmcm9tICcuL2Nsb3VkZm9ybWF0aW9uLXRva2VuJztcblxuZXhwb3J0IGNsYXNzIFBzZXVkb1BhcmFtZXRlciBleHRlbmRzIENsb3VkRm9ybWF0aW9uVG9rZW4ge1xuICBjb25zdHJ1Y3RvcihuYW1lOiBzdHJpbmcpIHtcbiAgICBzdXBlcih7IFJlZjogbmFtZSB9LCBuYW1lKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQXdzQWNjb3VudElkIGV4dGVuZHMgUHNldWRvUGFyYW1ldGVyIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoJ0FXUzo6QWNjb3VudElkJyk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEF3c0RvbWFpblN1ZmZpeCBleHRlbmRzIFBzZXVkb1BhcmFtZXRlciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCdBV1M6OkRvbWFpblN1ZmZpeCcpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBBd3NVUkxTdWZmaXggZXh0ZW5kcyBQc2V1ZG9QYXJhbWV0ZXIge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcignQVdTOjpVUkxTdWZmaXgnKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQXdzTm90aWZpY2F0aW9uQVJOcyBleHRlbmRzIFBzZXVkb1BhcmFtZXRlciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCdBV1M6Ok5vdGlmaWNhdGlvbkFSTnMnKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQXdzTm9WYWx1ZSBleHRlbmRzIFBzZXVkb1BhcmFtZXRlciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCdBV1M6Ok5vVmFsdWUnKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQXdzUGFydGl0aW9uIGV4dGVuZHMgUHNldWRvUGFyYW1ldGVyIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoJ0FXUzo6UGFydGl0aW9uJyk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEF3c1JlZ2lvbiBleHRlbmRzIFBzZXVkb1BhcmFtZXRlciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCdBV1M6OlJlZ2lvbicpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBBd3NTdGFja0lkIGV4dGVuZHMgUHNldWRvUGFyYW1ldGVyIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoJ0FXUzo6U3RhY2tJZCcpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBBd3NTdGFja05hbWUgZXh0ZW5kcyBQc2V1ZG9QYXJhbWV0ZXIge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcignQVdTOjpTdGFja05hbWUnKTtcbiAgfVxufVxuIl19