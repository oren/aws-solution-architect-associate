"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const construct_1 = require("../core/construct");
const fn_1 = require("./fn");
const stack_1 = require("./stack");
class Output extends stack_1.StackElement {
    /**
     * Creates an Output value for this stack.
     * @param parent The parent construct.
     * @param props Output properties.
     */
    constructor(parent, name, props = {}) {
        super(parent, name);
        this.description = props.description;
        this.value = props.value;
        this.condition = props.condition;
        if (props.export) {
            if (props.disableExport) {
                throw new Error('Cannot set `disableExport` and specify an export name');
            }
            this.export = props.export;
        }
        else if (!props.disableExport) {
            // prefix export name with stack name since exports are global within account + region.
            const stackName = stack_1.Stack.find(this).id;
            this.export = stackName ? stackName + ':' : '';
            this.export += this.logicalId;
        }
    }
    /**
     * Returns an FnImportValue bound to this export name.
     */
    makeImportValue() {
        if (!this.export) {
            throw new Error('Cannot create an ImportValue without an export name');
        }
        return new fn_1.FnImportValue(this.export);
    }
    toCloudFormation() {
        return {
            Outputs: {
                [this.logicalId]: {
                    Description: this.description,
                    Value: this.value,
                    Export: this.export != null ? { Name: this.export } : undefined,
                    Condition: this.condition ? this.condition.logicalId : undefined
                }
            }
        };
    }
    get ref() {
        throw new Error('Outputs cannot be referenced');
    }
}
exports.Output = Output;
/**
 * An output for a list of strings.
 *
 * Exports a list of Tokens via an Output variable, and return a list of Tokens
 * that selects the imported values for them.
 */
class StringListOutput extends construct_1.Construct {
    constructor(parent, name, props) {
        super(parent, name);
        this.separator = props.separator || ',';
        this.length = props.values.length;
        this.output = new Output(this, 'Resource', {
            description: props.description,
            condition: props.condition,
            disableExport: props.disableExport,
            export: props.export,
            value: new fn_1.FnJoin(this.separator, props.values)
        });
    }
    /**
     * Return an array of imported values for this Output
     */
    makeImportValues() {
        const combined = this.output.makeImportValue();
        const ret = [];
        for (let i = 0; i < this.length; i++) {
            ret.push(new fn_1.FnSelect(i, new fn_1.FnSplit(this.separator, combined)));
        }
        return ret;
    }
}
exports.StringListOutput = StringListOutput;
//# sourceMappingURL=data:application/json;base64,