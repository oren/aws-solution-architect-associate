"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("../core/util");
const cloudformation_token_1 = require("./cloudformation-token");
const stack_1 = require("./stack");
/**
 * Represents a CloudFormation resource.
 */
class Resource extends stack_1.Referenceable {
    /**
     * Creates a resource construct.
     * @param resourceType The CloudFormation type of this resource (e.g. AWS::DynamoDB::Table)
     */
    constructor(parent, name, props) {
        super(parent, name);
        /**
         * Options for this resource, such as condition, update policy etc.
         */
        this.options = {};
        /**
         * AWS resource property overrides.
         *
         * During synthesis, the method "renderProperties(this.overrides)" is called
         * with this object, and merged on top of the output of
         * "renderProperties(this.properties)".
         *
         * Derived classes should expose a strongly-typed version of this object as
         * a public property called `propertyOverrides`.
         */
        this.untypedPropertyOverrides = {};
        /**
         * An object to be merged on top of the entire resource definition.
         */
        this.rawOverrides = {};
        this.dependsOn = new Array();
        if (!props.type) {
            throw new Error('The `type` property is required');
        }
        this.resourceType = props.type;
        this.properties = props.properties || {};
    }
    /**
     * A decoration used to create a CloudFormation attribute property.
     * @param customName Custom name for the attribute (default is the name of the property)
     * NOTE: we return "any" here to satistfy jsii, which doesn't support lambdas.
     */
    static attribute(customName) {
        return (prototype, key) => {
            const name = customName || key;
            Object.defineProperty(prototype, key, {
                get() {
                    return this.getAtt(name);
                }
            });
        };
    }
    /**
     * Returns a token for an runtime attribute of this resource.
     * Ideally, use generated attribute accessors (e.g. `resource.arn`), but this can be used for future compatibility
     * in case there is no generated attribute.
     * @param attributeName The name of the attribute.
     */
    getAtt(attributeName) {
        return new cloudformation_token_1.CloudFormationToken({ 'Fn::GetAtt': [this.logicalId, attributeName] }, `${this.logicalId}.${attributeName}`);
    }
    /**
     * Adds a dependency on another resource.
     * @param other The other resource.
     */
    addDependency(...other) {
        this.dependsOn.push(...other);
    }
    /**
     * Adds an override to the synthesized CloudFormation resource. To add a
     * property override, either use `addPropertyOverride` or prefix `path` with
     * "Properties." (i.e. `Properties.TopicName`).
     *
     * @param path  The path of the property, you can use dot notation to
     *        override values in complex types. Any intermdediate keys
     *        will be created as needed.
     * @param value The value. Could be primitive or complex.
     */
    addOverride(path, value) {
        const parts = path.split('.');
        let curr = this.rawOverrides;
        while (parts.length > 1) {
            const key = parts.shift();
            // if we can't recurse further or the previous value is not an
            // object overwrite it with an object.
            const isObject = curr[key] != null && typeof (curr[key]) === 'object' && !Array.isArray(curr[key]);
            if (!isObject) {
                curr[key] = {};
            }
            curr = curr[key];
        }
        const lastKey = parts.shift();
        curr[lastKey] = value;
    }
    /**
     * Syntactic sugar for `addOverride(path, undefined)`.
     * @param path The path of the value to delete
     */
    addDeletionOverride(path) {
        this.addOverride(path, undefined);
    }
    /**
     * Adds an override to a resource property.
     *
     * Syntactic sugar for `addOverride("Properties.<...>", value)`.
     *
     * @param propertyPath The path of the property
     * @param value The value
     */
    addPropertyOverride(propertyPath, value) {
        this.addOverride(`Properties.${propertyPath}`, value);
    }
    /**
     * Adds an override that deletes the value of a property from the resource definition.
     * @param propertyPath The path to the property.
     */
    addPropertyDeletionOverride(propertyPath) {
        this.addPropertyOverride(propertyPath, undefined);
    }
    /**
     * Emits CloudFormation for this resource.
     */
    toCloudFormation() {
        try {
            // merge property overrides onto properties and then render (and validate).
            const properties = this.renderProperties(deepMerge(this.properties || {}, this.untypedPropertyOverrides));
            return {
                Resources: {
                    [this.logicalId]: deepMerge({
                        Type: this.resourceType,
                        Properties: util_1.ignoreEmpty(properties),
                        DependsOn: util_1.ignoreEmpty(this.renderDependsOn()),
                        CreationPolicy: util_1.capitalizePropertyNames(this.options.creationPolicy),
                        UpdatePolicy: util_1.capitalizePropertyNames(this.options.updatePolicy),
                        DeletionPolicy: util_1.capitalizePropertyNames(this.options.deletionPolicy),
                        Metadata: util_1.ignoreEmpty(this.options.metadata),
                        Condition: this.options.condition && this.options.condition.logicalId
                    }, this.rawOverrides)
                }
            };
        }
        catch (e) {
            // Change message
            e.message = `While synthesizing ${this.path}: ${e.message}`;
            // Adjust stack trace (make it look like node built it, too...)
            const creationStack = ['--- resource created at ---', ...this.creationStackTrace].join('\n  at ');
            const problemTrace = e.stack.substr(e.stack.indexOf(e.message) + e.message.length);
            e.stack = `${e.message}\n  ${creationStack}\n  --- problem discovered at ---${problemTrace}`;
            // Re-throw
            throw e;
        }
    }
    renderProperties(properties) {
        return properties;
    }
    renderDependsOn() {
        const logicalIDs = new Set();
        for (const d of this.dependsOn) {
            addDependency(d);
        }
        return Array.from(logicalIDs);
        function addDependency(d) {
            d.dependencyElements.forEach(dep => {
                const logicalId = dep.logicalId;
                if (logicalId) {
                    logicalIDs.add(logicalId);
                }
            });
            // break if dependencyElements include only 'd', which means we reached a terminal.
            if (d.dependencyElements.length === 1 && d.dependencyElements[0] === d) {
                return;
            }
            else {
                d.dependencyElements.forEach(dep => addDependency(dep));
            }
        }
    }
}
exports.Resource = Resource;
/**
 * Merges `source` into `target`, overriding any existing values.
 * `null`s will cause a value to be deleted.
 */
function deepMerge(target, source) {
    if (typeof (source) !== 'object' || typeof (target) !== 'object') {
        throw new Error(`Invalid usage. Both source (${JSON.stringify(source)}) and target (${JSON.stringify(target)}) must be objects`);
    }
    for (const key of Object.keys(source)) {
        const value = source[key];
        if (typeof (value) === 'object' && value != null && !Array.isArray(value)) {
            // if the value at the target is not an object, override it with an
            // object so we can continue the recursion
            if (typeof (target[key]) !== 'object') {
                target[key] = {};
            }
            deepMerge(target[key], value);
            // if the result of the merge is an empty object, it's because the
            // eventual value we assigned is `undefined`, and there are no
            // sibling concrete values alongside, so we can delete this tree.
            const output = target[key];
            if (typeof (output) === 'object' && Object.keys(output).length === 0) {
                delete target[key];
            }
        }
        else if (value === undefined) {
            delete target[key];
        }
        else {
            target[key] = value;
        }
    }
    return target;
}
exports.deepMerge = deepMerge;
//# sourceMappingURL=data:application/json;base64,