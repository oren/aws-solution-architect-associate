"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const construct_1 = require("../core/construct");
const tokens_1 = require("../core/tokens");
const parameter_1 = require("./parameter");
/**
 * A token that represents a value that's expected to be a secret, like
 * passwords and keys.
 *
 * It is recommended to use the `SecretParameter` construct in order to import
 * secret values from the SSM Parameter Store instead of storing them in your
 * code.
 *
 * However, you can also just pass in values, like any other token: `new Secret('bla')`
 */
class Secret extends tokens_1.Token {
}
exports.Secret = Secret;
/**
 * Defines a secret value resolved from the Systems Manager (SSM) Parameter
 * Store during deployment. This is useful for referencing values that you do
 * not wish to include in your code base, such as secrets, passwords and keys.
 *
 * This construct will add a CloudFormation parameter to your template bound to
 * an SSM parameter (of type "AWS::SSM::Parameter::Value<String>"). Deployment
 * will fail if the value doesn't exist in the target environment.
 *
 * Important: For values other than secrets, prefer to use the
 * `SSMParameterProvider` which resolves SSM parameter in design-time, and
 * ensures that stack deployments are deterministic.
 */
class SecretParameter extends construct_1.Construct {
    constructor(parent, name, props) {
        super(parent, name);
        const param = new parameter_1.Parameter(this, 'Parameter', {
            type: 'AWS::SSM::Parameter::Value<String>',
            default: props.ssmParameter,
            description: props.description,
            allowedPattern: props.allowedPattern,
            allowedValues: props.allowedValues,
            constraintDescription: props.constraintDescription,
            maxLength: props.maxLength,
            minLength: props.minLength,
            noEcho: true,
        });
        this.value = new Secret(param.ref);
    }
}
exports.SecretParameter = SecretParameter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VjcmV0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic2VjcmV0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsaURBQThDO0FBQzlDLDJDQUF1QztBQUN2QywyQ0FBd0M7QUFFeEM7Ozs7Ozs7OztHQVNHO0FBQ0gsTUFBYSxNQUFPLFNBQVEsY0FBSztDQUFJO0FBQXJDLHdCQUFxQztBQTJDckM7Ozs7Ozs7Ozs7OztHQVlHO0FBQ0gsTUFBYSxlQUFnQixTQUFRLHFCQUFTO0lBTTVDLFlBQVksTUFBaUIsRUFBRSxJQUFZLEVBQUUsS0FBa0I7UUFDN0QsS0FBSyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztRQUVwQixNQUFNLEtBQUssR0FBRyxJQUFJLHFCQUFTLENBQUMsSUFBSSxFQUFFLFdBQVcsRUFBRTtZQUM3QyxJQUFJLEVBQUUsb0NBQW9DO1lBQzFDLE9BQU8sRUFBRSxLQUFLLENBQUMsWUFBWTtZQUMzQixXQUFXLEVBQUUsS0FBSyxDQUFDLFdBQVc7WUFDOUIsY0FBYyxFQUFFLEtBQUssQ0FBQyxjQUFjO1lBQ3BDLGFBQWEsRUFBRSxLQUFLLENBQUMsYUFBYTtZQUNsQyxxQkFBcUIsRUFBRSxLQUFLLENBQUMscUJBQXFCO1lBQ2xELFNBQVMsRUFBRSxLQUFLLENBQUMsU0FBUztZQUMxQixTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVM7WUFDMUIsTUFBTSxFQUFFLElBQUk7U0FDYixDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNyQyxDQUFDO0NBQ0Y7QUF2QkQsMENBdUJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSAnLi4vY29yZS9jb25zdHJ1Y3QnO1xuaW1wb3J0IHsgVG9rZW4gfSBmcm9tICcuLi9jb3JlL3Rva2Vucyc7XG5pbXBvcnQgeyBQYXJhbWV0ZXIgfSBmcm9tICcuL3BhcmFtZXRlcic7XG5cbi8qKlxuICogQSB0b2tlbiB0aGF0IHJlcHJlc2VudHMgYSB2YWx1ZSB0aGF0J3MgZXhwZWN0ZWQgdG8gYmUgYSBzZWNyZXQsIGxpa2VcbiAqIHBhc3N3b3JkcyBhbmQga2V5cy5cbiAqXG4gKiBJdCBpcyByZWNvbW1lbmRlZCB0byB1c2UgdGhlIGBTZWNyZXRQYXJhbWV0ZXJgIGNvbnN0cnVjdCBpbiBvcmRlciB0byBpbXBvcnRcbiAqIHNlY3JldCB2YWx1ZXMgZnJvbSB0aGUgU1NNIFBhcmFtZXRlciBTdG9yZSBpbnN0ZWFkIG9mIHN0b3JpbmcgdGhlbSBpbiB5b3VyXG4gKiBjb2RlLlxuICpcbiAqIEhvd2V2ZXIsIHlvdSBjYW4gYWxzbyBqdXN0IHBhc3MgaW4gdmFsdWVzLCBsaWtlIGFueSBvdGhlciB0b2tlbjogYG5ldyBTZWNyZXQoJ2JsYScpYFxuICovXG5leHBvcnQgY2xhc3MgU2VjcmV0IGV4dGVuZHMgVG9rZW4geyB9XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2VjcmV0UHJvcHMge1xuICAvKipcbiAgICogVGhlIG5hbWUgb2YgdGhlIFNTTSBwYXJhbWV0ZXIgd2hlcmUgdGhlIHNlY3JldCB2YWx1ZSBpcyBzdG9yZWQuXG4gICAqL1xuICBzc21QYXJhbWV0ZXI6IHN0cmluZztcblxuICAvKipcbiAgICogQSBzdHJpbmcgb2YgdXAgdG8gNDAwMCBjaGFyYWN0ZXJzIHRoYXQgZGVzY3JpYmVzIHRoZSBwYXJhbWV0ZXIuXG4gICAqIEBkZWZhdWx0IE5vIGRlc2NyaXB0aW9uXG4gICAqL1xuICBkZXNjcmlwdGlvbj86IHN0cmluZztcblxuICAvKipcbiAgICogQSByZWd1bGFyIGV4cHJlc3Npb24gdGhhdCByZXByZXNlbnRzIHRoZSBwYXR0ZXJucyB0byBhbGxvdyBmb3IgU3RyaW5nIHR5cGVzLlxuICAgKi9cbiAgYWxsb3dlZFBhdHRlcm4/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEFuIGFycmF5IGNvbnRhaW5pbmcgdGhlIGxpc3Qgb2YgdmFsdWVzIGFsbG93ZWQgZm9yIHRoZSBwYXJhbWV0ZXIuXG4gICAqL1xuICBhbGxvd2VkVmFsdWVzPzogc3RyaW5nW107XG5cbiAgLyoqXG4gICAqIEEgc3RyaW5nIHRoYXQgZXhwbGFpbnMgYSBjb25zdHJhaW50IHdoZW4gdGhlIGNvbnN0cmFpbnQgaXMgdmlvbGF0ZWQuXG4gICAqIEZvciBleGFtcGxlLCB3aXRob3V0IGEgY29uc3RyYWludCBkZXNjcmlwdGlvbiwgYSBwYXJhbWV0ZXIgdGhhdCBoYXMgYW4gYWxsb3dlZFxuICAgKiBwYXR0ZXJuIG9mIFtBLVphLXowLTldKyBkaXNwbGF5cyB0aGUgZm9sbG93aW5nIGVycm9yIG1lc3NhZ2Ugd2hlbiB0aGUgdXNlciBzcGVjaWZpZXNcbiAgICogYW4gaW52YWxpZCB2YWx1ZTpcbiAgICovXG4gIGNvbnN0cmFpbnREZXNjcmlwdGlvbj86IHN0cmluZztcblxuICAvKipcbiAgICogQW4gaW50ZWdlciB2YWx1ZSB0aGF0IGRldGVybWluZXMgdGhlIGxhcmdlc3QgbnVtYmVyIG9mIGNoYXJhY3RlcnMgeW91IHdhbnQgdG8gYWxsb3cgZm9yIFN0cmluZyB0eXBlcy5cbiAgICovXG4gIG1heExlbmd0aD86IG51bWJlcjtcblxuICAvKipcbiAgICogQW4gaW50ZWdlciB2YWx1ZSB0aGF0IGRldGVybWluZXMgdGhlIHNtYWxsZXN0IG51bWJlciBvZiBjaGFyYWN0ZXJzIHlvdSB3YW50IHRvIGFsbG93IGZvciBTdHJpbmcgdHlwZXMuXG4gICAqL1xuICBtaW5MZW5ndGg/OiBudW1iZXI7XG59XG5cbi8qKlxuICogRGVmaW5lcyBhIHNlY3JldCB2YWx1ZSByZXNvbHZlZCBmcm9tIHRoZSBTeXN0ZW1zIE1hbmFnZXIgKFNTTSkgUGFyYW1ldGVyXG4gKiBTdG9yZSBkdXJpbmcgZGVwbG95bWVudC4gVGhpcyBpcyB1c2VmdWwgZm9yIHJlZmVyZW5jaW5nIHZhbHVlcyB0aGF0IHlvdSBkb1xuICogbm90IHdpc2ggdG8gaW5jbHVkZSBpbiB5b3VyIGNvZGUgYmFzZSwgc3VjaCBhcyBzZWNyZXRzLCBwYXNzd29yZHMgYW5kIGtleXMuXG4gKlxuICogVGhpcyBjb25zdHJ1Y3Qgd2lsbCBhZGQgYSBDbG91ZEZvcm1hdGlvbiBwYXJhbWV0ZXIgdG8geW91ciB0ZW1wbGF0ZSBib3VuZCB0b1xuICogYW4gU1NNIHBhcmFtZXRlciAob2YgdHlwZSBcIkFXUzo6U1NNOjpQYXJhbWV0ZXI6OlZhbHVlPFN0cmluZz5cIikuIERlcGxveW1lbnRcbiAqIHdpbGwgZmFpbCBpZiB0aGUgdmFsdWUgZG9lc24ndCBleGlzdCBpbiB0aGUgdGFyZ2V0IGVudmlyb25tZW50LlxuICpcbiAqIEltcG9ydGFudDogRm9yIHZhbHVlcyBvdGhlciB0aGFuIHNlY3JldHMsIHByZWZlciB0byB1c2UgdGhlXG4gKiBgU1NNUGFyYW1ldGVyUHJvdmlkZXJgIHdoaWNoIHJlc29sdmVzIFNTTSBwYXJhbWV0ZXIgaW4gZGVzaWduLXRpbWUsIGFuZFxuICogZW5zdXJlcyB0aGF0IHN0YWNrIGRlcGxveW1lbnRzIGFyZSBkZXRlcm1pbmlzdGljLlxuICovXG5leHBvcnQgY2xhc3MgU2VjcmV0UGFyYW1ldGVyIGV4dGVuZHMgQ29uc3RydWN0IHtcbiAgLyoqXG4gICAqIFRoZSB2YWx1ZSBvZiB0aGUgc2VjcmV0IHBhcmFtZXRlci5cbiAgICovXG4gIHB1YmxpYyB2YWx1ZTogU2VjcmV0O1xuXG4gIGNvbnN0cnVjdG9yKHBhcmVudDogQ29uc3RydWN0LCBuYW1lOiBzdHJpbmcsIHByb3BzOiBTZWNyZXRQcm9wcykge1xuICAgIHN1cGVyKHBhcmVudCwgbmFtZSk7XG5cbiAgICBjb25zdCBwYXJhbSA9IG5ldyBQYXJhbWV0ZXIodGhpcywgJ1BhcmFtZXRlcicsIHtcbiAgICAgIHR5cGU6ICdBV1M6OlNTTTo6UGFyYW1ldGVyOjpWYWx1ZTxTdHJpbmc+JyxcbiAgICAgIGRlZmF1bHQ6IHByb3BzLnNzbVBhcmFtZXRlcixcbiAgICAgIGRlc2NyaXB0aW9uOiBwcm9wcy5kZXNjcmlwdGlvbixcbiAgICAgIGFsbG93ZWRQYXR0ZXJuOiBwcm9wcy5hbGxvd2VkUGF0dGVybixcbiAgICAgIGFsbG93ZWRWYWx1ZXM6IHByb3BzLmFsbG93ZWRWYWx1ZXMsXG4gICAgICBjb25zdHJhaW50RGVzY3JpcHRpb246IHByb3BzLmNvbnN0cmFpbnREZXNjcmlwdGlvbixcbiAgICAgIG1heExlbmd0aDogcHJvcHMubWF4TGVuZ3RoLFxuICAgICAgbWluTGVuZ3RoOiBwcm9wcy5taW5MZW5ndGgsXG4gICAgICBub0VjaG86IHRydWUsXG4gICAgfSk7XG5cbiAgICB0aGlzLnZhbHVlID0gbmV3IFNlY3JldChwYXJhbS5yZWYpO1xuICB9XG59XG4iXX0=