"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cxapi = require("@aws-cdk/cx-api");
const fs = require("fs");
const path = require("path");
const stack_1 = require("./cloudformation/stack");
const construct_1 = require("./core/construct");
const tokens_1 = require("./core/tokens");
/**
 * Represents a CDK program.
 */
class App extends construct_1.Root {
    /**
     * Initializes a CDK application.
     * @param request Optional toolkit request (e.g. for tests)
     */
    constructor() {
        super();
        this.loadContext();
    }
    get stacks() {
        const out = {};
        for (const child of this.children) {
            if (!(child instanceof stack_1.Stack)) {
                throw new Error(`The child ${child.toString()} of Program must be a Stack`);
            }
            out[child.id] = child;
        }
        return out;
    }
    /**
     * Runs the program. Output is written to output directory as specified in the request.
     */
    run() {
        const outdir = process.env[cxapi.OUTDIR_ENV];
        if (!outdir) {
            process.stderr.write(`ERROR: The environment variable "${cxapi.OUTDIR_ENV}" is not defined\n`);
            process.stderr.write('AWS CDK Toolkit (>= 0.11.0) is required in order to interact with this program.\n');
            process.exit(1);
            return;
        }
        const result = {
            version: cxapi.PROTO_RESPONSE_VERSION,
            stacks: this.synthesizeStacks(Object.keys(this.stacks)),
            runtime: this.collectRuntimeInformation()
        };
        const outfile = path.join(outdir, cxapi.OUTFILE_NAME);
        fs.writeFileSync(outfile, JSON.stringify(result, undefined, 2));
    }
    /**
     * Synthesize and validate a single stack
     * @param stackName The name of the stack to synthesize
     */
    synthesizeStack(stackName) {
        const stack = this.getStack(stackName);
        // first, validate this stack and stop if there are errors.
        const errors = stack.validateTree();
        if (errors.length > 0) {
            const errorList = errors.map(e => `[${e.source.path}] ${e.message}`).join('\n  ');
            throw new Error(`Stack validation failed with the following errors:\n  ${errorList}`);
        }
        const account = stack.env.account || 'unknown-account';
        const region = stack.env.region || 'unknown-region';
        const environment = {
            name: `${account}/${region}`,
            account,
            region
        };
        const missing = Object.keys(stack.missingContext).length ? stack.missingContext : undefined;
        return {
            name: stack.id,
            environment,
            missing,
            template: stack.toCloudFormation(),
            metadata: this.collectMetadata(stack)
        };
    }
    /**
     * Synthesizes multiple stacks
     */
    synthesizeStacks(stackNames) {
        const ret = [];
        for (const stackName of stackNames) {
            ret.push(this.synthesizeStack(stackName));
        }
        return ret;
    }
    /**
     * Returns metadata for all constructs in the stack.
     */
    collectMetadata(stack) {
        const output = {};
        visit(stack);
        // add app-level metadata under "."
        if (this.metadata.length > 0) {
            output[construct_1.PATH_SEP] = this.metadata;
        }
        return output;
        function visit(node) {
            if (node.metadata.length > 0) {
                // Make the path absolute
                output[construct_1.PATH_SEP + node.path] = node.metadata.map(md => tokens_1.resolve(md));
            }
            for (const child of node.children) {
                visit(child);
            }
        }
    }
    collectRuntimeInformation() {
        const libraries = {};
        for (const fileName of Object.keys(require.cache)) {
            const pkg = findNpmPackage(fileName);
            if (pkg && !pkg.private) {
                libraries[pkg.name] = pkg.version;
            }
        }
        return { libraries };
    }
    getStack(stackname) {
        if (stackname == null) {
            throw new Error('Stack name must be defined');
        }
        const stack = this.stacks[stackname];
        if (!stack) {
            throw new Error(`Cannot find stack ${stackname}`);
        }
        return stack;
    }
    loadContext() {
        const contextJson = process.env[cxapi.CONTEXT_ENV];
        const context = !contextJson ? {} : JSON.parse(contextJson);
        for (const key of Object.keys(context)) {
            this.setContext(key, context[key]);
        }
    }
}
exports.App = App;
/**
 * Determines which NPM module a given loaded javascript file is from.
 *
 * The only infromation that is available locally is a list of Javascript files,
 * and every source file is associated with a search path to resolve the further
 * ``require`` calls made from there, which includes its own directory on disk,
 * and parent directories - for example:
 *
 * [ '...repo/packages/aws-cdk-resources/lib/cfn/node_modules',
 *   '...repo/packages/aws-cdk-resources/lib/node_modules',
 *   '...repo/packages/aws-cdk-resources/node_modules',
 *   '...repo/packages/node_modules',
 *   // etc...
 * ]
 *
 * We are looking for ``package.json`` that is anywhere in the tree, except it's
 * in the parent directory, not in the ``node_modules`` directory. For this
 * reason, we strip the ``/node_modules`` suffix off each path and use regular
 * module resolution to obtain a reference to ``package.json``.
 *
 * @param fileName a javascript file name.
 * @returns the NPM module infos (aka ``package.json`` contents), or
 *      ``undefined`` if the lookup was unsuccessful.
 */
function findNpmPackage(fileName) {
    const mod = require.cache[fileName];
    const paths = mod.paths.map(stripNodeModules);
    try {
        const packagePath = require.resolve('package.json', { paths });
        return require(packagePath);
    }
    catch (e) {
        return undefined;
    }
    /**
     * @param s a path.
     * @returns ``s`` with any terminating ``/node_modules``
     *      (or ``\\node_modules``) stripped off.)
     */
    function stripNodeModules(s) {
        if (s.endsWith('/node_modules') || s.endsWith('\\node_modules')) {
            // /node_modules is 13 characters
            return s.substr(0, s.length - 13);
        }
        return s;
    }
}
//# sourceMappingURL=data:application/json;base64,