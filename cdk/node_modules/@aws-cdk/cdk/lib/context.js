"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const stack_1 = require("./cloudformation/stack");
const AVAILABILITY_ZONES_PROVIDER = 'availability-zones';
const SSM_PARAMETER_PROVIDER = 'ssm';
/**
 * Base class for the model side of context providers
 *
 * Instances of this class communicate with context provider plugins in the 'cdk
 * toolkit' via context variables (input), outputting specialized queries for
 * more context variables (output).
 *
 * ContextProvider needs access to a Construct to hook into the context mechanism.
 */
class ContextProvider {
    constructor(context, provider, props = {}) {
        this.context = context;
        this.provider = provider;
        this.stack = stack_1.Stack.find(context);
        this.props = Object.assign({ account: this.stack.env.account, region: this.stack.env.region }, props);
    }
    get key() {
        const propStrings = propsToArray(this.props);
        return `${this.provider}:${propStrings.join(':')}`;
    }
    /**
     * Read a provider value and verify it is not `null`
     */
    getValue(defaultValue) {
        // if account or region is not defined this is probably a test mode, so we just
        // return the default value
        if (!this.props.account || !this.props.region) {
            this.context.addError(formatMissingScopeError(this.provider, this.props));
            return defaultValue;
        }
        const value = this.context.getContext(this.key);
        if (value != null) {
            return value;
        }
        this.stack.reportMissingContext(this.key, {
            provider: this.provider,
            props: this.props,
        });
        return defaultValue;
    }
    /**
     * Read a provider value, verifying it's a string
     * @param defaultValue The value to return if there is no value defined for this context key
     */
    getStringValue(defaultValue) {
        // if scope is undefined, this is probably a test mode, so we just
        // return the default value
        if (!this.props.account || !this.props.region) {
            this.context.addError(formatMissingScopeError(this.provider, this.props));
            return defaultValue;
        }
        const value = this.context.getContext(this.key);
        if (value != null) {
            if (typeof value !== 'string') {
                throw new TypeError(`Expected context parameter '${this.key}' to be a string, but got '${JSON.stringify(value)}'`);
            }
            return value;
        }
        this.stack.reportMissingContext(this.key, {
            provider: this.provider,
            props: this.props,
        });
        return defaultValue;
    }
    /**
     * Read a provider value, verifying it's a list
     * @param defaultValue The value to return if there is no value defined for this context key
     */
    getStringListValue(defaultValue) {
        // if scope is undefined, this is probably a test mode, so we just
        // return the default value and report an error so this in not accidentally used
        // in the toolkit
        if (!this.props.account || !this.props.region) {
            this.context.addError(formatMissingScopeError(this.provider, this.props));
            return defaultValue;
        }
        const value = this.context.getContext(this.key);
        if (value != null) {
            if (!value.map) {
                throw new Error(`Context value '${this.key}' is supposed to be a list, got '${JSON.stringify(value)}'`);
            }
            return value;
        }
        this.stack.reportMissingContext(this.key, {
            provider: this.provider,
            props: this.props,
        });
        return defaultValue;
    }
}
exports.ContextProvider = ContextProvider;
/**
 * Quote colons in all strings so that we can undo the quoting at a later point
 *
 * We'll use $ as a quoting character, for no particularly good reason other
 * than that \ is going to lead to quoting hell when the keys are stored in JSON.
 */
function colonQuote(xs) {
    return xs.replace('$', '$$').replace(':', '$:');
}
/**
 * Context provider that will return the availability zones for the current account and region
 */
class AvailabilityZoneProvider {
    constructor(context) {
        this.provider = new ContextProvider(context, AVAILABILITY_ZONES_PROVIDER);
    }
    /**
     * Return the list of AZs for the current account and region
     */
    get availabilityZones() {
        return this.provider.getStringListValue(['dummy1a', 'dummy1b', 'dummy1c']);
    }
}
exports.AvailabilityZoneProvider = AvailabilityZoneProvider;
/**
 * Context provider that will read values from the SSM parameter store in the indicated account and region
 */
class SSMParameterProvider {
    constructor(context, props) {
        this.provider = new ContextProvider(context, SSM_PARAMETER_PROVIDER, props);
    }
    /**
     * Return the SSM parameter string with the indicated key
     */
    parameterValue(defaultValue = 'dummy') {
        return this.provider.getStringValue(defaultValue);
    }
}
exports.SSMParameterProvider = SSMParameterProvider;
function formatMissingScopeError(provider, props) {
    let s = `Cannot determine scope for context provider ${provider}`;
    const propsString = Object.keys(props).map(key => (`${key}=${props[key]}`));
    s += ` with props: ${propsString}.`;
    s += '\n';
    s += 'This usually happens when AWS credentials are not available and the default account/region cannot be determined.';
    return s;
}
function propsToArray(props) {
    const propArray = [];
    const keys = Object.keys(props);
    keys.sort();
    for (const key of keys) {
        switch (typeof props[key]) {
            case 'object': {
                const childObjStrs = propsToArray(props[key]);
                const qualifiedChildStr = childObjStrs.map(child => (`${key}.${child}`)).join(':');
                propArray.push(qualifiedChildStr);
                break;
            }
            case 'string': {
                propArray.push(`${key}=${colonQuote(props[key])}`);
                break;
            }
            default: {
                propArray.push(`${key}=${JSON.stringify(props[key])}`);
                break;
            }
        }
    }
    return propArray;
}
//# sourceMappingURL=data:application/json;base64,