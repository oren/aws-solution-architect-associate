"use strict";
const cx_api_1 = require("@aws-cdk/cx-api");
const lib_1 = require("../lib");
module.exports = {
    'By default, environment region and account are not defined'(test) {
        const stack = new lib_1.Stack();
        test.ok(stack.env);
        test.equal(stack.env.account, null);
        test.equal(stack.env.region, null);
        test.done();
    },
    'Default account and region can be set in context (`aws:cdk:toolkit:default-account` and `aws:cdk:toolkit:default-region`)'(test) {
        const app = new lib_1.App();
        app.setContext(cx_api_1.DEFAULT_ACCOUNT_CONTEXT_KEY, 'my-default-account');
        app.setContext(cx_api_1.DEFAULT_REGION_CONTEXT_KEY, 'my-default-region');
        const stack = new lib_1.Stack(app);
        test.equal(stack.env.account, 'my-default-account');
        test.equal(stack.env.region, 'my-default-region');
        test.done();
    },
    'If only `env.region` or `env.account` are specified, defaults will be used for the other'(test) {
        const app = new lib_1.App();
        app.setContext(cx_api_1.DEFAULT_ACCOUNT_CONTEXT_KEY, 'my-default-account');
        app.setContext(cx_api_1.DEFAULT_REGION_CONTEXT_KEY, 'my-default-region');
        const stack1 = new lib_1.Stack(app, 'S1', { env: { region: 'only-region' } });
        const stack2 = new lib_1.Stack(app, 'S2', { env: { account: 'only-account' } });
        test.equal(stack1.env.account, 'my-default-account');
        test.equal(stack1.env.region, 'only-region');
        test.equal(stack2.env.account, 'only-account');
        test.equal(stack2.env.region, 'my-default-region');
        test.done();
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5lbnZpcm9ubWVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInRlc3QuZW52aXJvbm1lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLDRDQUEwRjtBQUUxRixnQ0FBb0M7QUFFcEMsaUJBQVM7SUFDUCw0REFBNEQsQ0FBQyxJQUFVO1FBQ3JFLE1BQU0sS0FBSyxHQUFHLElBQUksV0FBSyxFQUFFLENBQUM7UUFDMUIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbkIsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNwQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ25DLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNkLENBQUM7SUFFRCwySEFBMkgsQ0FBQyxJQUFVO1FBQ3BJLE1BQU0sR0FBRyxHQUFHLElBQUksU0FBRyxFQUFFLENBQUM7UUFFdEIsR0FBRyxDQUFDLFVBQVUsQ0FBQyxvQ0FBMkIsRUFBRSxvQkFBb0IsQ0FBQyxDQUFDO1FBQ2xFLEdBQUcsQ0FBQyxVQUFVLENBQUMsbUNBQTBCLEVBQUUsbUJBQW1CLENBQUMsQ0FBQztRQUVoRSxNQUFNLEtBQUssR0FBRyxJQUFJLFdBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUU3QixJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLG9CQUFvQixDQUFDLENBQUM7UUFDcEQsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxtQkFBbUIsQ0FBQyxDQUFDO1FBRWxELElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNkLENBQUM7SUFFRCwwRkFBMEYsQ0FBQyxJQUFVO1FBQ25HLE1BQU0sR0FBRyxHQUFHLElBQUksU0FBRyxFQUFFLENBQUM7UUFFdEIsR0FBRyxDQUFDLFVBQVUsQ0FBQyxvQ0FBMkIsRUFBRSxvQkFBb0IsQ0FBQyxDQUFDO1FBQ2xFLEdBQUcsQ0FBQyxVQUFVLENBQUMsbUNBQTBCLEVBQUUsbUJBQW1CLENBQUMsQ0FBQztRQUVoRSxNQUFNLE1BQU0sR0FBRyxJQUFJLFdBQUssQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsTUFBTSxFQUFFLGFBQWEsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUN4RSxNQUFNLE1BQU0sR0FBRyxJQUFJLFdBQUssQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLGNBQWMsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUUxRSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLG9CQUFvQixDQUFDLENBQUM7UUFDckQsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxhQUFhLENBQUMsQ0FBQztRQUU3QyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLGNBQWMsQ0FBQyxDQUFDO1FBQy9DLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsbUJBQW1CLENBQUMsQ0FBQztRQUVuRCxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDZCxDQUFDO0NBQ0ssQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERFRkFVTFRfQUNDT1VOVF9DT05URVhUX0tFWSwgREVGQVVMVF9SRUdJT05fQ09OVEVYVF9LRVkgfSBmcm9tICdAYXdzLWNkay9jeC1hcGknO1xuaW1wb3J0IHsgVGVzdCB9IGZyb20gJ25vZGV1bml0JztcbmltcG9ydCB7IEFwcCwgU3RhY2sgfSBmcm9tICcuLi9saWInO1xuXG5leHBvcnQgPSB7XG4gICdCeSBkZWZhdWx0LCBlbnZpcm9ubWVudCByZWdpb24gYW5kIGFjY291bnQgYXJlIG5vdCBkZWZpbmVkJyh0ZXN0OiBUZXN0KSB7XG4gICAgY29uc3Qgc3RhY2sgPSBuZXcgU3RhY2soKTtcbiAgICB0ZXN0Lm9rKHN0YWNrLmVudik7XG4gICAgdGVzdC5lcXVhbChzdGFjay5lbnYuYWNjb3VudCwgbnVsbCk7XG4gICAgdGVzdC5lcXVhbChzdGFjay5lbnYucmVnaW9uLCBudWxsKTtcbiAgICB0ZXN0LmRvbmUoKTtcbiAgfSxcblxuICAnRGVmYXVsdCBhY2NvdW50IGFuZCByZWdpb24gY2FuIGJlIHNldCBpbiBjb250ZXh0IChgYXdzOmNkazp0b29sa2l0OmRlZmF1bHQtYWNjb3VudGAgYW5kIGBhd3M6Y2RrOnRvb2xraXQ6ZGVmYXVsdC1yZWdpb25gKScodGVzdDogVGVzdCkge1xuICAgIGNvbnN0IGFwcCA9IG5ldyBBcHAoKTtcblxuICAgIGFwcC5zZXRDb250ZXh0KERFRkFVTFRfQUNDT1VOVF9DT05URVhUX0tFWSwgJ215LWRlZmF1bHQtYWNjb3VudCcpO1xuICAgIGFwcC5zZXRDb250ZXh0KERFRkFVTFRfUkVHSU9OX0NPTlRFWFRfS0VZLCAnbXktZGVmYXVsdC1yZWdpb24nKTtcblxuICAgIGNvbnN0IHN0YWNrID0gbmV3IFN0YWNrKGFwcCk7XG5cbiAgICB0ZXN0LmVxdWFsKHN0YWNrLmVudi5hY2NvdW50LCAnbXktZGVmYXVsdC1hY2NvdW50Jyk7XG4gICAgdGVzdC5lcXVhbChzdGFjay5lbnYucmVnaW9uLCAnbXktZGVmYXVsdC1yZWdpb24nKTtcblxuICAgIHRlc3QuZG9uZSgpO1xuICB9LFxuXG4gICdJZiBvbmx5IGBlbnYucmVnaW9uYCBvciBgZW52LmFjY291bnRgIGFyZSBzcGVjaWZpZWQsIGRlZmF1bHRzIHdpbGwgYmUgdXNlZCBmb3IgdGhlIG90aGVyJyh0ZXN0OiBUZXN0KSB7XG4gICAgY29uc3QgYXBwID0gbmV3IEFwcCgpO1xuXG4gICAgYXBwLnNldENvbnRleHQoREVGQVVMVF9BQ0NPVU5UX0NPTlRFWFRfS0VZLCAnbXktZGVmYXVsdC1hY2NvdW50Jyk7XG4gICAgYXBwLnNldENvbnRleHQoREVGQVVMVF9SRUdJT05fQ09OVEVYVF9LRVksICdteS1kZWZhdWx0LXJlZ2lvbicpO1xuXG4gICAgY29uc3Qgc3RhY2sxID0gbmV3IFN0YWNrKGFwcCwgJ1MxJywgeyBlbnY6IHsgcmVnaW9uOiAnb25seS1yZWdpb24nIH0gfSk7XG4gICAgY29uc3Qgc3RhY2syID0gbmV3IFN0YWNrKGFwcCwgJ1MyJywgeyBlbnY6IHsgYWNjb3VudDogJ29ubHktYWNjb3VudCcgfSB9KTtcblxuICAgIHRlc3QuZXF1YWwoc3RhY2sxLmVudi5hY2NvdW50LCAnbXktZGVmYXVsdC1hY2NvdW50Jyk7XG4gICAgdGVzdC5lcXVhbChzdGFjazEuZW52LnJlZ2lvbiwgJ29ubHktcmVnaW9uJyk7XG5cbiAgICB0ZXN0LmVxdWFsKHN0YWNrMi5lbnYuYWNjb3VudCwgJ29ubHktYWNjb3VudCcpO1xuICAgIHRlc3QuZXF1YWwoc3RhY2syLmVudi5yZWdpb24sICdteS1kZWZhdWx0LXJlZ2lvbicpO1xuXG4gICAgdGVzdC5kb25lKCk7XG4gIH0sXG59IGFzIGFueTtcbiJdfQ==