"use strict";
const cxapi = require("@aws-cdk/cx-api");
const lib_1 = require("../../lib");
function createTree(context) {
    const root = new lib_1.Root();
    if (context) {
        Object.keys(context).forEach(key => root.setContext(key, context[key]));
    }
    const child1 = new lib_1.Construct(root, 'Child1');
    const child2 = new lib_1.Construct(root, 'Child2');
    const child1_1 = new lib_1.Construct(child1, 'Child11');
    const child1_2 = new lib_1.Construct(child1, 'Child12');
    const child1_1_1 = new lib_1.Construct(child1_1, 'Child111');
    const child2_1 = new lib_1.Construct(child2, 'Child21');
    return {
        root, child1, child2, child1_1, child1_2, child1_1_1, child2_1
    };
}
class MyBeautifulConstruct extends lib_1.Construct {
    constructor(parent, name) {
        super(parent, name);
    }
}
class ConstructWithRequired extends lib_1.Construct {
    constructor(parent, name, props) {
        super(parent, name);
        this.requiredProp = this.required(props, 'requiredProp');
        this.anotherRequiredProp = this.required(props, 'anotherRequiredProp');
    }
}
/**
 * Construct that *must* be named "Spartacus"
 */
class IAmSpartacusConstruct extends lib_1.Construct {
    _validateId(name) {
        if (name !== "Spartacus") {
            throw new Error("Construct name must be 'Spartacus'");
        }
    }
}
module.exports = {
    'the "Root" construct is a special construct which can be used as the root of the tree'(test) {
        const root = new lib_1.Root();
        test.equal(root.id, '', 'if not specified, name of a root construct is an empty string');
        test.ok(!root.parent, 'no parent');
        test.equal(root.children.length, 0, 'a construct is created without children'); // no children
        test.done();
    },
    'constructs cannot be created with an empty name unless they are root'(test) {
        const root = new lib_1.Root();
        test.throws(() => new lib_1.Construct(root, ''));
        test.done();
    },
    'construct.name returns the name of the construct'(test) {
        const t = createTree();
        test.equal(t.child1.id, 'Child1');
        test.equal(t.child2.id, 'Child2');
        test.equal(t.child1_1.id, 'Child11');
        test.equal(t.child1_2.id, 'Child12');
        test.equal(t.child1_1_1.id, 'Child111');
        test.equal(t.child2_1.id, 'Child21');
        test.done();
    },
    'construct id can use any character except the path separator'(test) {
        const root = new lib_1.Root();
        new lib_1.Construct(root, 'valid');
        new lib_1.Construct(root, 'ValiD');
        new lib_1.Construct(root, 'Va123lid');
        new lib_1.Construct(root, 'v');
        new lib_1.Construct(root, '  invalid');
        new lib_1.Construct(root, 'invalid   ');
        new lib_1.Construct(root, '123invalid');
        new lib_1.Construct(root, 'in valid');
        new lib_1.Construct(root, 'in_Valid');
        new lib_1.Construct(root, 'in-Valid');
        new lib_1.Construct(root, 'in\\Valid');
        new lib_1.Construct(root, 'in.Valid');
        test.throws(() => new lib_1.Construct(root, 'in/Valid'), Error, 'backslashes are not allowed');
        test.done();
    },
    'construct.uniqueId returns a tree-unique alphanumeric id of this construct'(test) {
        const root = new lib_1.Root();
        const child1 = new lib_1.Construct(root, 'This is the first child');
        const child2 = new lib_1.Construct(child1, 'Second level');
        const c1 = new lib_1.Construct(child2, 'My construct');
        const c2 = new lib_1.Construct(child1, 'My construct');
        test.deepEqual(c1.path, 'This is the first child/Second level/My construct');
        test.deepEqual(c2.path, 'This is the first child/My construct');
        test.deepEqual(c1.uniqueId, 'ThisisthefirstchildSecondlevelMyconstruct202131E0');
        test.deepEqual(c2.uniqueId, 'ThisisthefirstchildMyconstruct8C288DF9');
        test.done();
    },
    'cannot calculate uniqueId if the construct path is ["Default"]'(test) {
        const root = new lib_1.Root();
        test.throws(() => new lib_1.Construct(root, 'Default'), /Unable to calculate a unique id for an empty set of components/);
        test.done();
    },
    'construct.getChildren() returns an array of all children'(test) {
        const root = new lib_1.Root();
        const child = new lib_1.Construct(root, 'Child1');
        new lib_1.Construct(root, 'Child2');
        test.equal(child.children.length, 0, 'no children');
        test.equal(root.children.length, 2, 'two children are expected');
        test.done();
    },
    'construct.findChild(name) can be used to retrieve a child from a parent'(test) {
        const root = new lib_1.Root();
        const child = new lib_1.Construct(root, 'Contruct');
        test.strictEqual(root.tryFindChild(child.id), child, 'findChild(name) can be used to retrieve the child from a parent');
        test.ok(!root.tryFindChild('NotFound'), 'findChild(name) returns undefined if the child is not found');
        test.done();
    },
    'construct.getChild(name) can be used to retrieve a child from a parent'(test) {
        const root = new lib_1.Root();
        const child = new lib_1.Construct(root, 'Contruct');
        test.strictEqual(root.findChild(child.id), child, 'getChild(name) can be used to retrieve the child from a parent');
        test.throws(() => {
            root.findChild('NotFound');
        }, '', 'getChild(name) returns undefined if the child is not found');
        test.done();
    },
    'construct.toString() and construct.toTreeString() can be used for diagnostics'(test) {
        const t = createTree();
        test.equal(t.root.toString(), 'Root');
        test.equal(t.child1_1_1.toString(), 'Construct [Child1/Child11/Child111]');
        test.equal(t.child2.toString(), 'Construct [Child2]');
        test.equal(t.root.toTreeString(), 'Root\n  Construct [Child1]\n    Construct [Child11]\n      Construct [Child111]\n    Construct [Child12]\n  Construct [Child2]\n    Construct [Child21]\n');
        test.done();
    },
    'construct.getContext(key) can be used to read a value from context defined at the root level'(test) {
        const context = {
            ctx1: 12,
            ctx2: 'hello'
        };
        const t = createTree(context);
        test.equal(t.root.getContext('ctx1'), 12);
        test.equal(t.child1_1_1.getContext('ctx2'), 'hello');
        test.done();
    },
    'construct.setContext(k,v) sets context at some level and construct.getContext(key) will return the lowermost value defined in the stack'(test) {
        const root = new lib_1.Root();
        root.setContext('c1', 'root');
        root.setContext('c2', 'root');
        const child1 = new lib_1.Construct(root, 'child1');
        child1.setContext('c2', 'child1');
        child1.setContext('c3', 'child1');
        const child2 = new lib_1.Construct(root, 'child2');
        const child3 = new lib_1.Construct(child1, 'child1child1');
        child3.setContext('c1', 'child3');
        child3.setContext('c4', 'child3');
        test.equal(root.getContext('c1'), 'root');
        test.equal(root.getContext('c2'), 'root');
        test.equal(root.getContext('c3'), undefined);
        test.equal(child1.getContext('c1'), 'root');
        test.equal(child1.getContext('c2'), 'child1');
        test.equal(child1.getContext('c3'), 'child1');
        test.equal(child2.getContext('c1'), 'root');
        test.equal(child2.getContext('c2'), 'root');
        test.equal(child2.getContext('c3'), undefined);
        test.equal(child3.getContext('c1'), 'child3');
        test.equal(child3.getContext('c2'), 'child1');
        test.equal(child3.getContext('c3'), 'child1');
        test.equal(child3.getContext('c4'), 'child3');
        test.done();
    },
    'construct.setContext(key, value) can only be called before adding any children'(test) {
        const root = new lib_1.Root();
        new lib_1.Construct(root, 'child1');
        test.throws(() => root.setContext('k', 'v'));
        test.done();
    },
    'construct.pathParts returns an array of strings of all names from root to node'(test) {
        const tree = createTree();
        test.deepEqual(tree.root.path, '');
        test.deepEqual(tree.child1_1_1.path, 'Child1/Child11/Child111');
        test.deepEqual(tree.child2.path, 'Child2');
        test.done();
    },
    'if a root construct has a name, it should be included in the path'(test) {
        const tree = createTree({});
        test.deepEqual(tree.root.path, '');
        test.deepEqual(tree.child1_1_1.path, 'Child1/Child11/Child111');
        test.done();
    },
    'construct can not be created with the name of a sibling'(test) {
        const root = new lib_1.Root();
        // WHEN
        new lib_1.Construct(root, 'SameName');
        // THEN: They have different paths
        test.throws(() => {
            new lib_1.Construct(root, 'SameName');
        });
        test.done();
    },
    'addMetadata(type, data) can be used to attach metadata to constructs FIND_ME'(test) {
        const root = new lib_1.Root();
        const con = new lib_1.Construct(root, 'MyConstruct');
        test.deepEqual(con.metadata, [], 'starts empty');
        con.addMetadata('key', 'value');
        con.addMetadata('number', 103);
        con.addMetadata('array', [123, 456]);
        test.deepEqual(con.metadata[0].type, 'key');
        test.deepEqual(con.metadata[0].data, 'value');
        test.deepEqual(con.metadata[1].data, 103);
        test.deepEqual(con.metadata[2].data, [123, 456]);
        test.ok(con.metadata[0].trace[0].indexOf('FIND_ME') !== -1, 'First stack line should include this function\s name');
        test.done();
    },
    'addMetadata(type, undefined/null) is ignored'(test) {
        const root = new lib_1.Root();
        const con = new lib_1.Construct(root, 'Foo');
        con.addMetadata('Null', null);
        con.addMetadata('Undefined', undefined);
        con.addMetadata('True', true);
        con.addMetadata('False', false);
        con.addMetadata('Empty', '');
        const exists = (key) => con.metadata.find(x => x.type === key);
        test.ok(!exists('Null'));
        test.ok(!exists('Undefined'));
        test.ok(exists('True'));
        test.ok(exists('False'));
        test.ok(exists('Empty'));
        test.done();
    },
    'addWarning(message) can be used to add a "WARNING" message entry to the construct'(test) {
        const root = new lib_1.Root();
        const con = new lib_1.Construct(root, 'MyConstruct');
        con.addWarning('This construct is deprecated, use the other one instead');
        test.deepEqual(con.metadata[0].type, cxapi.WARNING_METADATA_KEY);
        test.deepEqual(con.metadata[0].data, 'This construct is deprecated, use the other one instead');
        test.ok(con.metadata[0].trace.length > 0);
        test.done();
    },
    'addError(message) can be used to add a "ERROR" message entry to the construct'(test) {
        const root = new lib_1.Root();
        const con = new lib_1.Construct(root, 'MyConstruct');
        con.addError('Stop!');
        test.deepEqual(con.metadata[0].type, cxapi.ERROR_METADATA_KEY);
        test.deepEqual(con.metadata[0].data, 'Stop!');
        test.ok(con.metadata[0].trace.length > 0);
        test.done();
    },
    'addInfo(message) can be used to add an "INFO" message entry to the construct'(test) {
        const root = new lib_1.Root();
        const con = new lib_1.Construct(root, 'MyConstruct');
        con.addInfo('Hey there, how do you do?');
        test.deepEqual(con.metadata[0].type, cxapi.INFO_METADATA_KEY);
        test.deepEqual(con.metadata[0].data, 'Hey there, how do you do?');
        test.ok(con.metadata[0].trace.length > 0);
        test.done();
    },
    'multiple children of the same type, with explicit names are welcome'(test) {
        const root = new lib_1.Root();
        new MyBeautifulConstruct(root, 'mbc1');
        new MyBeautifulConstruct(root, 'mbc2');
        new MyBeautifulConstruct(root, 'mbc3');
        new MyBeautifulConstruct(root, 'mbc4');
        test.equal(root.children.length, 4);
        test.done();
    },
    'construct.required(props, name) can be used to validate that required properties are defined'(test) {
        const root = new lib_1.Root();
        // should be ok
        const c = new ConstructWithRequired(root, 'Construct', { requiredProp: 123, anotherRequiredProp: true });
        test.equal(c.requiredProp, 123);
        test.equal(c.anotherRequiredProp, true);
        // should throw
        test.throws(() => new ConstructWithRequired(root, 'C', { optionalProp: 'hello' }));
        test.done();
    },
    'Construct name validation can be overridden'(test) {
        const root = new lib_1.Root();
        test.throws(() => new IAmSpartacusConstruct(root, "Caesar"));
        new IAmSpartacusConstruct(root, "Spartacus");
        test.done();
    },
    // tslint:disable-next-line:max-line-length
    'construct.validate() can be implemented to perform validation, construct.validateTree() will return all errors from the subtree (DFS)'(test) {
        class MyConstruct extends lib_1.Construct {
            validate() {
                return ['my-error1', 'my-error2'];
            }
        }
        class YourConstruct extends lib_1.Construct {
            validate() {
                return ['your-error1'];
            }
        }
        class TheirConstruct extends lib_1.Construct {
            constructor(parent, name) {
                super(parent, name);
                new YourConstruct(this, 'YourConstruct');
            }
            validate() {
                return ['their-error'];
            }
        }
        class Stack extends lib_1.Root {
            constructor() {
                super();
                new MyConstruct(this, 'MyConstruct');
                new TheirConstruct(this, 'TheirConstruct');
            }
            validate() {
                return ['stack-error'];
            }
        }
        const stack = new Stack();
        const errors = (stack.validateTree()).map(v => ({ path: v.source.path, message: v.message }));
        // validate DFS
        test.deepEqual(errors, [
            { path: 'MyConstruct', message: 'my-error1' },
            { path: 'MyConstruct', message: 'my-error2' },
            { path: 'TheirConstruct/YourConstruct', message: 'your-error1' },
            { path: 'TheirConstruct', message: 'their-error' },
            { path: '', message: 'stack-error' }
        ]);
        test.done();
    },
    'construct.lock() protects against adding children anywhere under this construct (direct or indirect)'(test) {
        class LockableConstruct extends lib_1.Construct {
            lockMe() {
                this.lock();
            }
            unlockMe() {
                this.unlock();
            }
        }
        const stack = new lib_1.Root();
        const c0a = new LockableConstruct(stack, 'c0a');
        const c0b = new lib_1.Construct(stack, 'c0b');
        const c1a = new lib_1.Construct(c0a, 'c1a');
        const c1b = new lib_1.Construct(c0a, 'c1b');
        c0a.lockMe();
        // now we should still be able to add children to c0b, but not to c0a or any its children
        new lib_1.Construct(c0b, 'c1a');
        test.throws(() => new lib_1.Construct(c0a, 'fail1'), /Cannot add children to "c0a" during synthesis/);
        test.throws(() => new lib_1.Construct(c1a, 'fail2'), /Cannot add children to "c0a\/c1a" during synthesis/);
        test.throws(() => new lib_1.Construct(c1b, 'fail3'), /Cannot add children to "c0a\/c1b" during synthesis/);
        c0a.unlockMe();
        new lib_1.Construct(c0a, 'c0aZ');
        new lib_1.Construct(c1a, 'c1aZ');
        new lib_1.Construct(c1b, 'c1bZ');
        test.done();
    }
};
//# sourceMappingURL=data:application/json;base64,