"use strict";
const util_1 = require("../../lib/core/util");
class SomeToken {
    constructor() {
        this.foo = 60;
        this.goo = 40;
    }
    resolve() {
        return this.foo + this.goo;
    }
}
module.exports = {
    'capitalizeResourceProperties capitalizes all keys of an object (recursively) from camelCase to PascalCase'(test) {
        test.equal(util_1.capitalizePropertyNames(undefined), undefined);
        test.equal(util_1.capitalizePropertyNames(12), 12);
        test.equal(util_1.capitalizePropertyNames('hello'), 'hello');
        test.deepEqual(util_1.capitalizePropertyNames(['hello', 88]), ['hello', 88]);
        test.deepEqual(util_1.capitalizePropertyNames({ Hello: 'world', hey: 'dude' }), { Hello: 'world', Hey: 'dude' });
        test.deepEqual(util_1.capitalizePropertyNames([1, 2, { three: 3 }]), [1, 2, { Three: 3 }]);
        test.deepEqual(util_1.capitalizePropertyNames({ Hello: 'world', recursive: { foo: 123, there: { another: ['hello', { world: 123 }] } } }), { Hello: 'world', Recursive: { Foo: 123, There: { Another: ['hello', { World: 123 }] } } });
        // make sure tokens are resolved and result is also capitalized
        test.deepEqual(util_1.capitalizePropertyNames({ hello: { resolve: () => ({ foo: 'bar' }) }, world: new SomeToken() }), { Hello: { Foo: 'bar' }, World: 100 });
        test.done();
    },
    'ignoreEmpty': {
        '[]'(test) {
            test.strictEqual(util_1.ignoreEmpty([]), undefined);
            test.done();
        },
        '{}'(test) {
            test.strictEqual(util_1.ignoreEmpty({}), undefined);
            test.done();
        },
        'undefined/null'(test) {
            test.strictEqual(util_1.ignoreEmpty(undefined), undefined);
            test.strictEqual(util_1.ignoreEmpty(null), null);
            test.done();
        },
        'primitives'(test) {
            test.strictEqual(util_1.ignoreEmpty(12), 12);
            test.strictEqual(util_1.ignoreEmpty("12"), "12");
            test.done();
        },
        'non-empty arrays/objects'(test) {
            test.deepEqual(util_1.ignoreEmpty([1, 2, 3, undefined]), [1, 2, 3]); // undefined array values is cleaned up by "resolve"
            test.deepEqual(util_1.ignoreEmpty({ o: 1, b: 2, j: 3 }), { o: 1, b: 2, j: 3 });
            test.done();
        },
        'resolve first'(test) {
            test.deepEqual(util_1.ignoreEmpty({ xoo: { resolve: () => 123 } }), { xoo: 123 });
            test.strictEqual(util_1.ignoreEmpty({ xoo: { resolve: () => undefined } }), undefined);
            test.deepEqual(util_1.ignoreEmpty({ xoo: { resolve: () => [] } }), { xoo: [] });
            test.deepEqual(util_1.ignoreEmpty({ xoo: { resolve: () => [undefined, undefined] } }), { xoo: [] });
            test.done();
        }
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC51dGlsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidGVzdC51dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSw4Q0FBMkU7QUFtRTNFLE1BQU0sU0FBUztJQUFmO1FBQ1MsUUFBRyxHQUFHLEVBQUUsQ0FBQztRQUNULFFBQUcsR0FBRyxFQUFFLENBQUM7SUFJbEIsQ0FBQztJQUhRLE9BQU87UUFDWixPQUFPLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQztJQUM3QixDQUFDO0NBQ0Y7QUF2RUQsaUJBQVM7SUFDUCwyR0FBMkcsQ0FBQyxJQUFVO1FBRXBILElBQUksQ0FBQyxLQUFLLENBQUMsOEJBQXVCLENBQUMsU0FBUyxDQUFDLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDMUQsSUFBSSxDQUFDLEtBQUssQ0FBQyw4QkFBdUIsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUM1QyxJQUFJLENBQUMsS0FBSyxDQUFDLDhCQUF1QixDQUFDLE9BQU8sQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3RELElBQUksQ0FBQyxTQUFTLENBQUMsOEJBQXVCLENBQUMsQ0FBRSxPQUFPLEVBQUUsRUFBRSxDQUFFLENBQUMsRUFBRSxDQUFFLE9BQU8sRUFBRSxFQUFFLENBQUUsQ0FBQyxDQUFDO1FBQzFFLElBQUksQ0FBQyxTQUFTLENBQUMsOEJBQXVCLENBQ3BDLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFDaEMsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO1FBQ25DLElBQUksQ0FBQyxTQUFTLENBQUMsOEJBQXVCLENBQ3BDLENBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQ3RCLENBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxF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Q0FBQyxFQUFFLEdBQUcsRUFBRSxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBQyxDQUFDLEVBQUUsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztZQUMxRSxJQUFJLENBQUMsV0FBVyxDQUFDLGtCQUFXLENBQUMsRUFBRSxHQUFHLEVBQUUsRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsU0FBUyxFQUFFLEVBQUMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1lBQy9FLElBQUksQ0FBQyxTQUFTLENBQUMsa0JBQVcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFHLEVBQUUsRUFBQyxDQUFDLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUN6RSxJQUFJLENBQUMsU0FBUyxDQUFDLGtCQUFXLENBQUMsRUFBRSxHQUFHLEVBQUUsRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBRSxTQUFTLEVBQUUsU0FBUyxDQUFFLEVBQUUsRUFBQyxDQUFDLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUM5RixJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDZCxDQUFDO0tBQ0Y7Q0FDRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGVzdCB9IGZyb20gJ25vZGV1bml0JztcbmltcG9ydCB7IGNhcGl0YWxpemVQcm9wZXJ0eU5hbWVzLCBpZ25vcmVFbXB0eSB9IGZyb20gJy4uLy4uL2xpYi9jb3JlL3V0aWwnO1xuXG5leHBvcnQgPSB7XG4gICdjYXBpdGFsaXplUmVzb3VyY2VQcm9wZXJ0aWVzIGNhcGl0YWxpemVzIGFsbCBrZXlzIG9mIGFuIG9iamVjdCAocmVjdXJzaXZlbHkpIGZyb20gY2FtZWxDYXNlIHRvIFBhc2NhbENhc2UnKHRlc3Q6IFRlc3QpIHtcblxuICAgIHRlc3QuZXF1YWwoY2FwaXRhbGl6ZVByb3BlcnR5TmFtZXModW5kZWZpbmVkKSwgdW5kZWZpbmVkKTtcbiAgICB0ZXN0LmVxdWFsKGNhcGl0YWxpemVQcm9wZXJ0eU5hbWVzKDEyKSwgMTIpO1xuICAgIHRlc3QuZXF1YWwoY2FwaXRhbGl6ZVByb3BlcnR5TmFtZXMoJ2hlbGxvJyksICdoZWxsbycpO1xuICAgIHRlc3QuZGVlcEVxdWFsKGNhcGl0YWxpemVQcm9wZXJ0eU5hbWVzKFsgJ2hlbGxvJywgODggXSksIFsgJ2hlbGxvJywgODggXSk7XG4gICAgdGVzdC5kZWVwRXF1YWwoY2FwaXRhbGl6ZVByb3BlcnR5TmFtZXMoXG4gICAgICB7IEhlbGxvOiAnd29ybGQnLCBoZXk6ICdkdWRlJyB9KSxcbiAgICAgIHsgSGVsbG86ICd3b3JsZCcsIEhleTogJ2R1ZGUnIH0pO1xuICAgIHRlc3QuZGVlcEVxdWFsKGNhcGl0YWxpemVQcm9wZXJ0eU5hbWVzKFxuICAgICAgWyAxLCAyLCB7IHRocmVlOiAzIH1dKSxcbiAgICAgIFsgMSwgMiwgeyBUaHJlZTogMyB9XSk7XG4gICAgdGVzdC5kZWVwRXF1YWwoY2FwaXRhbGl6ZVByb3BlcnR5TmFtZXMoXG4gICAgICB7IEhlbGxvOiAnd29ybGQnLCByZWN1cnNpdmU6IHsgZm9vOiAxMjMsIHRoZXJlOiB7IGFub3RoZXI6IFsgJ2hlbGxvJywgeyB3b3JsZDogMTIzIH0gXX0gfSB9KSxcbiAgICAgIHsgSGVsbG86ICd3b3JsZCcsIFJlY3Vyc2l2ZTogeyBGb286IDEyMywgVGhlcmU6IHsgQW5vdGhlcjogWyAnaGVsbG8nLCB7IFdvcmxkOiAxMjMgfSBdfSB9IH0pO1xuXG4gICAgLy8gbWFrZSBzdXJlIHRva2VucyBhcmUgcmVzb2x2ZWQgYW5kIHJlc3VsdCBpcyBhbHNvIGNhcGl0YWxpemVkXG4gICAgdGVzdC5kZWVwRXF1YWwoY2FwaXRhbGl6ZVByb3BlcnR5TmFtZXMoXG4gICAgICB7IGhlbGxvOiB7IHJlc29sdmU6ICgpID0+ICh7IGZvbzogJ2JhcicgfSkgfSwgd29ybGQ6IG5ldyBTb21lVG9rZW4oKSB9KSxcbiAgICAgIHsgSGVsbG86IHsgRm9vOiAnYmFyJyB9LCBXb3JsZDogMTAwIH0pO1xuXG4gICAgdGVzdC5kb25lKCk7XG4gIH0sXG5cbiAgJ2lnbm9yZUVtcHR5Jzoge1xuXG4gICAgJ1tdJyh0ZXN0OiBUZXN0KSB7XG4gICAgICB0ZXN0LnN0cmljdEVxdWFsKGlnbm9yZUVtcHR5KFtdKSwgdW5kZWZpbmVkKTtcbiAgICAgIHRlc3QuZG9uZSgpO1xuICAgIH0sXG5cbiAgICAne30nKHRlc3Q6IFRlc3QpIHtcbiAgICAgIHRlc3Quc3RyaWN0RXF1YWwoaWdub3JlRW1wdHkoe30pLCB1bmRlZmluZWQpO1xuICAgICAgdGVzdC5kb25lKCk7XG4gICAgfSxcblxuICAgICd1bmRlZmluZWQvbnVsbCcodGVzdDogVGVzdCkge1xuICAgICAgdGVzdC5zdHJpY3RFcXVhbChpZ25vcmVFbXB0eSh1bmRlZmluZWQpLCB1bmRlZmluZWQpO1xuICAgICAgdGVzdC5zdHJpY3RFcXVhbChpZ25vcmVFbXB0eShudWxsKSwgbnVsbCk7XG4gICAgICB0ZXN0LmRvbmUoKTtcbiAgICB9LFxuXG4gICAgJ3ByaW1pdGl2ZXMnKHRlc3Q6IFRlc3QpIHtcbiAgICAgIHRlc3Quc3RyaWN0RXF1YWwoaWdub3JlRW1wdHkoMTIpLCAxMik7XG4gICAgICB0ZXN0LnN0cmljdEVxdWFsKGlnbm9yZUVtcHR5KFwiMTJcIiksIFwiMTJcIik7XG4gICAgICB0ZXN0LmRvbmUoKTtcbiAgICB9LFxuXG4gICAgJ25vbi1lbXB0eSBhcnJheXMvb2JqZWN0cycodGVzdDogVGVzdCkge1xuICAgICAgdGVzdC5kZWVwRXF1YWwoaWdub3JlRW1wdHkoWyAxLCAyLCAzLCB1bmRlZmluZWQgXSksIFsgMSwgMiwgMyBdKTsgLy8gdW5kZWZpbmVkIGFycmF5IHZhbHVlcyBpcyBjbGVhbmVkIHVwIGJ5IFwicmVzb2x2ZVwiXG4gICAgICB0ZXN0LmRlZXBFcXVhbChpZ25vcmVFbXB0eSh7IG86IDEsIGI6IDIsIGo6IDMgfSksIHsgbzogMSwgYjogMiwgajogMyB9KTtcbiAgICAgIHRlc3QuZG9uZSgpO1xuICAgIH0sXG5cbiAgICAncmVzb2x2ZSBmaXJzdCcodGVzdDogVGVzdCkge1xuICAgICAgdGVzdC5kZWVwRXF1YWwoaWdub3JlRW1wdHkoeyB4b286IHsgcmVzb2x2ZTogKCkgPT4gMTIzIH19KSwgeyB4b286IDEyMyB9KTtcbiAgICAgIHRlc3Quc3RyaWN0RXF1YWwoaWdub3JlRW1wdHkoeyB4b286IHsgcmVzb2x2ZTogKCkgPT4gdW5kZWZpbmVkIH19KSwgdW5kZWZpbmVkKTtcbiAgICAgIHRlc3QuZGVlcEVxdWFsKGlnbm9yZUVtcHR5KHsgeG9vOiB7IHJlc29sdmU6ICgpID0+IFsgXSB9fSksIHsgeG9vOiBbXSB9KTtcbiAgICAgIHRlc3QuZGVlcEVxdWFsKGlnbm9yZUVtcHR5KHsgeG9vOiB7IHJlc29sdmU6ICgpID0+IFsgdW5kZWZpbmVkLCB1bmRlZmluZWQgXSB9fSksIHsgeG9vOiBbXSB9KTtcbiAgICAgIHRlc3QuZG9uZSgpO1xuICAgIH1cbiAgfVxufTtcblxuY2xhc3MgU29tZVRva2VuIHtcbiAgcHVibGljIGZvbyA9IDYwO1xuICBwdWJsaWMgZ29vID0gNDA7XG4gIHB1YmxpYyByZXNvbHZlKCkge1xuICAgIHJldHVybiB0aGlzLmZvbyArIHRoaXMuZ29vO1xuICB9XG59XG4iXX0=