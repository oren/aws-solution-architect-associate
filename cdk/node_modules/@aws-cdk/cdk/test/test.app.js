"use strict";
const cxapi = require("@aws-cdk/cx-api");
const fs = require("fs");
const os = require("os");
const path = require("path");
const lib_1 = require("../lib");
const app_1 = require("../lib/app");
function withApp(context, block) {
    const outdir = fs.mkdtempSync(path.join(os.tmpdir(), 'cdk-app-test'));
    process.env[cxapi.OUTDIR_ENV] = outdir;
    if (context) {
        process.env[cxapi.CONTEXT_ENV] = JSON.stringify(context);
    }
    else {
        delete process.env[cxapi.CONTEXT_ENV];
    }
    const app = new app_1.App();
    block(app);
    app.run();
    const outfile = path.join(outdir, cxapi.OUTFILE_NAME);
    const response = JSON.parse(fs.readFileSync(outfile).toString());
    fs.unlinkSync(outfile);
    fs.rmdirSync(outdir);
    return response;
}
function synth(context) {
    return withApp(context, app => {
        const stack1 = new lib_1.Stack(app, 'stack1', { env: { account: '12345', region: 'us-east-1' } });
        new lib_1.Resource(stack1, 's1c1', { type: 'DummyResource', properties: { Prop1: 'Prop1' } });
        const r2 = new lib_1.Resource(stack1, 's1c2', { type: 'DummyResource', properties: { Foo: 123 } });
        const stack2 = new lib_1.Stack(app, 'stack2');
        new lib_1.Resource(stack2, 's2c1', { type: 'DummyResource', properties: { Prog2: 'Prog2' } });
        const c1 = new MyConstruct(stack2, 's1c2');
        // add some metadata
        stack1.addMetadata('meta', 111);
        r2.addWarning('warning1');
        r2.addWarning('warning2');
        c1.addMetadata('meta', { key: 'value' });
        app.addMetadata('applevel', 123); // apps can also have metadata
    });
}
function synthStack(name, includeMetadata = false, context) {
    const response = synth(context);
    const stack = response.stacks.find(s => s.name === name);
    if (!stack) {
        throw new Error(`Stack ${name} not found`);
    }
    if (!includeMetadata) {
        delete stack.metadata;
    }
    return stack;
}
class MyConstruct extends lib_1.Construct {
    constructor(parent, name) {
        super(parent, name);
        new lib_1.Resource(this, 'r1', { type: 'ResourceType1' });
        new lib_1.Resource(this, 'r2', { type: 'ResourceType2', properties: { FromContext: this.getContext('ctx1') } });
    }
}
/**
 * Strip stack traces from metadata
 */
function stripStackTraces(meta) {
    for (const key of Object.keys(meta)) {
        meta[key] = meta[key].filter(entry => entry.type !== 'aws:cdk:logicalId');
    }
}
module.exports = {
    'synthesizes all stacks and returns synthesis result'(test) {
        const response = synth();
        // clean up metadata so assertion will be sane
        response.stacks.forEach(s => delete s.metadata);
        delete response.runtime;
        test.deepEqual(response, {
            version: '0.14.0',
            stacks: [{ name: 'stack1',
                    environment: { name: '12345/us-east-1',
                        account: '12345',
                        region: 'us-east-1' },
                    template: { Resources: { s1c1: { Type: 'DummyResource', Properties: { Prop1: 'Prop1' } },
                            s1c2: { Type: 'DummyResource', Properties: { Foo: 123 } } } } },
                { name: 'stack2',
                    environment: { name: 'unknown-account/unknown-region',
                        account: 'unknown-account',
                        region: 'unknown-region' },
                    template: { Resources: { s2c1: { Type: 'DummyResource', Properties: { Prog2: 'Prog2' } },
                            s1c2r1D1791C01: { Type: 'ResourceType1' },
                            s1c2r25F685FFF: { Type: 'ResourceType2' } } } }]
        });
        test.done();
    },
    'synth(name) can be used programmatically'(test) {
        const prog = new app_1.App();
        const stack = new lib_1.Stack(prog, 'MyStack');
        new lib_1.Resource(stack, 'MyResource', { type: 'MyResourceType' });
        let throws;
        try {
            prog.synthesizeStacks(['foo']);
        }
        catch (e) {
            throws = e.message;
        }
        test.ok(throws.indexOf('Cannot find stack foo') !== -1);
        test.deepEqual(prog.synthesizeStack('MyStack').template, { Resources: { MyResource: { Type: 'MyResourceType' } } });
        test.done();
    },
    'synth(name) also collects metadata from all constructs in the stack'(test) {
        const stack = synthStack('stack1', true);
        const output = stack.metadata;
        stripStackTraces(output);
        test.ok(output['/'], 'app-level metadata is included under "."');
        test.equal(output['/'][0].type, 'applevel');
        test.equal(output['/'][0].data, 123);
        test.ok(output['/stack1'], 'the construct "stack1" has metadata');
        test.equal(output['/stack1'][0].type, 'meta');
        test.equal(output['/stack1'][0].data, 111);
        test.ok(output['/stack1'][0].trace.length > 0, 'trace contains multiple entries');
        test.ok(output['/stack1/s1c2']);
        test.equal(output['/stack1/s1c2'].length, 2, 'two entries');
        test.equal(output['/stack1/s1c2'][0].data, 'warning1');
        const stack2 = synthStack('stack2', true);
        const output2 = stack2.metadata;
        test.ok(output2['/stack2/s1c2']);
        test.equal(output2['/stack2/s1c2'][0].type, 'meta');
        test.deepEqual(output2['/stack2/s1c2'][0].data, { key: 'value' });
        test.done();
    },
    'context can be passed through CDK_CONTEXT'(test) {
        process.env[cxapi.CONTEXT_ENV] = JSON.stringify({
            key1: 'val1',
            key2: 'val2'
        });
        const prog = new app_1.App();
        test.deepEqual(prog.getContext('key1'), 'val1');
        test.deepEqual(prog.getContext('key2'), 'val2');
        test.done();
    },
    'context from the command line can be used when creating the stack'(test) {
        const output = synthStack('stack2', false, { ctx1: 'HELLO' });
        test.deepEqual(output.template, {
            Resources: {
                s2c1: {
                    Type: "DummyResource",
                    Properties: {
                        Prog2: "Prog2"
                    }
                },
                s1c2r1D1791C01: {
                    Type: "ResourceType1"
                },
                s1c2r25F685FFF: {
                    Type: "ResourceType2",
                    Properties: {
                        FromContext: "HELLO"
                    }
                }
            }
        });
        test.done();
    },
    'setContext(k,v) can be used to set context programmatically'(test) {
        const prog = new app_1.App();
        prog.setContext('foo', 'bar');
        test.deepEqual(prog.getContext('foo'), 'bar');
        test.done();
    },
    'setContext(k,v) cannot be called after stacks have been added because stacks may use the context'(test) {
        const prog = new app_1.App();
        new lib_1.Stack(prog, 's1');
        test.throws(() => prog.setContext('foo', 'bar'));
        test.done();
    },
    'app.synthesizeStack(stack) performs validation first (app.validateAll()) and if there are errors, it returns the errors'(test) {
        class Child extends lib_1.Construct {
            validate() {
                return [`Error from ${this.id}`];
            }
        }
        class Parent extends lib_1.Stack {
        }
        const app = new app_1.App();
        const parent = new Parent(app, 'Parent');
        new Child(parent, 'C1');
        new Child(parent, 'C2');
        test.throws(() => {
            app.synthesizeStacks(['Parent']);
        }, /Stack validation failed with the following errors/);
        test.done();
    },
    'app.synthesizeStack(stack) will return a list of missing contextual information'(test) {
        class MyStack extends lib_1.Stack {
            constructor(parent, name, props) {
                super(parent, name, props);
                this.reportMissingContext('missing-context-key', {
                    provider: 'fake',
                    props: {
                        account: '12345689012',
                        region: 'ab-north-1',
                    },
                });
                this.reportMissingContext('missing-context-key-2', {
                    provider: 'fake2',
                    props: {
                        foo: 'bar',
                        account: '12345689012',
                        region: 'ab-south-1',
                    },
                });
            }
        }
        const response = withApp(undefined, app => {
            new MyStack(app, 'MyStack');
        });
        test.deepEqual(response.stacks[0].missing, {
            "missing-context-key": {
                provider: 'fake',
                props: {
                    account: '12345689012',
                    region: 'ab-north-1',
                },
            },
            "missing-context-key-2": {
                provider: 'fake2',
                props: {
                    account: '12345689012',
                    region: 'ab-south-1',
                    foo: 'bar',
                },
            },
        });
        test.done();
    },
};
//# sourceMappingURL=data:application/json;base64,