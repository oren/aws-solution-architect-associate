"use strict";
const lib_1 = require("../../lib");
class Counter extends lib_1.Resource {
    constructor(parent, name, props) {
        super(parent, name, { type: 'My::Counter', properties: { Count: props.Count } });
        this.arn = this.getAtt('Arn').toString();
        this.url = this.getAtt('URL').toString();
    }
    increment(by = 1) {
        this.properties.Count += by;
    }
}
function withoutHash(logId) {
    return logId.substr(0, logId.length - 8);
}
class CustomizableResource extends lib_1.Resource {
    constructor(parent, id, props) {
        super(parent, id, { type: 'MyResourceType', properties: props });
    }
    setProperty(key, value) {
        this.untypedPropertyOverrides[key] = value;
    }
    renderProperties(properties) {
        return {
            PROP1: properties.prop1,
            PROP2: properties.prop2,
            PROP3: properties.prop3
        };
    }
}
module.exports = {
    'all resources derive from Resource, which derives from Entity'(test) {
        const stack = new lib_1.Stack();
        new lib_1.Resource(stack, 'MyResource', {
            type: 'MyResourceType',
            properties: {
                Prop1: 'p1', Prop2: 123
            }
        });
        test.deepEqual(stack.toCloudFormation(), {
            Resources: {
                MyResource: {
                    Type: "MyResourceType",
                    Properties: {
                        Prop1: "p1",
                        Prop2: 123
                    }
                }
            }
        });
        test.done();
    },
    'resources must reside within a Stack and fail upon creation if not'(test) {
        const root = new lib_1.Root();
        test.throws(() => new lib_1.Resource(root, 'R1', { type: 'ResourceType' }));
        test.done();
    },
    'all entities have a logical ID calculated based on their full path in the tree'(test) {
        const stack = new lib_1.Stack(undefined, 'TestStack', { namingScheme: new lib_1.HashedAddressingScheme() });
        const level1 = new lib_1.Construct(stack, 'level1');
        const level2 = new lib_1.Construct(level1, 'level2');
        const level3 = new lib_1.Construct(level2, 'level3');
        const res1 = new lib_1.Resource(level1, 'childoflevel1', { type: 'MyResourceType1' });
        const res2 = new lib_1.Resource(level3, 'childoflevel3', { type: 'MyResourceType2' });
        test.equal(withoutHash(res1.logicalId), 'level1childoflevel1');
        test.equal(withoutHash(res2.logicalId), 'level1level2level3childoflevel3');
        test.done();
    },
    'resource.props can only be accessed by derived classes'(test) {
        const stack = new lib_1.Stack();
        const res = new Counter(stack, 'MyResource', { Count: 10 });
        res.increment();
        res.increment(2);
        test.deepEqual(stack.toCloudFormation(), {
            Resources: {
                MyResource: { Type: 'My::Counter', Properties: { Count: 13 } }
            }
        });
        test.done();
    },
    'resource attributes can be retrieved using getAtt(s) or attribute properties'(test) {
        const stack = new lib_1.Stack();
        const res = new Counter(stack, 'MyResource', { Count: 10 });
        new lib_1.Resource(stack, 'YourResource', {
            type: 'Type',
            properties: {
                CounterName: res.getAtt('Name'),
                CounterArn: res.arn,
                CounterURL: res.url,
            }
        });
        test.deepEqual(stack.toCloudFormation(), {
            Resources: {
                MyResource: { Type: 'My::Counter', Properties: { Count: 10 } },
                YourResource: {
                    Type: 'Type',
                    Properties: {
                        CounterName: { 'Fn::GetAtt': ['MyResource', 'Name'] },
                        CounterArn: { 'Fn::GetAtt': ['MyResource', 'Arn'] },
                        CounterURL: { 'Fn::GetAtt': ['MyResource', 'URL'] }
                    }
                }
            }
        });
        test.done();
    },
    'ARN-type resource attributes have some common functionality'(test) {
        const stack = new lib_1.Stack();
        const res = new Counter(stack, 'MyResource', { Count: 1 });
        new lib_1.Resource(stack, 'MyResource2', {
            type: 'Type',
            properties: {
                Perm: res.arn
            }
        });
        test.deepEqual(stack.toCloudFormation(), {
            Resources: {
                MyResource: { Type: "My::Counter", Properties: { Count: 1 } },
                MyResource2: {
                    Type: "Type",
                    Properties: {
                        Perm: {
                            "Fn::GetAtt": ["MyResource", "Arn"]
                        }
                    }
                }
            }
        });
        test.done();
    },
    'resource.addDependency(e) can be used to add a DependsOn on another resource'(test) {
        const stack = new lib_1.Stack();
        const r1 = new Counter(stack, 'Counter1', { Count: 1 });
        const r2 = new Counter(stack, 'Counter2', { Count: 1 });
        const r3 = new lib_1.Resource(stack, 'Resource3', { type: 'MyResourceType' });
        r2.addDependency(r1);
        r2.addDependency(r3);
        test.deepEqual(stack.toCloudFormation(), {
            Resources: {
                Counter1: {
                    Type: "My::Counter",
                    Properties: { Count: 1 }
                },
                Counter2: {
                    Type: "My::Counter",
                    Properties: { Count: 1 },
                    DependsOn: [
                        "Counter1",
                        "Resource3"
                    ]
                },
                Resource3: { Type: "MyResourceType" }
            }
        });
        test.done();
    },
    'conditions can be attached to a resource'(test) {
        const stack = new lib_1.Stack();
        const r1 = new lib_1.Resource(stack, 'Resource', { type: 'Type' });
        const cond = new lib_1.Condition(stack, 'MyCondition', { expression: new lib_1.FnNot(new lib_1.FnEquals('a', 'b')) });
        r1.options.condition = cond;
        test.deepEqual(stack.toCloudFormation(), {
            Resources: { Resource: { Type: 'Type', Condition: 'MyCondition' } },
            Conditions: { MyCondition: { 'Fn::Not': [{ 'Fn::Equals': ['a', 'b'] }] } }
        });
        test.done();
    },
    'creation/update/deletion policies can be set on a resource'(test) {
        const stack = new lib_1.Stack();
        const r1 = new lib_1.Resource(stack, 'Resource', { type: 'Type' });
        r1.options.creationPolicy = { autoScalingCreationPolicy: { minSuccessfulInstancesPercent: 10 } };
        // tslint:disable-next-line:max-line-length
        r1.options.updatePolicy = { autoScalingScheduledAction: { ignoreUnmodifiedGroupSizeProperties: false }, autoScalingReplacingUpdate: { willReplace: true } };
        r1.options.deletionPolicy = lib_1.DeletionPolicy.Retain;
        test.deepEqual(stack.toCloudFormation(), {
            Resources: {
                Resource: {
                    Type: 'Type',
                    CreationPolicy: { AutoScalingCreationPolicy: { MinSuccessfulInstancesPercent: 10 } },
                    UpdatePolicy: {
                        AutoScalingScheduledAction: { IgnoreUnmodifiedGroupSizeProperties: false },
                        AutoScalingReplacingUpdate: { WillReplace: true },
                    },
                    DeletionPolicy: 'Retain'
                }
            }
        });
        test.done();
    },
    'update policies UseOnlineResharding flag'(test) {
        const stack = new lib_1.Stack();
        const r1 = new lib_1.Resource(stack, 'Resource', { type: 'Type' });
        r1.options.updatePolicy = { useOnlineResharding: true };
        test.deepEqual(stack.toCloudFormation(), {
            Resources: {
                Resource: {
                    Type: 'Type',
                    UpdatePolicy: {
                        UseOnlineResharding: true,
                    },
                }
            }
        });
        test.done();
    },
    'metadata can be set on a resource'(test) {
        const stack = new lib_1.Stack();
        const r1 = new lib_1.Resource(stack, 'Resource', { type: 'Type' });
        r1.options.metadata = {
            MyKey: 10,
            MyValue: 99
        };
        test.deepEqual(stack.toCloudFormation(), {
            Resources: {
                Resource: {
                    Type: "Type",
                    Metadata: {
                        MyKey: 10,
                        MyValue: 99
                    }
                }
            }
        });
        test.done();
    },
    'the "type" property is required when creating a resource'(test) {
        const stack = new lib_1.Stack();
        test.throws(() => new lib_1.Resource(stack, 'Resource', { notypehere: true }));
        test.done();
    },
    'removal policy is a high level abstraction of deletion policy used by l2'(test) {
        const stack = new lib_1.Stack();
        const orphan = new lib_1.Resource(stack, 'Orphan', { type: 'T1' });
        const forbid = new lib_1.Resource(stack, 'Forbid', { type: 'T2' });
        const destroy = new lib_1.Resource(stack, 'Destroy', { type: 'T3' });
        lib_1.applyRemovalPolicy(orphan, lib_1.RemovalPolicy.Orphan);
        lib_1.applyRemovalPolicy(forbid, lib_1.RemovalPolicy.Forbid);
        lib_1.applyRemovalPolicy(destroy, lib_1.RemovalPolicy.Destroy);
        test.deepEqual(stack.toCloudFormation(), { Resources: { Orphan: { Type: 'T1', DeletionPolicy: 'Retain' },
                Forbid: { Type: 'T2', DeletionPolicy: 'Retain' },
                Destroy: { Type: 'T3' } } });
        test.done();
    },
    'addDependency adds all dependencyElements of dependent constructs'(test) {
        class C1 extends lib_1.Construct {
            constructor(parent, name) {
                super(parent, name);
                this.r1 = new lib_1.Resource(this, 'R1', { type: 'T1' });
                this.r2 = new lib_1.Resource(this, 'R2', { type: 'T2' });
                this.r3 = new lib_1.Resource(this, 'R3', { type: 'T3' });
            }
            get dependencyElements() {
                return [this.r1, this.r2];
            }
        }
        class C2 extends lib_1.Construct {
            constructor(parent, name) {
                super(parent, name);
                this.r1 = new lib_1.Resource(this, 'R1', { type: 'T1' });
                this.r2 = new lib_1.Resource(this, 'R2', { type: 'T2' });
                this.r3 = new lib_1.Resource(this, 'R3', { type: 'T3' });
            }
            get dependencyElements() {
                return [this.r3];
            }
        }
        // C3 returns [ c2 ] for it's dependency elements
        // this should result in 'flattening' the list of elements.
        class C3 extends lib_1.Construct {
            constructor(parent, name) {
                super(parent, name);
                this.c2 = new C2(this, 'C2');
            }
            get dependencyElements() {
                return [this.c2];
            }
        }
        const stack = new lib_1.Stack();
        const c1 = new C1(stack, 'MyC1');
        const c2 = new C2(stack, 'MyC2');
        const c3 = new C3(stack, 'MyC3');
        const dependingResource = new lib_1.Resource(stack, 'MyResource', { type: 'R' });
        dependingResource.addDependency(c1, c2);
        dependingResource.addDependency(c3);
        test.deepEqual(stack.toCloudFormation(), { Resources: { MyC1R1FB2A562F: { Type: 'T1' },
                MyC1R2AE2B5066: { Type: 'T2' },
                MyC1R374967D02: { Type: 'T3' },
                MyC2R13C9A618D: { Type: 'T1' },
                MyC2R25330F905: { Type: 'T2' },
                MyC2R3809EEAD6: { Type: 'T3' },
                MyC3C2R1C64551A7: { Type: 'T1' },
                MyC3C2R2F213BD26: { Type: 'T2' },
                MyC3C2R38CE6F9F7: { Type: 'T3' },
                MyResource: { Type: 'R',
                    DependsOn: ['MyC1R1FB2A562F',
                        'MyC1R2AE2B5066',
                        'MyC2R3809EEAD6',
                        'MyC3C2R38CE6F9F7'] } } });
        test.done();
    },
    'resource.ref returns the {Ref} token'(test) {
        const stack = new lib_1.Stack();
        const r = new lib_1.Resource(stack, 'MyResource', { type: 'R' });
        test.deepEqual(lib_1.resolve(r.ref), { Ref: 'MyResource' });
        test.done();
    },
    'overrides': {
        'addOverride(p, v) allows assigning arbitrary values to synthesized resource definitions'(test) {
            // GIVEN
            const stack = new lib_1.Stack();
            const r = new lib_1.Resource(stack, 'MyResource', { type: 'AWS::Resource::Type' });
            // WHEN
            r.addOverride('Type', 'YouCanEvenOverrideTheType');
            r.addOverride('Metadata', { Key: 12 });
            r.addOverride('Use.Dot.Notation', 'To create subtrees');
            // THEN
            test.deepEqual(stack.toCloudFormation(), { Resources: { MyResource: { Type: 'YouCanEvenOverrideTheType',
                        Use: { Dot: { Notation: 'To create subtrees' } },
                        Metadata: { Key: 12 } } } });
            test.done();
        },
        'addOverride(p, null) will assign an "null" value'(test) {
            // GIVEN
            const stack = new lib_1.Stack();
            const r = new lib_1.Resource(stack, 'MyResource', {
                type: 'AWS::Resource::Type',
                properties: {
                    Hello: {
                        World: {
                            Value1: 'Hello',
                            Value2: 129,
                        }
                    }
                }
            });
            // WHEN
            r.addOverride('Properties.Hello.World.Value2', null);
            // THEN
            test.deepEqual(stack.toCloudFormation(), { Resources: { MyResource: { Type: 'AWS::Resource::Type',
                        Properties: { Hello: { World: { Value1: 'Hello', Value2: null } } } } } });
            test.done();
        },
        'addOverride(p, undefined) can be used to delete a value'(test) {
            // GIVEN
            const stack = new lib_1.Stack();
            const r = new lib_1.Resource(stack, 'MyResource', {
                type: 'AWS::Resource::Type',
                properties: {
                    Hello: {
                        World: {
                            Value1: 'Hello',
                            Value2: 129,
                        }
                    }
                }
            });
            // WHEN
            r.addOverride('Properties.Hello.World.Value2', undefined);
            // THEN
            test.deepEqual(stack.toCloudFormation(), { Resources: { MyResource: { Type: 'AWS::Resource::Type',
                        Properties: { Hello: { World: { Value1: 'Hello' } } } } } });
            test.done();
        },
        'addOverride(p, undefined) will not create empty trees'(test) {
            // GIVEN
            const stack = new lib_1.Stack();
            const r = new lib_1.Resource(stack, 'MyResource', { type: 'AWS::Resource::Type' });
            // WHEN
            r.addPropertyOverride('Tree.Exists', 42);
            r.addPropertyOverride('Tree.Does.Not.Exist', undefined);
            // THEN
            test.deepEqual(stack.toCloudFormation(), { Resources: { MyResource: { Type: 'AWS::Resource::Type',
                        Properties: { Tree: { Exists: 42 } } } } });
            test.done();
        },
        'addDeletionOverride(p) and addPropertyDeletionOverride(pp) are sugar `undefined`'(test) {
            // GIVEN
            const stack = new lib_1.Stack();
            const r = new lib_1.Resource(stack, 'MyResource', {
                type: 'AWS::Resource::Type',
                properties: {
                    Hello: {
                        World: {
                            Value1: 'Hello',
                            Value2: 129,
                            Value3: ['foo', 'bar']
                        }
                    }
                }
            });
            // WHEN
            r.addDeletionOverride('Properties.Hello.World.Value2');
            r.addPropertyDeletionOverride('Hello.World.Value3');
            // THEN
            test.deepEqual(stack.toCloudFormation(), { Resources: { MyResource: { Type: 'AWS::Resource::Type',
                        Properties: { Hello: { World: { Value1: 'Hello' } } } } } });
            test.done();
        },
        'addOverride(p, v) will overwrite any non-objects along the path'(test) {
            // GIVEN
            const stack = new lib_1.Stack();
            const r = new lib_1.Resource(stack, 'MyResource', {
                type: 'AWS::Resource::Type',
                properties: {
                    Hello: {
                        World: 42
                    }
                }
            });
            // WHEN
            r.addOverride('Properties.Override1', ['Hello', 123]);
            r.addOverride('Properties.Override1.Override2', { Heyy: [1] });
            r.addOverride('Properties.Hello.World.Foo.Bar', 42);
            // THEN
            test.deepEqual(stack.toCloudFormation(), { Resources: { MyResource: { Type: 'AWS::Resource::Type',
                        Properties: { Hello: { World: { Foo: { Bar: 42 } } },
                            Override1: {
                                Override2: { Heyy: [1] }
                            } } } } });
            test.done();
        },
        'addPropertyOverride(pp, v) is a sugar for overriding properties'(test) {
            // GIVEN
            const stack = new lib_1.Stack();
            const r = new lib_1.Resource(stack, 'MyResource', {
                type: 'AWS::Resource::Type',
                properties: { Hello: { World: 42 } }
            });
            // WHEN
            r.addPropertyOverride('Hello.World', { Hey: 'Jude' });
            // THEN
            test.deepEqual(stack.toCloudFormation(), { Resources: { MyResource: { Type: 'AWS::Resource::Type',
                        Properties: { Hello: { World: { Hey: 'Jude' } } } } } });
            test.done();
        },
        'untypedPropertyOverrides': {
            'can be used by derived classes to specify overrides before render()'(test) {
                const stack = new lib_1.Stack();
                const r = new CustomizableResource(stack, 'MyResource', {
                    prop1: 'foo'
                });
                r.setProperty('prop2', 'bar');
                test.deepEqual(stack.toCloudFormation(), { Resources: { MyResource: { Type: 'MyResourceType',
                            Properties: { PROP1: 'foo', PROP2: 'bar' } } } });
                test.done();
            },
            '"properties" is undefined'(test) {
                const stack = new lib_1.Stack();
                const r = new CustomizableResource(stack, 'MyResource');
                r.setProperty('prop3', 'zoo');
                test.deepEqual(stack.toCloudFormation(), { Resources: { MyResource: { Type: 'MyResourceType',
                            Properties: { PROP3: 'zoo' } } } });
                test.done();
            },
            '"properties" is empty'(test) {
                const stack = new lib_1.Stack();
                const r = new CustomizableResource(stack, 'MyResource', {});
                r.setProperty('prop3', 'zoo');
                r.setProperty('prop2', 'hey');
                test.deepEqual(stack.toCloudFormation(), { Resources: { MyResource: { Type: 'MyResourceType',
                            Properties: { PROP2: 'hey', PROP3: 'zoo' } } } });
                test.done();
            }
        }
    }
};
//# sourceMappingURL=data:application/json;base64,