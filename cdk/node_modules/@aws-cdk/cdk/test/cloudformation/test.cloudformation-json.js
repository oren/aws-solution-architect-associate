"use strict";
const lib_1 = require("../../lib");
const evaluate_cfn_1 = require("./evaluate-cfn");
/**
 * Return two Tokens, one of which evaluates to a Token directly, one which evaluates to it lazily
 */
function tokensThatResolveTo(value) {
    return [
        new lib_1.Token(value),
        new lib_1.Token(() => value)
    ];
}
module.exports = {
    'plain JSON.stringify() on a Token fails'(test) {
        // GIVEN
        const token = new lib_1.Token(() => 'value');
        // WHEN
        test.throws(() => {
            JSON.stringify({ token });
        });
        test.done();
    },
    'string tokens can be JSONified and JSONification can be reversed'(test) {
        for (const token of tokensThatResolveTo('woof woof')) {
            // GIVEN
            const fido = { name: 'Fido', speaks: token };
            // WHEN
            const resolved = lib_1.resolve(lib_1.CloudFormationJSON.stringify(fido));
            // THEN
            test.deepEqual(evaluate_cfn_1.evaluateCFN(resolved), '{"name":"Fido","speaks":"woof woof"}');
        }
        test.done();
    },
    'string tokens can be embedded while being JSONified'(test) {
        for (const token of tokensThatResolveTo('woof woof')) {
            // GIVEN
            const fido = { name: 'Fido', speaks: `deep ${token}` };
            // WHEN
            const resolved = lib_1.resolve(lib_1.CloudFormationJSON.stringify(fido));
            // THEN
            test.deepEqual(evaluate_cfn_1.evaluateCFN(resolved), '{"name":"Fido","speaks":"deep woof woof"}');
        }
        test.done();
    },
    'integer Tokens behave correctly in stringification and JSONification'(test) {
        // GIVEN
        const num = new lib_1.Token(() => 1);
        const embedded = `the number is ${num}`;
        // WHEN
        test.equal(evaluate_cfn_1.evaluateCFN(lib_1.resolve(embedded)), "the number is 1");
        test.equal(evaluate_cfn_1.evaluateCFN(lib_1.resolve(lib_1.CloudFormationJSON.stringify({ embedded }))), "{\"embedded\":\"the number is 1\"}");
        test.equal(evaluate_cfn_1.evaluateCFN(lib_1.resolve(lib_1.CloudFormationJSON.stringify({ num }))), "{\"num\":1}");
        test.done();
    },
    'tokens in strings survive additional TokenJSON.stringification()'(test) {
        // GIVEN
        for (const token of tokensThatResolveTo('pong!')) {
            // WHEN
            const stringified = lib_1.CloudFormationJSON.stringify(`ping? ${token}`);
            // THEN
            test.equal(evaluate_cfn_1.evaluateCFN(lib_1.resolve(stringified)), '"ping? pong!"');
        }
        test.done();
    },
    'intrinsic Tokens embed correctly in JSONification'(test) {
        // GIVEN
        const bucketName = new lib_1.CloudFormationToken({ Ref: 'MyBucket' });
        // WHEN
        const resolved = lib_1.resolve(lib_1.CloudFormationJSON.stringify({ theBucket: bucketName }));
        // THEN
        const context = { MyBucket: 'TheName' };
        test.equal(evaluate_cfn_1.evaluateCFN(resolved, context), '{"theBucket":"TheName"}');
        test.done();
    },
    'embedded string literals in intrinsics are escaped when calling TokenJSON.stringify()'(test) {
        // WHEN
        const token = new lib_1.FnConcat('Hello', 'This\nIs', 'Very "cool"');
        // WHEN
        const resolved = lib_1.resolve(lib_1.CloudFormationJSON.stringify({
            literal: 'I can also "contain" quotes',
            token
        }));
        // THEN
        const expected = '{"literal":"I can also \\"contain\\" quotes","token":"HelloThis\\nIsVery \\"cool\\""}';
        test.equal(evaluate_cfn_1.evaluateCFN(resolved), expected);
        test.done();
    },
    'Tokens in Tokens are handled correctly'(test) {
        // GIVEN
        const bucketName = new lib_1.CloudFormationToken({ Ref: 'MyBucket' });
        const combinedName = new lib_1.FnConcat('The bucket name is ', bucketName);
        // WHEN
        const resolved = lib_1.resolve(lib_1.CloudFormationJSON.stringify({ theBucket: combinedName }));
        // THEN
        const context = { MyBucket: 'TheName' };
        test.equal(evaluate_cfn_1.evaluateCFN(resolved, context), '{"theBucket":"The bucket name is TheName"}');
        test.done();
    },
    'Doubly nested strings evaluate correctly in JSON context'(test) {
        // WHEN
        const fidoSays = new lib_1.Token(() => 'woof');
        // WHEN
        const resolved = lib_1.resolve(lib_1.CloudFormationJSON.stringify({
            information: `Did you know that Fido says: ${fidoSays}`
        }));
        // THEN
        test.deepEqual(evaluate_cfn_1.evaluateCFN(resolved), '{"information":"Did you know that Fido says: woof"}');
        test.done();
    },
    'Doubly nested intrinsics evaluate correctly in JSON context'(test) {
        // WHEN
        const fidoSays = new lib_1.CloudFormationToken(() => ({ Ref: 'Something' }));
        // WHEN
        const resolved = lib_1.resolve(lib_1.CloudFormationJSON.stringify({
            information: `Did you know that Fido says: ${fidoSays}`
        }));
        // THEN
        const context = { Something: 'woof woof' };
        test.deepEqual(evaluate_cfn_1.evaluateCFN(resolved, context), '{"information":"Did you know that Fido says: woof woof"}');
        test.done();
    },
    'Quoted strings in embedded JSON context are escaped'(test) {
        // WHEN
        const fidoSays = new lib_1.Token(() => '"woof"');
        // WHEN
        const resolved = lib_1.resolve(lib_1.CloudFormationJSON.stringify({
            information: `Did you know that Fido says: ${fidoSays}`
        }));
        // THEN
        test.deepEqual(evaluate_cfn_1.evaluateCFN(resolved), '{"information":"Did you know that Fido says: \\"woof\\""}');
        test.done();
    },
};
//# sourceMappingURL=data:application/json;base64,