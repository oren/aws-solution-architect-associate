"use strict";
const lib_1 = require("../../lib");
module.exports = {
    'outputs can be added to the stack'(test) {
        const stack = new lib_1.Stack();
        const res = new lib_1.Resource(stack, 'MyResource', { type: 'R' });
        const ref = new lib_1.Ref(res);
        new lib_1.Output(stack, 'MyOutput', {
            export: 'ExportName',
            value: ref,
            description: 'Output properties'
        });
        test.deepEqual(stack.toCloudFormation(), { Resources: { MyResource: { Type: 'R' } },
            Outputs: { MyOutput: { Description: 'Output properties',
                    Export: { Name: 'ExportName' },
                    Value: { Ref: 'MyResource' } } } });
        test.done();
    },
    'outputs cannot be referenced'(test) {
        const stack = new lib_1.Stack();
        const output = new lib_1.Output(stack, 'MyOutput', { description: 'My Output' });
        test.throws(() => output.ref);
        test.done();
    },
    'outputs have a default unique export name'(test) {
        const stack = new lib_1.Stack(undefined, 'MyStack');
        const output = new lib_1.Output(stack, 'MyOutput');
        const child = new lib_1.Construct(stack, 'MyConstruct');
        const output2 = new lib_1.Output(child, 'MyOutput2');
        test.equal(output.export, 'MyStack:MyOutput');
        test.equal(output2.export, 'MyStack:MyConstructMyOutput255322D15');
        test.done();
    },
    'disableExport can be used to disable the auto-export behavior'(test) {
        const stack = new lib_1.Stack();
        const output = new lib_1.Output(stack, 'MyOutput', { disableExport: true });
        test.equal(output.export, null);
        // cannot specify `export` and `disableExport` at the same time.
        test.throws(() => new lib_1.Output(stack, 'YourOutput', {
            disableExport: true,
            export: 'bla'
        }), /Cannot set `disableExport` and specify an export name/);
        test.done();
    },
    'is stack name is undefined, we will only use the logical ID for the export name'(test) {
        const stack = new lib_1.Stack();
        const output = new lib_1.Output(stack, 'MyOutput');
        test.equal(output.export, 'MyOutput');
        test.done();
    },
    'makeImportValue can be used to create an Fn::ImportValue from an output'(test) {
        const stack = new lib_1.Stack(undefined, 'MyStack');
        const output = new lib_1.Output(stack, 'MyOutput');
        test.deepEqual(lib_1.resolve(output.makeImportValue()), { 'Fn::ImportValue': 'MyStack:MyOutput' });
        test.done();
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5vdXRwdXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0ZXN0Lm91dHB1dC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EsbUNBQTZFO0FBRTdFLGlCQUFTO0lBQ1AsbUNBQW1DLENBQUMsSUFBVTtRQUM1QyxNQUFNLEtBQUssR0FBRyxJQUFJLFdBQUssRUFBRSxDQUFDO1FBQzFCLE1BQU0sR0FBRyxHQUFHLElBQUksY0FBUSxDQUFDLEtBQUssRUFBRSxZQUFZLEVBQUUsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUM3RCxNQUFNLEdBQUcsR0FBRyxJQUFJLFNBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUV6QixJQUFJLFlBQU0sQ0FBQyxLQUFLLEVBQUUsVUFBVSxFQUFFO1lBQzVCLE1BQU0sRUFBRSxZQUFZO1lBQ3BCLEtBQUssRUFBRSxHQUFHO1lBQ1YsV0FBVyxFQUFFLG1CQUFtQjtTQUNqQyxDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsRUFBRSxFQUFFLEVBQUUsU0FBUyxFQUFFLEVBQUUsVUFBVSxFQUFFLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxFQUFFO1lBQ25GLE9BQU8sRUFDTixFQUFFLFFBQVEsRUFDVCxFQUFFLFdBQVcsRUFBRSxtQkFBbUI7b0JBQ2hDLE1BQU0sRUFBRSxFQUFFLElBQUksRUFBRSxZQUFZLEVBQUU7b0JBQzlCLEtBQUssRUFBRSxFQUFFLEdBQUcsRUFBRSxZQUFZLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ3hDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNkLENBQUM7SUFFRCw4QkFBOEIsQ0FBQyxJQUFVO1FBQ3ZDLE1BQU0sS0FBSyxHQUFHLElBQUksV0FBSyxFQUFFLENBQUM7UUFDMUIsTUFBTSxNQUFNLEdBQUcsSUFBSSxZQUFNLENBQUMsS0FBSyxFQUFFLFVBQVUsRUFBRSxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsQ0FBQyxDQUFDO1FBQzNFLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzlCLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNkLENBQUM7SUFFRCwyQ0FBMkMsQ0FBQyxJQUFVO1FBQ3BELE1BQU0sS0FBSyxHQUFHLElBQUksV0FBSyxDQUFDLFNBQVMsRUFBRSxTQUFTLENBQUMsQ0FBQztRQUM5QyxNQUFNLE1BQU0sR0FBRyxJQUFJLFlBQU0sQ0FBQyxLQUFLLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFDN0MsTUFBTSxLQUFLLEdBQUcsSUFBSSxlQUFTLENBQUMsS0FBSyxFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBQ2xELE1BQU0sT0FBTyxHQUFHLElBQUksWUFBTSxDQUFDLEtBQUssRUFBRSxXQUFXLENBQUMsQ0FBQztRQUMvQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztRQUM5QyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsc0NBQXNDLENBQUMsQ0FBQztRQUNuRSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDZCxDQUFDO0lBRUQsK0RBQStELENBQUMsSUFBVTtRQUN4RSxNQUFNLEtBQUssR0FBRyxJQUFJLFdBQUssRUFBRSxDQUFDO1FBQzFCLE1BQU0sTUFBTSxHQUFHLElBQUksWUFBTSxDQUFDLEtBQUssRUFBRSxVQUFVLEVBQUUsRUFBRSxhQUFhLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUV0RSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFFaEMsZ0VBQWdFO1FBQ2hFLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxZQUFNLENBQUMsS0FBSyxFQUFFLFlBQVksRUFBRTtZQUNoRCxhQUFhLEVBQUUsSUFBSTtZQUNuQixNQUFNLEVBQUUsS0FBSztTQUNkLENBQUMsRUFBRSx1REFBdUQsQ0FBQyxDQUFDO1FBRTdELElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNkLENBQUM7SUFFRCxpRkFBaUYsQ0FBQyxJQUFVO1FBQzFGLE1BQU0sS0FBSyxHQUFHLElBQUksV0FBSyxFQUFFLENBQUM7UUFDMUIsTUFBTSxNQUFNLEdBQUcsSUFBSSxZQUFNLENBQUMsS0FBSyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBQzdDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxVQUFVLENBQUMsQ0FBQztRQUN0QyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDZCxDQUFDO0lBRUQseUVBQXlFLENBQUMsSUFBVTtRQUNsRixNQUFNLEtBQUssR0FBRyxJQUFJLFdBQUssQ0FBQyxTQUFTLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDOUMsTUFBTSxNQUFNLEdBQUcsSUFBSSxZQUFNLENBQUMsS0FBSyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBQzdDLElBQUksQ0FBQyxTQUFTLENBQUMsYUFBTyxDQUFDLE1BQU0sQ0FBQyxlQUFlLEVBQUUsQ0FBQyxFQUFFLEVBQUUsaUJBQWlCLEVBQUUsa0JBQWtCLEVBQUUsQ0FBQyxDQUFDO1FBQzdGLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNkLENBQUM7Q0FDRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGVzdCB9IGZyb20gJ25vZGV1bml0JztcbmltcG9ydCB7IENvbnN0cnVjdCwgT3V0cHV0LCBSZWYsIHJlc29sdmUsIFJlc291cmNlLCBTdGFjayB9IGZyb20gJy4uLy4uL2xpYic7XG5cbmV4cG9ydCA9IHtcbiAgJ291dHB1dHMgY2FuIGJlIGFkZGVkIHRvIHRoZSBzdGFjaycodGVzdDogVGVzdCkge1xuICAgIGNvbnN0IHN0YWNrID0gbmV3IFN0YWNrKCk7XG4gICAgY29uc3QgcmVzID0gbmV3IFJlc291cmNlKHN0YWNrLCAnTXlSZXNvdXJjZScsIHsgdHlwZTogJ1InIH0pO1xuICAgIGNvbnN0IHJlZiA9IG5ldyBSZWYocmVzKTtcblxuICAgIG5ldyBPdXRwdXQoc3RhY2ssICdNeU91dHB1dCcsIHtcbiAgICAgIGV4cG9ydDogJ0V4cG9ydE5hbWUnLFxuICAgICAgdmFsdWU6IHJlZixcbiAgICAgIGRlc2NyaXB0aW9uOiAnT3V0cHV0IHByb3BlcnRpZXMnXG4gICAgfSk7XG4gICAgdGVzdC5kZWVwRXF1YWwoc3RhY2sudG9DbG91ZEZvcm1hdGlvbigpLCB7IFJlc291cmNlczogeyBNeVJlc291cmNlOiB7IFR5cGU6ICdSJyB9IH0sXG4gICAgT3V0cHV0czpcbiAgICAgeyBNeU91dHB1dDpcbiAgICAgIHsgRGVzY3JpcHRpb246ICdPdXRwdXQgcHJvcGVydGllcycsXG4gICAgICAgIEV4cG9ydDogeyBOYW1lOiAnRXhwb3J0TmFtZScgfSxcbiAgICAgICAgVmFsdWU6IHsgUmVmOiAnTXlSZXNvdXJjZScgfSB9IH0gfSk7XG4gICAgdGVzdC5kb25lKCk7XG4gIH0sXG5cbiAgJ291dHB1dHMgY2Fubm90IGJlIHJlZmVyZW5jZWQnKHRlc3Q6IFRlc3QpIHtcbiAgICBjb25zdCBzdGFjayA9IG5ldyBTdGFjaygpO1xuICAgIGNvbnN0IG91dHB1dCA9IG5ldyBPdXRwdXQoc3RhY2ssICdNeU91dHB1dCcsIHsgZGVzY3JpcHRpb246ICdNeSBPdXRwdXQnIH0pO1xuICAgIHRlc3QudGhyb3dzKCgpID0+IG91dHB1dC5yZWYpO1xuICAgIHRlc3QuZG9uZSgpO1xuICB9LFxuXG4gICdvdXRwdXRzIGhhdmUgYSBkZWZhdWx0IHVuaXF1ZSBleHBvcnQgbmFtZScodGVzdDogVGVzdCkge1xuICAgIGNvbnN0IHN0YWNrID0gbmV3IFN0YWNrKHVuZGVmaW5lZCwgJ015U3RhY2snKTtcbiAgICBjb25zdCBvdXRwdXQgPSBuZXcgT3V0cHV0KHN0YWNrLCAnTXlPdXRwdXQnKTtcbiAgICBjb25zdCBjaGlsZCA9IG5ldyBDb25zdHJ1Y3Qoc3RhY2ssICdNeUNvbnN0cnVjdCcpO1xuICAgIGNvbnN0IG91dHB1dDIgPSBuZXcgT3V0cHV0KGNoaWxkLCAnTXlPdXRwdXQyJyk7XG4gICAgdGVzdC5lcXVhbChvdXRwdXQuZXhwb3J0LCAnTXlTdGFjazpNeU91dHB1dCcpO1xuICAgIHRlc3QuZXF1YWwob3V0cHV0Mi5leHBvcnQsICdNeVN0YWNrOk15Q29uc3RydWN0TXlPdXRwdXQyNTUzMjJEMTUnKTtcbiAgICB0ZXN0LmRvbmUoKTtcbiAgfSxcblxuICAnZGlzYWJsZUV4cG9ydCBjYW4gYmUgdXNlZCB0byBkaXNhYmxlIHRoZSBhdXRvLWV4cG9ydCBiZWhhdmlvcicodGVzdDogVGVzdCkge1xuICAgIGNvbnN0IHN0YWNrID0gbmV3IFN0YWNrKCk7XG4gICAgY29uc3Qgb3V0cHV0ID0gbmV3IE91dHB1dChzdGFjaywgJ015T3V0cHV0JywgeyBkaXNhYmxlRXhwb3J0OiB0cnVlIH0pO1xuXG4gICAgdGVzdC5lcXVhbChvdXRwdXQuZXhwb3J0LCBudWxsKTtcblxuICAgIC8vIGNhbm5vdCBzcGVjaWZ5IGBleHBvcnRgIGFuZCBgZGlzYWJsZUV4cG9ydGAgYXQgdGhlIHNhbWUgdGltZS5cbiAgICB0ZXN0LnRocm93cygoKSA9PiBuZXcgT3V0cHV0KHN0YWNrLCAnWW91ck91dHB1dCcsIHtcbiAgICAgIGRpc2FibGVFeHBvcnQ6IHRydWUsXG4gICAgICBleHBvcnQ6ICdibGEnXG4gICAgfSksIC9DYW5ub3Qgc2V0IGBkaXNhYmxlRXhwb3J0YCBhbmQgc3BlY2lmeSBhbiBleHBvcnQgbmFtZS8pO1xuXG4gICAgdGVzdC5kb25lKCk7XG4gIH0sXG5cbiAgJ2lzIHN0YWNrIG5hbWUgaXMgdW5kZWZpbmVkLCB3ZSB3aWxsIG9ubHkgdXNlIHRoZSBsb2dpY2FsIElEIGZvciB0aGUgZXhwb3J0IG5hbWUnKHRlc3Q6IFRlc3QpIHtcbiAgICBjb25zdCBzdGFjayA9IG5ldyBTdGFjaygpO1xuICAgIGNvbnN0IG91dHB1dCA9IG5ldyBPdXRwdXQoc3RhY2ssICdNeU91dHB1dCcpO1xuICAgIHRlc3QuZXF1YWwob3V0cHV0LmV4cG9ydCwgJ015T3V0cHV0Jyk7XG4gICAgdGVzdC5kb25lKCk7XG4gIH0sXG5cbiAgJ21ha2VJbXBvcnRWYWx1ZSBjYW4gYmUgdXNlZCB0byBjcmVhdGUgYW4gRm46OkltcG9ydFZhbHVlIGZyb20gYW4gb3V0cHV0Jyh0ZXN0OiBUZXN0KSB7XG4gICAgY29uc3Qgc3RhY2sgPSBuZXcgU3RhY2sodW5kZWZpbmVkLCAnTXlTdGFjaycpO1xuICAgIGNvbnN0IG91dHB1dCA9IG5ldyBPdXRwdXQoc3RhY2ssICdNeU91dHB1dCcpO1xuICAgIHRlc3QuZGVlcEVxdWFsKHJlc29sdmUob3V0cHV0Lm1ha2VJbXBvcnRWYWx1ZSgpKSwgeyAnRm46OkltcG9ydFZhbHVlJzogJ015U3RhY2s6TXlPdXRwdXQnIH0pO1xuICAgIHRlc3QuZG9uZSgpO1xuICB9XG59O1xuIl19