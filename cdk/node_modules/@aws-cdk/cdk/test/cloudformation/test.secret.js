"use strict";
const lib_1 = require("../../lib");
module.exports = {
    'Secret is merely a token'(test) {
        const foo = new lib_1.Secret('Foo');
        const bar = new lib_1.Secret(() => 'Bar');
        test.deepEqual(lib_1.resolve(foo), 'Foo');
        test.deepEqual(lib_1.resolve(bar), 'Bar');
        test.done();
    },
    'SecretParameter can be used to define values resolved from SSM parameter store during deployment'(test) {
        const stack = new lib_1.Stack();
        const mySecret = new lib_1.SecretParameter(stack, 'MySecret', { ssmParameter: '/my/secret/param' });
        new lib_1.SecretParameter(stack, 'Boom', {
            ssmParameter: 'Boom',
            description: 'description',
            constraintDescription: 'constraintDescription',
            minLength: -100,
            maxLength: 2000,
            allowedPattern: 'allowed-pattern',
            allowedValues: ['allowed', 'values'],
        });
        test.deepEqual(stack.toCloudFormation(), { Parameters: { MySecretParameterBB81DE58: { Type: 'AWS::SSM::Parameter::Value<String>',
                    Default: '/my/secret/param',
                    NoEcho: true },
                BoomParameterB3EB3942: { Type: 'AWS::SSM::Parameter::Value<String>',
                    Default: 'Boom',
                    AllowedPattern: 'allowed-pattern',
                    AllowedValues: ['allowed', 'values'],
                    ConstraintDescription: 'constraintDescription',
                    Description: 'description',
                    MaxLength: 2000,
                    MinLength: -100,
                    NoEcho: true } } });
        // value resolves to a "Ref"
        test.deepEqual(lib_1.resolve(mySecret.value), { Ref: 'MySecretParameterBB81DE58' });
        test.done();
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5zZWNyZXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0ZXN0LnNlY3JldC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EsbUNBQW9FO0FBRXBFLGlCQUFTO0lBQ1AsMEJBQTBCLENBQUMsSUFBVTtRQUNuQyxNQUFNLEdBQUcsR0FBRyxJQUFJLFlBQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM5QixNQUFNLEdBQUcsR0FBRyxJQUFJLFlBQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUVwQyxJQUFJLENBQUMsU0FBUyxDQUFDLGFBQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNwQyxJQUFJLENBQUMsU0FBUyxDQUFDLGFBQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNwQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDZCxDQUFDO0lBRUQsa0dBQWtHLENBQUMsSUFBVTtRQUMzRyxNQUFNLEtBQUssR0FBRyxJQUFJLFdBQUssRUFBRSxDQUFDO1FBRTFCLE1BQU0sUUFBUSxHQUFHLElBQUkscUJBQWUsQ0FBQyxLQUFLLEVBQUUsVUFBVSxFQUFFLEVBQUUsWUFBWSxFQUFFLGtCQUFrQixFQUFFLENBQUMsQ0FBQztRQUU5RixJQUFJLHFCQUFlLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRTtZQUNqQyxZQUFZLEVBQUUsTUFBTTtZQUNwQixXQUFXLEVBQUUsYUFBYTtZQUMxQixxQkFBcUIsRUFBRSx1QkFBdUI7WUFDOUMsU0FBUyxFQUFFLENBQUMsR0FBRztZQUNmLFNBQVMsRUFBRSxJQUFJO1lBQ2YsY0FBYyxFQUFFLGlCQUFpQjtZQUNqQyxhQUFhLEVBQUUsQ0FBRSxTQUFTLEVBQUUsUUFBUSxDQUFFO1NBQ3ZDLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLGdCQUFnQixFQUFFLEVBQUUsRUFBRSxVQUFVLEVBQ25ELEVBQUUseUJBQXlCLEVBQ3hCLEVBQUUsSUFBSSxFQUFFLG9DQUFvQztvQkFDNUMsT0FBTyxFQUFFLGtCQUFrQjtvQkFDM0IsTUFBTSxFQUFFLElBQUksRUFBRTtnQkFDZixxQkFBcUIsRUFDcEIsRUFBRSxJQUFJLEVBQUUsb0NBQW9DO29CQUM1QyxPQUFPLEVBQUUsTUFBTTtvQkFDZixjQUFjLEVBQUUsaUJBQWlCO29CQUNqQyxhQUFhLEVBQUUsQ0FBRSxTQUFTLEVBQUUsUUFBUSxDQUFFO29CQUN0QyxxQkFBcUIsRUFBRSx1QkFBdUI7b0JBQzlDLFdBQVcsRUFBRSxhQUFhO29CQUMxQixTQUFTLEVBQUUsSUFBSTtvQkFDZixTQUFTLEVBQUUsQ0FBQyxHQUFHO29CQUNmLE1BQU0sRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUV6Qiw0QkFBNEI7UUFDNUIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxhQUFPLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUUsR0FBRyxFQUFFLDJCQUEyQixFQUFFLENBQUMsQ0FBQztRQUU5RSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDZCxDQUFDO0NBQ0YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRlc3QgfSBmcm9tICdub2RldW5pdCc7XG5pbXBvcnQgeyByZXNvbHZlLCBTZWNyZXQsIFNlY3JldFBhcmFtZXRlciwgU3RhY2sgfSBmcm9tICcuLi8uLi9saWInO1xuXG5leHBvcnQgPSB7XG4gICdTZWNyZXQgaXMgbWVyZWx5IGEgdG9rZW4nKHRlc3Q6IFRlc3QpIHtcbiAgICBjb25zdCBmb28gPSBuZXcgU2VjcmV0KCdGb28nKTtcbiAgICBjb25zdCBiYXIgPSBuZXcgU2VjcmV0KCgpID0+ICdCYXInKTtcblxuICAgIHRlc3QuZGVlcEVxdWFsKHJlc29sdmUoZm9vKSwgJ0ZvbycpO1xuICAgIHRlc3QuZGVlcEVxdWFsKHJlc29sdmUoYmFyKSwgJ0JhcicpO1xuICAgIHRlc3QuZG9uZSgpO1xuICB9LFxuXG4gICdTZWNyZXRQYXJhbWV0ZXIgY2FuIGJlIHVzZWQgdG8gZGVmaW5lIHZhbHVlcyByZXNvbHZlZCBmcm9tIFNTTSBwYXJhbWV0ZXIgc3RvcmUgZHVyaW5nIGRlcGxveW1lbnQnKHRlc3Q6IFRlc3QpIHtcbiAgICBjb25zdCBzdGFjayA9IG5ldyBTdGFjaygpO1xuXG4gICAgY29uc3QgbXlTZWNyZXQgPSBuZXcgU2VjcmV0UGFyYW1ldGVyKHN0YWNrLCAnTXlTZWNyZXQnLCB7IHNzbVBhcmFtZXRlcjogJy9teS9zZWNyZXQvcGFyYW0nIH0pO1xuXG4gICAgbmV3IFNlY3JldFBhcmFtZXRlcihzdGFjaywgJ0Jvb20nLCB7XG4gICAgICBzc21QYXJhbWV0ZXI6ICdCb29tJyxcbiAgICAgIGRlc2NyaXB0aW9uOiAnZGVzY3JpcHRpb24nLFxuICAgICAgY29uc3RyYWludERlc2NyaXB0aW9uOiAnY29uc3RyYWludERlc2NyaXB0aW9uJyxcbiAgICAgIG1pbkxlbmd0aDogLTEwMCxcbiAgICAgIG1heExlbmd0aDogMjAwMCxcbiAgICAgIGFsbG93ZWRQYXR0ZXJuOiAnYWxsb3dlZC1wYXR0ZXJuJyxcbiAgICAgIGFsbG93ZWRWYWx1ZXM6IFsgJ2FsbG93ZWQnLCAndmFsdWVzJyBdLFxuICAgIH0pO1xuXG4gICAgdGVzdC5kZWVwRXF1YWwoc3RhY2sudG9DbG91ZEZvcm1hdGlvbigpLCB7IFBhcmFtZXRlcnM6XG4gICAgICB7IE15U2VjcmV0UGFyYW1ldGVyQkI4MURFNTg6XG4gICAgICAgICB7IFR5cGU6ICdBV1M6OlNTTTo6UGFyYW1ldGVyOjpWYWx1ZTxTdHJpbmc+JyxcbiAgICAgICAgIERlZmF1bHQ6ICcvbXkvc2VjcmV0L3BhcmFtJyxcbiAgICAgICAgIE5vRWNobzogdHJ1ZSB9LFxuICAgICAgICBCb29tUGFyYW1ldGVyQjNFQjM5NDI6XG4gICAgICAgICB7IFR5cGU6ICdBV1M6OlNTTTo6UGFyYW1ldGVyOjpWYWx1ZTxTdHJpbmc+JyxcbiAgICAgICAgIERlZmF1bHQ6ICdCb29tJyxcbiAgICAgICAgIEFsbG93ZWRQYXR0ZXJuOiAnYWxsb3dlZC1wYXR0ZXJuJyxcbiAgICAgICAgIEFsbG93ZWRWYWx1ZXM6IFsgJ2FsbG93ZWQnLCAndmFsdWVzJyBdLFxuICAgICAgICAgQ29uc3RyYWludERlc2NyaXB0aW9uOiAnY29uc3RyYWludERlc2NyaXB0aW9uJyxcbiAgICAgICAgIERlc2NyaXB0aW9uOiAnZGVzY3JpcHRpb24nLFxuICAgICAgICAgTWF4TGVuZ3RoOiAyMDAwLFxuICAgICAgICAgTWluTGVuZ3RoOiAtMTAwLFxuICAgICAgICAgTm9FY2hvOiB0cnVlIH0gfSB9KTtcblxuICAgIC8vIHZhbHVlIHJlc29sdmVzIHRvIGEgXCJSZWZcIlxuICAgIHRlc3QuZGVlcEVxdWFsKHJlc29sdmUobXlTZWNyZXQudmFsdWUpLCB7IFJlZjogJ015U2VjcmV0UGFyYW1ldGVyQkI4MURFNTgnIH0pO1xuXG4gICAgdGVzdC5kb25lKCk7XG4gIH1cbn07XG4iXX0=