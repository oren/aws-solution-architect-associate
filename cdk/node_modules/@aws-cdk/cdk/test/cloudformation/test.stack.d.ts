import { Test } from 'nodeunit';
declare const _default: {
    'a stack can be serialized into a CloudFormation template, initially it\'s empty'(test: Test): void;
    'stack objects have some template-level propeties, such as Description, Version, Transform'(test: Test): void;
    'Stack.find(c) can be used to find the stack from any point in the tree'(test: Test): void;
    'Stack.isStack indicates that a construct is a stack'(test: Test): void;
    'stack.id is not included in the logical identities of resources within it'(test: Test): void;
    'stack.templateOptions can be used to set template-level options'(test: Test): void;
    'Overriding `Stack.toCloudFormation` allows arbitrary post-processing of the generated template during synthesis'(test: Test): void;
    'Construct.findResource(logicalId) can be used to retrieve a resource by its path'(test: Test): void;
    'Stack.findResource will fail if the element is not a resource'(test: Test): void;
    'Stack.getByPath can be used to find any CloudFormation element (Parameter, Output, etc)'(test: Test): void;
    'Stack names can have hyphens in them'(test: Test): void;
    'Include should support non-hash top-level template elements like "Description"'(test: Test): void;
    'Can\'t add children during synthesis'(test: Test): void;
};
export = _default;
