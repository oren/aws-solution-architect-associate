"use strict";
const lib_1 = require("../../lib");
module.exports = {
    'Rule can be used to create rules'(test) {
        const stack = new lib_1.Stack();
        const rule = new lib_1.Rule(stack, 'MyRule');
        rule.addAssertion(new lib_1.FnEquals('lhs', 'rhs'), 'lhs equals rhs');
        rule.addAssertion(new lib_1.FnNot(new lib_1.FnAnd(new lib_1.FnContains(['hello', 'world'], "world"))), 'some assertion');
        test.deepEqual(stack.toCloudFormation(), {
            Rules: {
                MyRule: {
                    Assertions: [
                        {
                            Assert: { 'Fn::Equals': ['lhs', 'rhs'] },
                            AssertDescription: 'lhs equals rhs'
                        },
                        {
                            Assert: { 'Fn::Not': [{ 'Fn::And': [{ 'Fn::Contains': [['hello', 'world'], 'world'] }] }] },
                            AssertDescription: 'some assertion'
                        }
                    ]
                }
            }
        });
        test.done();
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5ydWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidGVzdC5ydWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxtQ0FBNEU7QUFFNUUsaUJBQVM7SUFDUCxrQ0FBa0MsQ0FBQyxJQUFVO1FBQzNDLE1BQU0sS0FBSyxHQUFHLElBQUksV0FBSyxFQUFFLENBQUM7UUFFMUIsTUFBTSxJQUFJLEdBQUcsSUFBSSxVQUFJLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxjQUFRLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxFQUFFLGdCQUFnQixDQUFDLENBQUM7UUFDaEUsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLFdBQUssQ0FBQyxJQUFJLFdBQUssQ0FBQyxJQUFJLGdCQUFVLENBQUMsQ0FBRSxPQUFPLEVBQUUsT0FBTyxDQUFFLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLGdCQUFnQixDQUFDLENBQUM7UUFFekcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLEVBQUUsRUFBRTtZQUN2QyxLQUFLLEVBQUU7Z0JBQ0wsTUFBTSxFQUFFO29CQUNOLFVBQVUsRUFBRTt3QkFDVjs0QkFDRSxNQUFNLEVBQUUsRUFBRSxZQUFZLEVBQUUsQ0FBRSxLQUFLLEVBQUUsS0FBSyxDQUFFLEVBQUU7NEJBQzFDLGlCQUFpQixFQUFFLGdCQUFnQjt5QkFDcEM7d0JBQ0Q7NEJBQ0UsTUFBTSxFQUFFLEVBQUUsU0FBUyxFQUFFLENBQUUsRUFBRSxTQUFTLEVBQUUsQ0FBRSxFQUFFLGNBQWMsRUFBRSxDQUFFLENBQUUsT0FBTyxFQUFFLE9BQU8sQ0FBRSxFQUFFLE9BQU8sQ0FBRSxFQUFFLENBQUUsRUFBRSxDQUFFLEVBQUU7NEJBQ25HLGlCQUFpQixFQUFFLGdCQUFnQjt5QkFDcEM7cUJBQ0Y7aUJBQ0Y7YUFDRjtTQUNGLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNkLENBQUM7Q0FDRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGVzdCB9IGZyb20gJ25vZGV1bml0JztcbmltcG9ydCB7IEZuQW5kLCBGbkNvbnRhaW5zLCBGbkVxdWFscywgRm5Ob3QsIFJ1bGUsIFN0YWNrIH0gZnJvbSAnLi4vLi4vbGliJztcblxuZXhwb3J0ID0ge1xuICAnUnVsZSBjYW4gYmUgdXNlZCB0byBjcmVhdGUgcnVsZXMnKHRlc3Q6IFRlc3QpIHtcbiAgICBjb25zdCBzdGFjayA9IG5ldyBTdGFjaygpO1xuXG4gICAgY29uc3QgcnVsZSA9IG5ldyBSdWxlKHN0YWNrLCAnTXlSdWxlJyk7XG4gICAgcnVsZS5hZGRBc3NlcnRpb24obmV3IEZuRXF1YWxzKCdsaHMnLCAncmhzJyksICdsaHMgZXF1YWxzIHJocycpO1xuICAgIHJ1bGUuYWRkQXNzZXJ0aW9uKG5ldyBGbk5vdChuZXcgRm5BbmQobmV3IEZuQ29udGFpbnMoWyAnaGVsbG8nLCAnd29ybGQnIF0sIFwid29ybGRcIikpKSwgJ3NvbWUgYXNzZXJ0aW9uJyk7XG5cbiAgICB0ZXN0LmRlZXBFcXVhbChzdGFjay50b0Nsb3VkRm9ybWF0aW9uKCksIHtcbiAgICAgIFJ1bGVzOiB7XG4gICAgICAgIE15UnVsZToge1xuICAgICAgICAgIEFzc2VydGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgQXNzZXJ0OiB7ICdGbjo6RXF1YWxzJzogWyAnbGhzJywgJ3JocycgXSB9LFxuICAgICAgICAgICAgICBBc3NlcnREZXNjcmlwdGlvbjogJ2xocyBlcXVhbHMgcmhzJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgQXNzZXJ0OiB7ICdGbjo6Tm90JzogWyB7ICdGbjo6QW5kJzogWyB7ICdGbjo6Q29udGFpbnMnOiBbIFsgJ2hlbGxvJywgJ3dvcmxkJyBdLCAnd29ybGQnIF0gfSBdIH0gXSB9LFxuICAgICAgICAgICAgICBBc3NlcnREZXNjcmlwdGlvbjogJ3NvbWUgYXNzZXJ0aW9uJ1xuICAgICAgICAgICAgfVxuICAgICAgICAgIF1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdGVzdC5kb25lKCk7XG4gIH1cbn07XG4iXX0=