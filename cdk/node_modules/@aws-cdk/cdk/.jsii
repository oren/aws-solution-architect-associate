{
  "author": {
    "name": "Amazon Web Services",
    "organization": true,
    "roles": [
      "author"
    ],
    "url": "https://aws.amazon.com"
  },
  "bundled": {
    "js-base64": "^2.4.5",
    "json-diff": "^0.3.1"
  },
  "dependencies": {
    "@aws-cdk/cx-api": {
      "targets": {
        "dotnet": {
          "assemblyOriginatorKeyFile": "../../key.snk",
          "namespace": "Amazon.CDK.CXAPI",
          "packageId": "Amazon.CDK.CXAPI",
          "signAssembly": true
        },
        "java": {
          "maven": {
            "artifactId": "cdk-cx-api",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.cxapi"
        },
        "js": {
          "npm": "@aws-cdk/cx-api"
        }
      },
      "version": "0.15.2"
    }
  },
  "description": "AWS Cloud Development Kit Core Library",
  "homepage": "https://github.com/awslabs/aws-cdk",
  "license": "Apache-2.0",
  "name": "@aws-cdk/cdk",
  "readme": {
    "markdown": "## AWS Cloud Development Kit Core Library\n\nThis library includes the basic building blocks of\nthe [AWS Cloud Development Kit](https://github.com/awslabs/aws-cdk) (AWS CDK).\n\n"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/awslabs/aws-cdk.git"
  },
  "schema": "jsii/1.0",
  "targets": {
    "dotnet": {
      "assemblyOriginatorKeyFile": "../../key.snk",
      "namespace": "Amazon.CDK",
      "packageId": "Amazon.CDK",
      "signAssembly": true
    },
    "java": {
      "maven": {
        "artifactId": "cdk",
        "groupId": "software.amazon.awscdk"
      },
      "package": "software.amazon.awscdk"
    },
    "js": {
      "npm": "@aws-cdk/cdk"
    }
  },
  "types": {
    "@aws-cdk/cdk.App": {
      "assembly": "@aws-cdk/cdk",
      "base": {
        "fqn": "@aws-cdk/cdk.Root"
      },
      "docs": {
        "comment": "Represents a CDK program."
      },
      "fqn": "@aws-cdk/cdk.App",
      "initializer": {
        "docs": {
          "comment": "Initializes a CDK application."
        },
        "initializer": true
      },
      "kind": "class",
      "methods": [
        {
          "docs": {
            "comment": "Returns metadata for all constructs in the stack."
          },
          "name": "collectMetadata",
          "parameters": [
            {
              "name": "stack",
              "type": {
                "fqn": "@aws-cdk/cdk.Stack"
              }
            }
          ],
          "returns": {
            "collection": {
              "elementtype": {
                "collection": {
                  "elementtype": {
                    "fqn": "@aws-cdk/cdk.MetadataEntry"
                  },
                  "kind": "array"
                }
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "comment": "Runs the program. Output is written to output directory as specified in the request."
          },
          "name": "run"
        },
        {
          "docs": {
            "comment": "Synthesize and validate a single stack"
          },
          "name": "synthesizeStack",
          "parameters": [
            {
              "docs": {
                "comment": "The name of the stack to synthesize"
              },
              "name": "stackName",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "fqn": "@aws-cdk/cx-api.SynthesizedStack"
          }
        },
        {
          "docs": {
            "comment": "Synthesizes multiple stacks"
          },
          "name": "synthesizeStacks",
          "parameters": [
            {
              "name": "stackNames",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "string"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "returns": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/cx-api.SynthesizedStack"
              },
              "kind": "array"
            }
          }
        }
      ],
      "name": "App"
    },
    "@aws-cdk/cdk.ArnComponents": {
      "assembly": "@aws-cdk/cdk",
      "datatype": true,
      "fqn": "@aws-cdk/cdk.ArnComponents",
      "kind": "interface",
      "name": "ArnComponents",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "Resource type (e.g. \"table\", \"autoScalingGroup\", \"certificate\").\nFor some resource types, e.g. S3 buckets, this field defines the bucket name."
          },
          "name": "resource",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "The service namespace that identifies the AWS product (for example,\n's3', 'iam', 'codepipline')."
          },
          "name": "service",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "The ID of the AWS account that owns the resource, without the hyphens.\nFor example, 123456789012. Note that the ARNs for some resources don't\nrequire an account number, so this component might be omitted.",
            "default": "The account the stack is deployed to."
          },
          "name": "account",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "The partition that the resource is in. For standard AWS regions, the\npartition is aws. If you have resources in other partitions, the\npartition is aws-partitionname. For example, the partition for resources\nin the China (Beijing) region is aws-cn.",
            "default": "The AWS partition the stack is deployed to."
          },
          "name": "partition",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "The region the resource resides in. Note that the ARNs for some resources\ndo not require a region, so this component might be omitted.",
            "default": "The region the stack is deployed to."
          },
          "name": "region",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "Resource name or path within the resource (i.e. S3 bucket object key) or\na wildcard such as ``\"*\"``. This is service-dependent."
          },
          "name": "resourceName",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "Separator between resource type and the resource.\n\nCan be either '/' or ':'. Will only be used if path is defined.",
            "default": "'/'"
          },
          "name": "sep",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/cdk.ArnUtils": {
      "assembly": "@aws-cdk/cdk",
      "docs": {
        "comment": "An Amazon Resource Name (ARN).\nhttp://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html"
      },
      "fqn": "@aws-cdk/cdk.ArnUtils",
      "initializer": {
        "initializer": true
      },
      "kind": "class",
      "methods": [
        {
          "docs": {
            "comment": "Creates an ARN from components.\n\nIf `partition`, `region` or `account` are not specified, the stack's\npartition, region and account will be used.\n\nIf any component is the empty string, an empty string will be inserted\ninto the generated ARN at the location that component corresponds to.\n\nThe ARN will be formatted as follows:\n\n   arn:{partition}:{service}:{region}:{account}:{resource}{sep}}{resource-name}"
          },
          "name": "fromComponents",
          "parameters": [
            {
              "name": "components",
              "type": {
                "fqn": "@aws-cdk/cdk.ArnComponents"
              }
            }
          ],
          "returns": {
            "primitive": "string"
          },
          "static": true
        },
        {
          "docs": {
            "comment": "Given an ARN, parses it and returns components.\n\nIf the ARN is a concrete string, it will be parsed and validated. The\nseparator (`sep`) will be set to '/' if the 6th component includes a '/',\nin which case, `resource` will be set to the value before the '/' and\n`resourceName` will be the rest. In case there is no '/', `resource` will\nbe set to the 6th components and `resourceName` will be set to the rest\nof the string.\n\nIf the ARN includes tokens (or is a token), the ARN cannot be validated,\nsince we don't have the actual value yet at the time of this function\ncall. You will have to know the separator and the type of ARN. The\nresulting `ArnComponents` object will contain tokens for the\nsubexpressions of the ARN, not string literals. In this case this\nfunction cannot properly parse the complete final resourceName (path) out\nof ARNs that use '/' to both separate the 'resource' from the\n'resourceName' AND to subdivide the resourceName further. For example, in\nS3 ARNs:\n\n    arn:aws:s3:::my_corporate_bucket/path/to/exampleobject.png\n\nAfter parsing the resourceName will not contain\n'path/to/exampleobject.png' but simply 'path'. This is a limitation\nbecause there is no slicing functionality in CloudFormation templates.",
            "return": "an ArnComponents object which allows access to the various\ncomponents of the ARN."
          },
          "name": "parse",
          "parameters": [
            {
              "name": "arn",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "sepIfToken",
              "type": {
                "optional": true,
                "primitive": "string"
              }
            },
            {
              "docs": {
                "comment": "Whether there is a name component in the ARN at all. For\nexample, SNS Topics ARNs have the 'resource' component contain the topic\nname, and no 'resourceName' component."
              },
              "name": "hasName",
              "type": {
                "optional": true,
                "primitive": "boolean"
              }
            }
          ],
          "returns": {
            "fqn": "@aws-cdk/cdk.ArnComponents"
          },
          "static": true
        },
        {
          "docs": {
            "comment": "Given a Token evaluating to ARN, parses it and returns components.\n\nThe ARN cannot be validated, since we don't have the actual value yet\nat the time of this function call. You will have to know the separator\nand the type of ARN.\n\nThe resulting `ArnComponents` object will contain tokens for the\nsubexpressions of the ARN, not string literals.\n\nWARNING: this function cannot properly parse the complete final\nresourceName (path) out of ARNs that use '/' to both separate the\n'resource' from the 'resourceName' AND to subdivide the resourceName\nfurther. For example, in S3 ARNs:\n\n    arn:aws:s3:::my_corporate_bucket/path/to/exampleobject.png\n\nAfter parsing the resourceName will not contain 'path/to/exampleobject.png'\nbut simply 'path'. This is a limitation because there is no slicing\nfunctionality in CloudFormation templates.",
            "return": "an ArnComponents object which allows access to the various\ncomponents of the ARN."
          },
          "name": "parseToken",
          "parameters": [
            {
              "docs": {
                "comment": "The input token that contains an ARN"
              },
              "name": "arn",
              "type": {
                "fqn": "@aws-cdk/cdk.Token"
              }
            },
            {
              "docs": {
                "comment": "The separator used to separate resource from resourceName"
              },
              "name": "sep",
              "type": {
                "optional": true,
                "primitive": "string"
              }
            },
            {
              "docs": {
                "comment": "Whether there is a name component in the ARN at all.\nFor example, SNS Topics ARNs have the 'resource' component contain the\ntopic name, and no 'resourceName' component."
              },
              "name": "hasName",
              "type": {
                "optional": true,
                "primitive": "boolean"
              }
            }
          ],
          "returns": {
            "fqn": "@aws-cdk/cdk.ArnComponents"
          },
          "static": true
        },
        {
          "docs": {
            "comment": "Return a Token that represents the resource component of the ARN"
          },
          "name": "resourceComponent",
          "parameters": [
            {
              "name": "arn",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "sep",
              "type": {
                "optional": true,
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "primitive": "string"
          },
          "static": true
        },
        {
          "docs": {
            "comment": "Return a Token that represents the resource Name component of the ARN"
          },
          "name": "resourceNameComponent",
          "parameters": [
            {
              "name": "arn",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "sep",
              "type": {
                "optional": true,
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "primitive": "string"
          },
          "static": true
        }
      ],
      "name": "ArnUtils"
    },
    "@aws-cdk/cdk.AutoScalingCreationPolicy": {
      "assembly": "@aws-cdk/cdk",
      "datatype": true,
      "docs": {
        "comment": "For an Auto Scaling group replacement update, specifies how many instances must signal success for the\nupdate to succeed."
      },
      "fqn": "@aws-cdk/cdk.AutoScalingCreationPolicy",
      "kind": "interface",
      "name": "AutoScalingCreationPolicy",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "Specifies the percentage of instances in an Auto Scaling replacement update that must signal success for the\nupdate to succeed. You can specify a value from 0 to 100. AWS CloudFormation rounds to the nearest tenth of a percent.\nFor example, if you update five instances with a minimum successful percentage of 50, three instances must signal success.\nIf an instance doesn't send a signal within the time specified by the Timeout property, AWS CloudFormation assumes that the\ninstance wasn't created."
          },
          "name": "minSuccessfulInstancesPercent",
          "type": {
            "optional": true,
            "primitive": "number"
          }
        }
      ]
    },
    "@aws-cdk/cdk.AutoScalingReplacingUpdate": {
      "assembly": "@aws-cdk/cdk",
      "datatype": true,
      "docs": {
        "comment": "Specifies whether an Auto Scaling group and the instances it contains are replaced during an update. During replacement,\nAWS CloudFormation retains the old group until it finishes creating the new one. If the update fails, AWS CloudFormation\ncan roll back to the old Auto Scaling group and delete the new Auto Scaling group.\n\nWhile AWS CloudFormation creates the new group, it doesn't detach or attach any instances. After successfully creating\nthe new Auto Scaling group, AWS CloudFormation deletes the old Auto Scaling group during the cleanup process.\n\nWhen you set the WillReplace parameter, remember to specify a matching CreationPolicy. If the minimum number of\ninstances (specified by the MinSuccessfulInstancesPercent property) don't signal success within the Timeout period\n(specified in the CreationPolicy policy), the replacement update fails and AWS CloudFormation rolls back to the old\nAuto Scaling group."
      },
      "fqn": "@aws-cdk/cdk.AutoScalingReplacingUpdate",
      "kind": "interface",
      "name": "AutoScalingReplacingUpdate",
      "properties": [
        {
          "abstract": true,
          "name": "willReplace",
          "type": {
            "optional": true,
            "primitive": "boolean"
          }
        }
      ]
    },
    "@aws-cdk/cdk.AutoScalingRollingUpdate": {
      "assembly": "@aws-cdk/cdk",
      "datatype": true,
      "docs": {
        "comment": "To specify how AWS CloudFormation handles rolling updates for an Auto Scaling group, use the AutoScalingRollingUpdate\npolicy. Rolling updates enable you to specify whether AWS CloudFormation updates instances that are in an Auto Scaling\ngroup in batches or all at once."
      },
      "fqn": "@aws-cdk/cdk.AutoScalingRollingUpdate",
      "kind": "interface",
      "name": "AutoScalingRollingUpdate",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "Specifies the maximum number of instances that AWS CloudFormation updates."
          },
          "name": "maxBatchSize",
          "type": {
            "optional": true,
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "Specifies the minimum number of instances that must be in service within the Auto Scaling group while AWS\nCloudFormation updates old instances."
          },
          "name": "minInstancesInService",
          "type": {
            "optional": true,
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "Specifies the percentage of instances in an Auto Scaling rolling update that must signal success for an update to succeed.\nYou can specify a value from 0 to 100. AWS CloudFormation rounds to the nearest tenth of a percent. For example, if you\nupdate five instances with a minimum successful percentage of 50, three instances must signal success.\n\nIf an instance doesn't send a signal within the time specified in the PauseTime property, AWS CloudFormation assumes\nthat the instance wasn't updated.\n\nIf you specify this property, you must also enable the WaitOnResourceSignals and PauseTime properties."
          },
          "name": "minSuccessfulInstancesPercent",
          "type": {
            "optional": true,
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "The amount of time that AWS CloudFormation pauses after making a change to a batch of instances to give those instances\ntime to start software applications. For example, you might need to specify PauseTime when scaling up the number of\ninstances in an Auto Scaling group.\n\nIf you enable the WaitOnResourceSignals property, PauseTime is the amount of time that AWS CloudFormation should wait\nfor the Auto Scaling group to receive the required number of valid signals from added or replaced instances. If the\nPauseTime is exceeded before the Auto Scaling group receives the required number of signals, the update fails. For best\nresults, specify a time period that gives your applications sufficient time to get started. If the update needs to be\nrolled back, a short PauseTime can cause the rollback to fail.\n\nSpecify PauseTime in the ISO8601 duration format (in the format PT#H#M#S, where each # is the number of hours, minutes,\nand seconds, respectively). The maximum PauseTime is one hour (PT1H)."
          },
          "name": "pauseTime",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "Specifies the Auto Scaling processes to suspend during a stack update. Suspending processes prevents Auto Scaling from\ninterfering with a stack update. For example, you can suspend alarming so that Auto Scaling doesn't execute scaling\npolicies associated with an alarm. For valid values, see the ScalingProcesses.member.N parameter for the SuspendProcesses\naction in the Auto Scaling API Reference."
          },
          "name": "suspendProcesses",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            },
            "optional": true
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "Specifies whether the Auto Scaling group waits on signals from new instances during an update. Use this property to\nensure that instances have completed installing and configuring applications before the Auto Scaling group update proceeds.\nAWS CloudFormation suspends the update of an Auto Scaling group after new EC2 instances are launched into the group.\nAWS CloudFormation must receive a signal from each new instance within the specified PauseTime before continuing the update.\nTo signal the Auto Scaling group, use the cfn-signal helper script or SignalResource API.\n\nTo have instances wait for an Elastic Load Balancing health check before they signal success, add a health-check\nverification by using the cfn-init helper script. For an example, see the verify_instance_health command in the Auto Scaling\nrolling updates sample template."
          },
          "name": "waitOnResourceSignals",
          "type": {
            "optional": true,
            "primitive": "boolean"
          }
        }
      ]
    },
    "@aws-cdk/cdk.AutoScalingScheduledAction": {
      "assembly": "@aws-cdk/cdk",
      "datatype": true,
      "docs": {
        "comment": "With scheduled actions, the group size properties of an Auto Scaling group can change at any time. When you update a\nstack with an Auto Scaling group and scheduled action, AWS CloudFormation always sets the group size property values of\nyour Auto Scaling group to the values that are defined in the AWS::AutoScaling::AutoScalingGroup resource of your template,\neven if a scheduled action is in effect.\n\nIf you do not want AWS CloudFormation to change any of the group size property values when you have a scheduled action in\neffect, use the AutoScalingScheduledAction update policy to prevent AWS CloudFormation from changing the MinSize, MaxSize,\nor DesiredCapacity properties unless you have modified these values in your template.\\"
      },
      "fqn": "@aws-cdk/cdk.AutoScalingScheduledAction",
      "kind": "interface",
      "name": "AutoScalingScheduledAction",
      "properties": [
        {
          "abstract": true,
          "name": "ignoreUnmodifiedGroupSizeProperties",
          "type": {
            "optional": true,
            "primitive": "boolean"
          }
        }
      ]
    },
    "@aws-cdk/cdk.AvailabilityZoneProvider": {
      "assembly": "@aws-cdk/cdk",
      "docs": {
        "comment": "Context provider that will return the availability zones for the current account and region"
      },
      "fqn": "@aws-cdk/cdk.AvailabilityZoneProvider",
      "initializer": {
        "initializer": true,
        "parameters": [
          {
            "name": "context",
            "type": {
              "fqn": "@aws-cdk/cdk.Construct"
            }
          }
        ]
      },
      "kind": "class",
      "name": "AvailabilityZoneProvider",
      "properties": [
        {
          "docs": {
            "comment": "Return the list of AZs for the current account and region"
          },
          "immutable": true,
          "name": "availabilityZones",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        }
      ]
    },
    "@aws-cdk/cdk.AwsAccountId": {
      "assembly": "@aws-cdk/cdk",
      "base": {
        "fqn": "@aws-cdk/cdk.PseudoParameter"
      },
      "fqn": "@aws-cdk/cdk.AwsAccountId",
      "initializer": {
        "initializer": true
      },
      "kind": "class",
      "name": "AwsAccountId"
    },
    "@aws-cdk/cdk.AwsDomainSuffix": {
      "assembly": "@aws-cdk/cdk",
      "base": {
        "fqn": "@aws-cdk/cdk.PseudoParameter"
      },
      "fqn": "@aws-cdk/cdk.AwsDomainSuffix",
      "initializer": {
        "initializer": true
      },
      "kind": "class",
      "name": "AwsDomainSuffix"
    },
    "@aws-cdk/cdk.AwsNoValue": {
      "assembly": "@aws-cdk/cdk",
      "base": {
        "fqn": "@aws-cdk/cdk.PseudoParameter"
      },
      "fqn": "@aws-cdk/cdk.AwsNoValue",
      "initializer": {
        "initializer": true
      },
      "kind": "class",
      "name": "AwsNoValue"
    },
    "@aws-cdk/cdk.AwsNotificationARNs": {
      "assembly": "@aws-cdk/cdk",
      "base": {
        "fqn": "@aws-cdk/cdk.PseudoParameter"
      },
      "fqn": "@aws-cdk/cdk.AwsNotificationARNs",
      "initializer": {
        "initializer": true
      },
      "kind": "class",
      "name": "AwsNotificationARNs"
    },
    "@aws-cdk/cdk.AwsPartition": {
      "assembly": "@aws-cdk/cdk",
      "base": {
        "fqn": "@aws-cdk/cdk.PseudoParameter"
      },
      "fqn": "@aws-cdk/cdk.AwsPartition",
      "initializer": {
        "initializer": true
      },
      "kind": "class",
      "name": "AwsPartition"
    },
    "@aws-cdk/cdk.AwsRegion": {
      "assembly": "@aws-cdk/cdk",
      "base": {
        "fqn": "@aws-cdk/cdk.PseudoParameter"
      },
      "fqn": "@aws-cdk/cdk.AwsRegion",
      "initializer": {
        "initializer": true
      },
      "kind": "class",
      "name": "AwsRegion"
    },
    "@aws-cdk/cdk.AwsStackId": {
      "assembly": "@aws-cdk/cdk",
      "base": {
        "fqn": "@aws-cdk/cdk.PseudoParameter"
      },
      "fqn": "@aws-cdk/cdk.AwsStackId",
      "initializer": {
        "initializer": true
      },
      "kind": "class",
      "name": "AwsStackId"
    },
    "@aws-cdk/cdk.AwsStackName": {
      "assembly": "@aws-cdk/cdk",
      "base": {
        "fqn": "@aws-cdk/cdk.PseudoParameter"
      },
      "fqn": "@aws-cdk/cdk.AwsStackName",
      "initializer": {
        "initializer": true
      },
      "kind": "class",
      "name": "AwsStackName"
    },
    "@aws-cdk/cdk.AwsURLSuffix": {
      "assembly": "@aws-cdk/cdk",
      "base": {
        "fqn": "@aws-cdk/cdk.PseudoParameter"
      },
      "fqn": "@aws-cdk/cdk.AwsURLSuffix",
      "initializer": {
        "initializer": true
      },
      "kind": "class",
      "name": "AwsURLSuffix"
    },
    "@aws-cdk/cdk.CloudFormationJSON": {
      "assembly": "@aws-cdk/cdk",
      "docs": {
        "comment": "Class for JSON routines that are framework-aware"
      },
      "fqn": "@aws-cdk/cdk.CloudFormationJSON",
      "initializer": {
        "initializer": true
      },
      "kind": "class",
      "methods": [
        {
          "docs": {
            "comment": "Turn an arbitrary structure potentially containing Tokens into a JSON string.\n\nReturns a Token which will evaluate to CloudFormation expression that\nwill be evaluated by CloudFormation to the JSON representation of the\ninput structure.\n\nAll Tokens substituted in this way must return strings, or the evaluation\nin CloudFormation will fail."
          },
          "name": "stringify",
          "parameters": [
            {
              "name": "obj",
              "type": {
                "optional": true,
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "fqn": "@aws-cdk/cdk.Token"
          },
          "static": true
        }
      ],
      "name": "CloudFormationJSON"
    },
    "@aws-cdk/cdk.CloudFormationToken": {
      "assembly": "@aws-cdk/cdk",
      "base": {
        "fqn": "@aws-cdk/cdk.Token"
      },
      "docs": {
        "comment": "Base class for CloudFormation built-ins"
      },
      "fqn": "@aws-cdk/cdk.CloudFormationToken",
      "initializer": {
        "docs": {
          "comment": "Creates a token that resolves to `value`.\n\nIf value is a function, the function is evaluated upon resolution and\nthe value it returns will be used as the token's value.\n\ndisplayName is used to represent the Token when it's embedded into a string; it\nwill look something like this:\n\n    \"embedded in a larger string is ${Token[DISPLAY_NAME.123]}\"\n\nThis value is used as a hint to humans what the meaning of the Token is,\nand does not have any effect on the evaluation.\n\nMust contain only alphanumeric and simple separator characters (_.:-)."
        },
        "initializer": true,
        "parameters": [
          {
            "docs": {
              "comment": "What this token will evaluate to, literal or function."
            },
            "name": "valueOrFunction",
            "type": {
              "optional": true,
              "primitive": "any"
            }
          },
          {
            "docs": {
              "comment": "A human-readable display hint for this Token"
            },
            "name": "displayName",
            "type": {
              "optional": true,
              "primitive": "string"
            }
          }
        ]
      },
      "kind": "class",
      "methods": [
        {
          "docs": {
            "comment": "Return a concated version of this Token in a string context\n\nThe default implementation of this combines strings, but specialized\nimplements of Token can return a more appropriate value."
          },
          "name": "concat",
          "overrides": {
            "fqn": "@aws-cdk/cdk.Token"
          },
          "parameters": [
            {
              "name": "left",
              "type": {
                "optional": true,
                "primitive": "any"
              }
            },
            {
              "name": "right",
              "type": {
                "optional": true,
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "fqn": "@aws-cdk/cdk.Token"
          }
        }
      ],
      "name": "CloudFormationToken"
    },
    "@aws-cdk/cdk.Condition": {
      "assembly": "@aws-cdk/cdk",
      "base": {
        "fqn": "@aws-cdk/cdk.Referenceable"
      },
      "docs": {
        "comment": "Represents a CloudFormation condition, for resources which must be conditionally created and\nthe determination must be made at deploy time."
      },
      "fqn": "@aws-cdk/cdk.Condition",
      "initializer": {
        "docs": {
          "comment": "Build a new condition. The condition must be constructed with a condition token,\nthat the condition is based on."
        },
        "initializer": true,
        "parameters": [
          {
            "name": "parent",
            "type": {
              "fqn": "@aws-cdk/cdk.Construct"
            }
          },
          {
            "name": "name",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/cdk.ConditionProps",
              "optional": true
            }
          }
        ]
      },
      "kind": "class",
      "methods": [
        {
          "docs": {
            "comment": "Returns the CloudFormation 'snippet' for this entity. The snippet will only be merged\nat the root level to ensure there are no identity conflicts.\n\nFor example, a Resource class will return something like:\n{\n   Resources: {\n     [this.logicalId]: {\n       Type: this.resourceType,\n       Properties: this.props,\n       Condition: this.condition\n     }\n   }\n}"
          },
          "name": "toCloudFormation",
          "overrides": {
            "fqn": "@aws-cdk/cdk.StackElement"
          },
          "returns": {
            "primitive": "json"
          }
        }
      ],
      "name": "Condition",
      "properties": [
        {
          "docs": {
            "comment": "The condition statement."
          },
          "name": "expression",
          "type": {
            "fqn": "@aws-cdk/cdk.FnCondition",
            "optional": true
          }
        }
      ]
    },
    "@aws-cdk/cdk.ConditionProps": {
      "assembly": "@aws-cdk/cdk",
      "datatype": true,
      "fqn": "@aws-cdk/cdk.ConditionProps",
      "kind": "interface",
      "name": "ConditionProps",
      "properties": [
        {
          "abstract": true,
          "name": "expression",
          "type": {
            "fqn": "@aws-cdk/cdk.FnCondition",
            "optional": true
          }
        }
      ]
    },
    "@aws-cdk/cdk.Construct": {
      "assembly": "@aws-cdk/cdk",
      "docs": {
        "comment": "Represents the building block of the construct graph.\nWhen a construct is created, it is always added as a child"
      },
      "fqn": "@aws-cdk/cdk.Construct",
      "initializer": {
        "docs": {
          "comment": "Creates a new construct node."
        },
        "initializer": true,
        "parameters": [
          {
            "docs": {
              "comment": "The parent construct"
            },
            "name": "parent",
            "type": {
              "fqn": "@aws-cdk/cdk.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "kind": "class",
      "methods": [
        {
          "docs": {
            "comment": "Adds a child construct to this node.",
            "return": "The resolved path part name of the child"
          },
          "name": "addChild",
          "parameters": [
            {
              "docs": {
                "comment": "The child construct"
              },
              "name": "child",
              "type": {
                "fqn": "@aws-cdk/cdk.Construct"
              }
            },
            {
              "name": "childName",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "protected": true
        },
        {
          "docs": {
            "comment": "Adds an { error: <message> } metadata entry to this construct.\nThe toolkit will fail synthesis when errors are reported."
          },
          "name": "addError",
          "parameters": [
            {
              "docs": {
                "comment": "The error message."
              },
              "name": "message",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "fqn": "@aws-cdk/cdk.Construct"
          }
        },
        {
          "docs": {
            "comment": "Adds a { \"aws:cdk:info\": <message> } metadata entry to this construct.\nThe toolkit will display the info message when apps are synthesized."
          },
          "name": "addInfo",
          "parameters": [
            {
              "docs": {
                "comment": "The info message."
              },
              "name": "message",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "fqn": "@aws-cdk/cdk.Construct"
          }
        },
        {
          "docs": {
            "comment": "Adds a metadata entry to this construct.\nEntries are arbitrary values and will also include a stack trace to allow tracing back to\nthe code location for when the entry was added. It can be used, for example, to include source\nmapping in CloudFormation templates to improve diagnostics."
          },
          "name": "addMetadata",
          "parameters": [
            {
              "docs": {
                "comment": "a string denoting the type of metadata"
              },
              "name": "type",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "comment": "the value of the metadata (can be a Token). If null/undefined, metadata will not be added."
              },
              "name": "data",
              "type": {
                "optional": true,
                "primitive": "any"
              }
            },
            {
              "docs": {
                "comment": "a function under which to restrict the metadata entry's stack trace (defaults to this.addMetadata)"
              },
              "name": "from",
              "type": {
                "optional": true,
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "fqn": "@aws-cdk/cdk.Construct"
          }
        },
        {
          "docs": {
            "comment": "Adds a { warning: <message> } metadata entry to this construct.\nThe toolkit will display the warning when an app is synthesized, or fail\nif run in --strict mode."
          },
          "name": "addWarning",
          "parameters": [
            {
              "docs": {
                "comment": "The warning message."
              },
              "name": "message",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "fqn": "@aws-cdk/cdk.Construct"
          }
        },
        {
          "docs": {
            "comment": "Return the ancestors (including self) of this Construct up until and excluding the indicated component"
          },
          "name": "ancestors",
          "parameters": [
            {
              "name": "upTo",
              "type": {
                "fqn": "@aws-cdk/cdk.Construct",
                "optional": true
              }
            }
          ],
          "returns": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/cdk.Construct"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "comment": "Return a descendant by path\n\nThrows an exception if the descendant is not found.",
            "return": "Child with the given path."
          },
          "name": "findChild",
          "parameters": [
            {
              "name": "path",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "fqn": "@aws-cdk/cdk.Construct"
          }
        },
        {
          "docs": {
            "comment": "Retrieves a value from tree context.\n\nContext is usually initialized at the root, but can be overridden at any point in the tree.",
            "return": "The context value or undefined"
          },
          "name": "getContext",
          "parameters": [
            {
              "docs": {
                "comment": "The context key"
              },
              "name": "key",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "optional": true,
            "primitive": "any"
          }
        },
        {
          "docs": {
            "comment": "Locks this construct from allowing more children to be added. After this\ncall, no more children can be added to this construct or to any children."
          },
          "name": "lock",
          "protected": true
        },
        {
          "docs": {
            "comment": "Retrieve a value from tree-global context\n\nIt is an error if the context object is not available."
          },
          "name": "requireContext",
          "parameters": [
            {
              "name": "key",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "optional": true,
            "primitive": "any"
          }
        },
        {
          "docs": {
            "aws": "-cdk/runtime`` instead.",
            "comment": "Throws if the `props` bag doesn't include the property `name`.\nIn the future we can add some type-checking here, maybe even auto-generate during compilation.",
            "deprecated": "use ``requireProperty`` from ``"
          },
          "name": "required",
          "parameters": [
            {
              "docs": {
                "comment": "The props bag."
              },
              "name": "props",
              "type": {
                "optional": true,
                "primitive": "any"
              }
            },
            {
              "docs": {
                "comment": "The name of the required property."
              },
              "name": "name",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "protected": true,
          "returns": {
            "optional": true,
            "primitive": "any"
          }
        },
        {
          "docs": {
            "comment": "This can be used to set contextual values.\nContext must be set before any children are added, since children may consult context info during construction.\nIf the key already exists, it will be overridden."
          },
          "name": "setContext",
          "parameters": [
            {
              "docs": {
                "comment": "The context key"
              },
              "name": "key",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "comment": "The context value"
              },
              "name": "value",
              "type": {
                "optional": true,
                "primitive": "any"
              }
            }
          ]
        },
        {
          "docs": {
            "comment": "Returns a string representation of this construct."
          },
          "name": "toString",
          "returns": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "Returns a string with a tree representation of this construct and it's children."
          },
          "name": "toTreeString",
          "parameters": [
            {
              "name": "depth",
              "type": {
                "optional": true,
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "Return a descendant by path, or undefined",
            "return": "a child by path or undefined if not found."
          },
          "name": "tryFindChild",
          "parameters": [
            {
              "name": "path",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "fqn": "@aws-cdk/cdk.Construct",
            "optional": true
          }
        },
        {
          "docs": {
            "comment": "Unlocks this costruct and allows mutations (adding children)."
          },
          "name": "unlock",
          "protected": true
        },
        {
          "docs": {
            "comment": "This method can be implemented by derived constructs in order to perform\nvalidation logic. It is called on all constructs before synthesis.",
            "return": "An array of validation error messages, or an empty array if there the construct is valid."
          },
          "name": "validate",
          "returns": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "comment": "Invokes 'validate' on all child constructs and then on this construct (depth-first).",
            "return": "A list of validation errors. If the list is empty, all constructs are valid."
          },
          "name": "validateTree",
          "returns": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/cdk.ValidationError"
              },
              "kind": "array"
            }
          }
        }
      ],
      "name": "Construct",
      "properties": [
        {
          "docs": {
            "comment": "All direct children of this construct."
          },
          "immutable": true,
          "name": "children",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/cdk.Construct"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "comment": "The local id of the construct.\nThis id is unique amongst its siblings.\nTo obtain a tree-global unique id for this construct, use `uniqueId`."
          },
          "immutable": true,
          "name": "id",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "Returns true if this construct or any of it's parent constructs are\nlocked."
          },
          "immutable": true,
          "name": "locked",
          "protected": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "comment": "An array of metadata objects associated with this construct.\nThis can be used, for example, to implement support for deprecation notices, source mapping, etc."
          },
          "immutable": true,
          "name": "metadata",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/cdk.MetadataEntry"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "comment": "The full path of this construct in the tree.\nComponents are separated by '/'."
          },
          "immutable": true,
          "name": "path",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "A tree-global unique alphanumeric identifier for this construct.\nIncludes all components of the tree."
          },
          "immutable": true,
          "name": "uniqueId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "Returns the parent of this node or undefined if this is a root node."
          },
          "immutable": true,
          "name": "parent",
          "type": {
            "fqn": "@aws-cdk/cdk.Construct",
            "optional": true
          }
        }
      ]
    },
    "@aws-cdk/cdk.ContextProvider": {
      "assembly": "@aws-cdk/cdk",
      "docs": {
        "comment": "Base class for the model side of context providers\n\nInstances of this class communicate with context provider plugins in the 'cdk\ntoolkit' via context variables (input), outputting specialized queries for\nmore context variables (output).\n\nContextProvider needs access to a Construct to hook into the context mechanism."
      },
      "fqn": "@aws-cdk/cdk.ContextProvider",
      "initializer": {
        "initializer": true,
        "parameters": [
          {
            "name": "context",
            "type": {
              "fqn": "@aws-cdk/cdk.Construct"
            }
          },
          {
            "name": "provider",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "collection": {
                "elementtype": {
                  "optional": true,
                  "primitive": "any"
                },
                "kind": "map"
              },
              "optional": true
            }
          }
        ]
      },
      "kind": "class",
      "methods": [
        {
          "docs": {
            "comment": "Read a provider value, verifying it's a list"
          },
          "name": "getStringListValue",
          "parameters": [
            {
              "docs": {
                "comment": "The value to return if there is no value defined for this context key"
              },
              "name": "defaultValue",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "string"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "returns": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "comment": "Read a provider value, verifying it's a string"
          },
          "name": "getStringValue",
          "parameters": [
            {
              "docs": {
                "comment": "The value to return if there is no value defined for this context key"
              },
              "name": "defaultValue",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "Read a provider value and verify it is not `null`"
          },
          "name": "getValue",
          "parameters": [
            {
              "name": "defaultValue",
              "type": {
                "optional": true,
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "optional": true,
            "primitive": "any"
          }
        }
      ],
      "name": "ContextProvider",
      "properties": [
        {
          "immutable": true,
          "name": "context",
          "type": {
            "fqn": "@aws-cdk/cdk.Construct"
          }
        },
        {
          "immutable": true,
          "name": "key",
          "type": {
            "primitive": "string"
          }
        },
        {
          "immutable": true,
          "name": "provider",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/cdk.CreationPolicy": {
      "assembly": "@aws-cdk/cdk",
      "datatype": true,
      "docs": {
        "comment": "Associate the CreationPolicy attribute with a resource to prevent its status from reaching create complete until\nAWS CloudFormation receives a specified number of success signals or the timeout period is exceeded. To signal a\nresource, you can use the cfn-signal helper script or SignalResource API. AWS CloudFormation publishes valid signals\nto the stack events so that you track the number of signals sent.\n\nThe creation policy is invoked only when AWS CloudFormation creates the associated resource. Currently, the only\nAWS CloudFormation resources that support creation policies are AWS::AutoScaling::AutoScalingGroup, AWS::EC2::Instance,\nand AWS::CloudFormation::WaitCondition.\n\nUse the CreationPolicy attribute when you want to wait on resource configuration actions before stack creation proceeds.\nFor example, if you install and configure software applications on an EC2 instance, you might want those applications to\nbe running before proceeding. In such cases, you can add a CreationPolicy attribute to the instance, and then send a success\nsignal to the instance after the applications are installed and configured. For a detailed example, see Deploying Applications\non Amazon EC2 with AWS CloudFormation."
      },
      "fqn": "@aws-cdk/cdk.CreationPolicy",
      "kind": "interface",
      "name": "CreationPolicy",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "For an Auto Scaling group replacement update, specifies how many instances must signal success for the\nupdate to succeed."
          },
          "name": "autoScalingCreationPolicy",
          "type": {
            "fqn": "@aws-cdk/cdk.AutoScalingCreationPolicy",
            "optional": true
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "When AWS CloudFormation creates the associated resource, configures the number of required success signals and\nthe length of time that AWS CloudFormation waits for those signals."
          },
          "name": "resourceSignal",
          "type": {
            "fqn": "@aws-cdk/cdk.ResourceSignal",
            "optional": true
          }
        }
      ]
    },
    "@aws-cdk/cdk.DeletionPolicy": {
      "assembly": "@aws-cdk/cdk",
      "docs": {
        "comment": "With the DeletionPolicy attribute you can preserve or (in some cases) backup a resource when its stack is deleted.\nYou specify a DeletionPolicy attribute for each resource that you want to control. If a resource has no DeletionPolicy\nattribute, AWS CloudFormation deletes the resource by default. Note that this capability also applies to update operations\nthat lead to resources being removed."
      },
      "fqn": "@aws-cdk/cdk.DeletionPolicy",
      "kind": "enum",
      "members": [
        {
          "docs": {
            "comment": "AWS CloudFormation deletes the resource and all its content if applicable during stack deletion. You can add this\ndeletion policy to any resource type. By default, if you don't specify a DeletionPolicy, AWS CloudFormation deletes\nyour resources. However, be aware of the following considerations:"
          },
          "name": "Delete"
        },
        {
          "docs": {
            "comment": "AWS CloudFormation keeps the resource without deleting the resource or its contents when its stack is deleted.\nYou can add this deletion policy to any resource type. Note that when AWS CloudFormation completes the stack deletion,\nthe stack will be in Delete_Complete state; however, resources that are retained continue to exist and continue to incur\napplicable charges until you delete those resources."
          },
          "name": "Retain"
        },
        {
          "docs": {
            "comment": "For resources that support snapshots (AWS::EC2::Volume, AWS::ElastiCache::CacheCluster, AWS::ElastiCache::ReplicationGroup,\nAWS::RDS::DBInstance, AWS::RDS::DBCluster, and AWS::Redshift::Cluster), AWS CloudFormation creates a snapshot for the\nresource before deleting it. Note that when AWS CloudFormation completes the stack deletion, the stack will be in the\nDelete_Complete state; however, the snapshots that are created with this policy continue to exist and continue to\nincur applicable charges until you delete those snapshots."
          },
          "name": "Snapshot"
        }
      ],
      "name": "DeletionPolicy"
    },
    "@aws-cdk/cdk.Environment": {
      "assembly": "@aws-cdk/cdk",
      "datatype": true,
      "docs": {
        "comment": "The deployment environment for a stack."
      },
      "fqn": "@aws-cdk/cdk.Environment",
      "kind": "interface",
      "name": "Environment",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "The AWS account ID for this environment.\nIf not specified, the context parameter `default-account` is used."
          },
          "name": "account",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "The AWS region for this environment.\nIf not specified, the context parameter `default-region` is used."
          },
          "name": "region",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/cdk.Fn": {
      "assembly": "@aws-cdk/cdk",
      "base": {
        "fqn": "@aws-cdk/cdk.CloudFormationToken"
      },
      "docs": {
        "comment": "CloudFormation intrinsic functions.\nhttp://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference.html"
      },
      "fqn": "@aws-cdk/cdk.Fn",
      "initializer": {
        "initializer": true,
        "parameters": [
          {
            "name": "name",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "value",
            "type": {
              "optional": true,
              "primitive": "any"
            }
          }
        ]
      },
      "kind": "class",
      "name": "Fn"
    },
    "@aws-cdk/cdk.FnAnd": {
      "assembly": "@aws-cdk/cdk",
      "base": {
        "fqn": "@aws-cdk/cdk.FnCondition"
      },
      "docs": {
        "comment": "Returns true if all the specified conditions evaluate to true, or returns false if any one\n  of the conditions evaluates to false. ``Fn::And`` acts as an AND operator. The minimum number of\nconditions that you can include is 2, and the maximum is 10."
      },
      "fqn": "@aws-cdk/cdk.FnAnd",
      "initializer": {
        "initializer": true,
        "parameters": [
          {
            "name": "condition",
            "type": {
              "fqn": "@aws-cdk/cdk.FnCondition"
            },
            "variadic": true
          }
        ],
        "variadic": true
      },
      "kind": "class",
      "name": "FnAnd"
    },
    "@aws-cdk/cdk.FnBase64": {
      "assembly": "@aws-cdk/cdk",
      "base": {
        "fqn": "@aws-cdk/cdk.Fn"
      },
      "docs": {
        "comment": "The intrinsic function ``Fn::Base64`` returns the Base64 representation of the input string.\nThis function is typically used to pass encoded data to Amazon EC2 instances by way of\nthe UserData property."
      },
      "fqn": "@aws-cdk/cdk.FnBase64",
      "initializer": {
        "docs": {
          "comment": "Creates an ``Fn::Base64`` function."
        },
        "initializer": true,
        "parameters": [
          {
            "docs": {
              "comment": "The string value you want to convert to Base64."
            },
            "name": "data",
            "type": {
              "optional": true,
              "primitive": "any"
            }
          }
        ]
      },
      "kind": "class",
      "name": "FnBase64"
    },
    "@aws-cdk/cdk.FnCidr": {
      "assembly": "@aws-cdk/cdk",
      "base": {
        "fqn": "@aws-cdk/cdk.Fn"
      },
      "docs": {
        "comment": "The intrinsic function ``Fn::Cidr`` returns the specified Cidr address block."
      },
      "fqn": "@aws-cdk/cdk.FnCidr",
      "initializer": {
        "docs": {
          "comment": "Creates an ``Fn::Cidr`` function."
        },
        "initializer": true,
        "parameters": [
          {
            "docs": {
              "comment": "The user-specified default Cidr address block."
            },
            "name": "ipBlock",
            "type": {
              "optional": true,
              "primitive": "any"
            }
          },
          {
            "docs": {
              "comment": "The number of subnets' Cidr block wanted. Count can be 1 to 256."
            },
            "name": "count",
            "type": {
              "optional": true,
              "primitive": "any"
            }
          },
          {
            "docs": {
              "comment": "The digit covered in the subnet."
            },
            "name": "sizeMask",
            "type": {
              "optional": true,
              "primitive": "any"
            }
          }
        ]
      },
      "kind": "class",
      "name": "FnCidr"
    },
    "@aws-cdk/cdk.FnConcat": {
      "assembly": "@aws-cdk/cdk",
      "base": {
        "fqn": "@aws-cdk/cdk.FnJoin"
      },
      "docs": {
        "comment": "Alias for ``FnJoin('', listOfValues)``."
      },
      "fqn": "@aws-cdk/cdk.FnConcat",
      "initializer": {
        "docs": {
          "comment": "Creates an ``Fn::Join`` function with an empty delimiter."
        },
        "initializer": true,
        "parameters": [
          {
            "docs": {
              "comment": "The list of values to concatenate."
            },
            "name": "listOfValues",
            "type": {
              "optional": true,
              "primitive": "any"
            },
            "variadic": true
          }
        ],
        "variadic": true
      },
      "kind": "class",
      "name": "FnConcat"
    },
    "@aws-cdk/cdk.FnCondition": {
      "assembly": "@aws-cdk/cdk",
      "base": {
        "fqn": "@aws-cdk/cdk.Fn"
      },
      "docs": {
        "comment": "You can use intrinsic functions, such as ``Fn::If``, ``Fn::Equals``, and ``Fn::Not``, to conditionally\ncreate stack resources. These conditions are evaluated based on input parameters that you\ndeclare when you create or update a stack. After you define all your conditions, you can\nassociate them with resources or resource properties in the Resources and Outputs sections\nof a template.\n\nYou define all conditions in the Conditions section of a template except for ``Fn::If`` conditions.\nYou can use the ``Fn::If`` condition in the metadata attribute, update policy attribute, and property\nvalues in the Resources section and Outputs sections of a template.\n\nYou might use conditions when you want to reuse a template that can create resources in different\ncontexts, such as a test environment versus a production environment. In your template, you can\nadd an EnvironmentType input parameter, which accepts either prod or test as inputs. For the\nproduction environment, you might include Amazon EC2 instances with certain capabilities;\nhowever, for the test environment, you want to use less capabilities to save costs. With\nconditions, you can define which resources are created and how they're configured for each\nenvironment type."
      },
      "fqn": "@aws-cdk/cdk.FnCondition",
      "initializer": {
        "initializer": true,
        "parameters": [
          {
            "name": "name",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "value",
            "type": {
              "optional": true,
              "primitive": "any"
            }
          }
        ]
      },
      "kind": "class",
      "name": "FnCondition"
    },
    "@aws-cdk/cdk.FnContains": {
      "assembly": "@aws-cdk/cdk",
      "base": {
        "fqn": "@aws-cdk/cdk.FnCondition"
      },
      "docs": {
        "comment": "Returns true if a specified string matches at least one value in a list of strings."
      },
      "fqn": "@aws-cdk/cdk.FnContains",
      "initializer": {
        "docs": {
          "comment": "Creates an ``Fn::Contains`` function."
        },
        "initializer": true,
        "parameters": [
          {
            "docs": {
              "comment": "A list of strings, such as \"A\", \"B\", \"C\"."
            },
            "name": "listOfStrings",
            "type": {
              "optional": true,
              "primitive": "any"
            }
          },
          {
            "docs": {
              "comment": "A string, such as \"A\", that you want to compare against a list of strings."
            },
            "name": "value",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "kind": "class",
      "name": "FnContains"
    },
    "@aws-cdk/cdk.FnEachMemberEquals": {
      "assembly": "@aws-cdk/cdk",
      "base": {
        "fqn": "@aws-cdk/cdk.FnCondition"
      },
      "docs": {
        "comment": "Returns true if a specified string matches all values in a list."
      },
      "fqn": "@aws-cdk/cdk.FnEachMemberEquals",
      "initializer": {
        "docs": {
          "comment": "Creates an ``Fn::EachMemberEquals`` function."
        },
        "initializer": true,
        "parameters": [
          {
            "docs": {
              "comment": "A list of strings, such as \"A\", \"B\", \"C\"."
            },
            "name": "listOfStrings",
            "type": {
              "optional": true,
              "primitive": "any"
            }
          },
          {
            "docs": {
              "comment": "A string, such as \"A\", that you want to compare against a list of strings."
            },
            "name": "value",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "kind": "class",
      "name": "FnEachMemberEquals"
    },
    "@aws-cdk/cdk.FnEachMemberIn": {
      "assembly": "@aws-cdk/cdk",
      "base": {
        "fqn": "@aws-cdk/cdk.FnCondition"
      },
      "docs": {
        "comment": "Returns true if each member in a list of strings matches at least one value in a second\nlist of strings."
      },
      "fqn": "@aws-cdk/cdk.FnEachMemberIn",
      "initializer": {
        "docs": {
          "comment": "Creates an ``Fn::EachMemberIn`` function."
        },
        "initializer": true,
        "parameters": [
          {
            "docs": {
              "comment": "A list of strings, such as \"A\", \"B\", \"C\". AWS CloudFormation checks whether each member in the strings_to_check parameter is in the strings_to_match parameter."
            },
            "name": "stringsToCheck",
            "type": {
              "optional": true,
              "primitive": "any"
            }
          },
          {
            "docs": {
              "comment": "A list of strings, such as \"A\", \"B\", \"C\". Each member in the strings_to_match parameter is compared against the members of the strings_to_check parameter."
            },
            "name": "stringsToMatch",
            "type": {
              "optional": true,
              "primitive": "any"
            }
          }
        ]
      },
      "kind": "class",
      "name": "FnEachMemberIn"
    },
    "@aws-cdk/cdk.FnEquals": {
      "assembly": "@aws-cdk/cdk",
      "base": {
        "fqn": "@aws-cdk/cdk.FnCondition"
      },
      "docs": {
        "comment": "Compares if two values are equal. Returns true if the two values are equal or false\nif they aren't."
      },
      "fqn": "@aws-cdk/cdk.FnEquals",
      "initializer": {
        "docs": {
          "comment": "Creates an ``Fn::Equals`` condition function."
        },
        "initializer": true,
        "parameters": [
          {
            "docs": {
              "comment": "A value of any type that you want to compare."
            },
            "name": "lhs",
            "type": {
              "optional": true,
              "primitive": "any"
            }
          },
          {
            "docs": {
              "comment": "A value of any type that you want to compare."
            },
            "name": "rhs",
            "type": {
              "optional": true,
              "primitive": "any"
            }
          }
        ]
      },
      "kind": "class",
      "name": "FnEquals"
    },
    "@aws-cdk/cdk.FnFindInMap": {
      "assembly": "@aws-cdk/cdk",
      "base": {
        "fqn": "@aws-cdk/cdk.Fn"
      },
      "docs": {
        "comment": "The intrinsic function ``Fn::FindInMap`` returns the value corresponding to keys in a two-level\nmap that is declared in the Mappings section."
      },
      "fqn": "@aws-cdk/cdk.FnFindInMap",
      "initializer": {
        "docs": {
          "comment": "Creates an ``Fn::FindInMap`` function."
        },
        "initializer": true,
        "parameters": [
          {
            "docs": {
              "comment": "The logical name of a mapping declared in the Mappings section that contains the keys and values."
            },
            "name": "mapName",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "comment": "The top-level key name. Its value is a list of key-value pairs."
            },
            "name": "topLevelKey",
            "type": {
              "optional": true,
              "primitive": "any"
            }
          },
          {
            "docs": {
              "comment": "The second-level key name, which is set to one of the keys from the list assigned to TopLevelKey."
            },
            "name": "secondLevelKey",
            "type": {
              "optional": true,
              "primitive": "any"
            }
          }
        ]
      },
      "kind": "class",
      "name": "FnFindInMap"
    },
    "@aws-cdk/cdk.FnGetAZs": {
      "assembly": "@aws-cdk/cdk",
      "base": {
        "fqn": "@aws-cdk/cdk.Fn"
      },
      "docs": {
        "comment": "The intrinsic function ``Fn::GetAZs`` returns an array that lists Availability Zones for a\nspecified region. Because customers have access to different Availability Zones, the intrinsic\nfunction ``Fn::GetAZs`` enables template authors to write templates that adapt to the calling\nuser's access. That way you don't have to hard-code a full list of Availability Zones for a\nspecified region."
      },
      "fqn": "@aws-cdk/cdk.FnGetAZs",
      "initializer": {
        "docs": {
          "comment": "Creates an ``Fn::GetAZs`` function."
        },
        "initializer": true,
        "parameters": [
          {
            "docs": {
              "comment": "The name of the region for which you want to get the Availability Zones.\nYou can use the AWS::Region pseudo parameter to specify the region in\nwhich the stack is created. Specifying an empty string is equivalent to\nspecifying AWS::Region."
            },
            "name": "region",
            "type": {
              "optional": true,
              "primitive": "string"
            }
          }
        ]
      },
      "kind": "class",
      "name": "FnGetAZs"
    },
    "@aws-cdk/cdk.FnGetAtt": {
      "assembly": "@aws-cdk/cdk",
      "base": {
        "fqn": "@aws-cdk/cdk.Fn"
      },
      "docs": {
        "comment": "The ``Fn::GetAtt`` intrinsic function returns the value of an attribute from a resource in the template."
      },
      "fqn": "@aws-cdk/cdk.FnGetAtt",
      "initializer": {
        "docs": {
          "comment": "Creates a ``Fn::GetAtt`` function."
        },
        "initializer": true,
        "parameters": [
          {
            "docs": {
              "comment": "The logical name (also called logical ID) of the resource that contains the attribute that you want."
            },
            "name": "logicalNameOfResource",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "comment": "The name of the resource-specific attribute whose value you want. See the resource's reference page for details about the attributes available for that resource type."
            },
            "name": "attributeName",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "kind": "class",
      "name": "FnGetAtt"
    },
    "@aws-cdk/cdk.FnIf": {
      "assembly": "@aws-cdk/cdk",
      "base": {
        "fqn": "@aws-cdk/cdk.FnCondition"
      },
      "docs": {
        "comment": "Returns one value if the specified condition evaluates to true and another value if the\nspecified condition evaluates to false. Currently, AWS CloudFormation supports the ``Fn::If``\nintrinsic function in the metadata attribute, update policy attribute, and property values\nin the Resources section and Outputs sections of a template. You can use the AWS::NoValue\npseudo parameter as a return value to remove the corresponding property."
      },
      "fqn": "@aws-cdk/cdk.FnIf",
      "initializer": {
        "docs": {
          "comment": "Creates an ``Fn::If`` condition function."
        },
        "initializer": true,
        "parameters": [
          {
            "docs": {
              "comment": "A reference to a condition in the Conditions section. Use the condition's name to reference it."
            },
            "name": "condition",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "comment": "A value to be returned if the specified condition evaluates to true."
            },
            "name": "valueIfTrue",
            "type": {
              "optional": true,
              "primitive": "any"
            }
          },
          {
            "docs": {
              "comment": "A value to be returned if the specified condition evaluates to false."
            },
            "name": "valueIfFalse",
            "type": {
              "optional": true,
              "primitive": "any"
            }
          }
        ]
      },
      "kind": "class",
      "name": "FnIf"
    },
    "@aws-cdk/cdk.FnImportValue": {
      "assembly": "@aws-cdk/cdk",
      "base": {
        "fqn": "@aws-cdk/cdk.Fn"
      },
      "docs": {
        "comment": "The intrinsic function ``Fn::ImportValue`` returns the value of an output exported by another stack.\nYou typically use this function to create cross-stack references. In the following example\ntemplate snippets, Stack A exports VPC security group values and Stack B imports them."
      },
      "fqn": "@aws-cdk/cdk.FnImportValue",
      "initializer": {
        "docs": {
          "comment": "Creates an ``Fn::ImportValue`` function."
        },
        "initializer": true,
        "parameters": [
          {
            "docs": {
              "comment": "The stack output value that you want to import."
            },
            "name": "sharedValueToImport",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "kind": "class",
      "name": "FnImportValue"
    },
    "@aws-cdk/cdk.FnJoin": {
      "assembly": "@aws-cdk/cdk",
      "base": {
        "fqn": "@aws-cdk/cdk.Fn"
      },
      "docs": {
        "comment": "The intrinsic function ``Fn::Join`` appends a set of values into a single value, separated by\nthe specified delimiter. If a delimiter is the empty string, the set of values are concatenated\nwith no delimiter."
      },
      "fqn": "@aws-cdk/cdk.FnJoin",
      "initializer": {
        "docs": {
          "comment": "Creates an ``Fn::Join`` function."
        },
        "initializer": true,
        "parameters": [
          {
            "docs": {
              "comment": "The value you want to occur between fragments. The delimiter will occur between fragments only.\nIt will not terminate the final value."
            },
            "name": "delimiter",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "comment": "The list of values you want combined."
            },
            "name": "listOfValues",
            "type": {
              "collection": {
                "elementtype": {
                  "optional": true,
                  "primitive": "any"
                },
                "kind": "array"
              }
            }
          }
        ]
      },
      "kind": "class",
      "methods": [
        {
          "name": "resolve",
          "overrides": {
            "fqn": "@aws-cdk/cdk.Token"
          },
          "returns": {
            "optional": true,
            "primitive": "any"
          }
        }
      ],
      "name": "FnJoin"
    },
    "@aws-cdk/cdk.FnNot": {
      "assembly": "@aws-cdk/cdk",
      "base": {
        "fqn": "@aws-cdk/cdk.FnCondition"
      },
      "docs": {
        "comment": "Returns true for a condition that evaluates to false or returns false for a condition that evaluates to true.\n``Fn::Not`` acts as a NOT operator."
      },
      "fqn": "@aws-cdk/cdk.FnNot",
      "initializer": {
        "docs": {
          "comment": "Creates an ``Fn::Not`` condition function."
        },
        "initializer": true,
        "parameters": [
          {
            "docs": {
              "comment": "A condition such as ``Fn::Equals`` that evaluates to true or false."
            },
            "name": "condition",
            "type": {
              "fqn": "@aws-cdk/cdk.FnCondition"
            }
          }
        ]
      },
      "kind": "class",
      "name": "FnNot"
    },
    "@aws-cdk/cdk.FnOr": {
      "assembly": "@aws-cdk/cdk",
      "base": {
        "fqn": "@aws-cdk/cdk.FnCondition"
      },
      "docs": {
        "comment": "Returns true if any one of the specified conditions evaluate to true, or returns false if\nall of the conditions evaluates to false. ``Fn::Or`` acts as an OR operator. The minimum number\nof conditions that you can include is 2, and the maximum is 10."
      },
      "fqn": "@aws-cdk/cdk.FnOr",
      "initializer": {
        "docs": {
          "comment": "Creates an ``Fn::Or`` condition function."
        },
        "initializer": true,
        "parameters": [
          {
            "docs": {
              "comment": "A condition that evaluates to true or false."
            },
            "name": "condition",
            "type": {
              "fqn": "@aws-cdk/cdk.FnCondition"
            },
            "variadic": true
          }
        ],
        "variadic": true
      },
      "kind": "class",
      "name": "FnOr"
    },
    "@aws-cdk/cdk.FnRefAll": {
      "assembly": "@aws-cdk/cdk",
      "base": {
        "fqn": "@aws-cdk/cdk.FnCondition"
      },
      "docs": {
        "comment": "Returns all values for a specified parameter type."
      },
      "fqn": "@aws-cdk/cdk.FnRefAll",
      "initializer": {
        "docs": {
          "comment": "Creates an ``Fn::RefAll`` function."
        },
        "initializer": true,
        "parameters": [
          {
            "docs": {
              "comment": "An AWS-specific parameter type, such as AWS::EC2::SecurityGroup::Id or\nAWS::EC2::VPC::Id. For more information, see Parameters in the AWS\nCloudFormation User Guide."
            },
            "name": "parameterType",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "kind": "class",
      "name": "FnRefAll"
    },
    "@aws-cdk/cdk.FnSelect": {
      "assembly": "@aws-cdk/cdk",
      "base": {
        "fqn": "@aws-cdk/cdk.Fn"
      },
      "docs": {
        "comment": "The intrinsic function ``Fn::Select`` returns a single object from a list of objects by index."
      },
      "fqn": "@aws-cdk/cdk.FnSelect",
      "initializer": {
        "docs": {
          "comment": "Creates an ``Fn::Select`` function."
        },
        "initializer": true,
        "parameters": [
          {
            "docs": {
              "comment": "The index of the object to retrieve. This must be a value from zero to N-1, where N represents the number of elements in the array."
            },
            "name": "index",
            "type": {
              "primitive": "number"
            }
          },
          {
            "docs": {
              "comment": "The list of objects to select from. This list must not be null, nor can it have null entries."
            },
            "name": "array",
            "type": {
              "optional": true,
              "primitive": "any"
            }
          }
        ]
      },
      "kind": "class",
      "name": "FnSelect"
    },
    "@aws-cdk/cdk.FnSplit": {
      "assembly": "@aws-cdk/cdk",
      "base": {
        "fqn": "@aws-cdk/cdk.Fn"
      },
      "docs": {
        "comment": "To split a string into a list of string values so that you can select an element from the\nresulting string list, use the ``Fn::Split`` intrinsic function. Specify the location of splits\nwith a delimiter, such as , (a comma). After you split a string, use the ``Fn::Select`` function\nto pick a specific element."
      },
      "fqn": "@aws-cdk/cdk.FnSplit",
      "initializer": {
        "docs": {
          "comment": "Create an ``Fn::Split`` function."
        },
        "initializer": true,
        "parameters": [
          {
            "docs": {
              "comment": "A string value that determines where the source string is divided."
            },
            "name": "delimiter",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "comment": "The string value that you want to split."
            },
            "name": "source",
            "type": {
              "optional": true,
              "primitive": "any"
            }
          }
        ]
      },
      "kind": "class",
      "name": "FnSplit"
    },
    "@aws-cdk/cdk.FnSub": {
      "assembly": "@aws-cdk/cdk",
      "base": {
        "fqn": "@aws-cdk/cdk.Fn"
      },
      "docs": {
        "comment": "The intrinsic function ``Fn::Sub`` substitutes variables in an input string with values that\nyou specify. In your templates, you can use this function to construct commands or outputs\nthat include values that aren't available until you create or update a stack."
      },
      "fqn": "@aws-cdk/cdk.FnSub",
      "initializer": {
        "docs": {
          "comment": "Creates an ``Fn::Sub`` function."
        },
        "initializer": true,
        "parameters": [
          {
            "docs": {
              "comment": "A string with variables that AWS CloudFormation substitutes with their\nassociated values at runtime. Write variables as ${MyVarName}. Variables\ncan be template parameter names, resource logical IDs, resource attributes,\nor a variable in a key-value map. If you specify only template parameter names,\nresource logical IDs, and resource attributes, don't specify a key-value map."
            },
            "name": "body",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "comment": "The name of a variable that you included in the String parameter.\nThe value that AWS CloudFormation substitutes for the associated variable name at runtime."
            },
            "name": "variables",
            "type": {
              "collection": {
                "elementtype": {
                  "optional": true,
                  "primitive": "any"
                },
                "kind": "map"
              },
              "optional": true
            }
          }
        ]
      },
      "kind": "class",
      "name": "FnSub"
    },
    "@aws-cdk/cdk.FnValueOf": {
      "assembly": "@aws-cdk/cdk",
      "base": {
        "fqn": "@aws-cdk/cdk.FnCondition"
      },
      "docs": {
        "comment": "Returns an attribute value or list of values for a specific parameter and attribute."
      },
      "fqn": "@aws-cdk/cdk.FnValueOf",
      "initializer": {
        "docs": {
          "comment": "Creates an ``Fn::ValueOf`` function."
        },
        "initializer": true,
        "parameters": [
          {
            "docs": {
              "comment": "The name of a parameter for which you want to retrieve attribute values. The parameter must be declared in the Parameters section of the template."
            },
            "name": "parameterOrLogicalId",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "comment": "The name of an attribute from which you want to retrieve a value."
            },
            "name": "attribute",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "kind": "class",
      "name": "FnValueOf"
    },
    "@aws-cdk/cdk.FnValueOfAll": {
      "assembly": "@aws-cdk/cdk",
      "base": {
        "fqn": "@aws-cdk/cdk.FnCondition"
      },
      "docs": {
        "comment": "Returns a list of all attribute values for a given parameter type and attribute."
      },
      "fqn": "@aws-cdk/cdk.FnValueOfAll",
      "initializer": {
        "docs": {
          "comment": "Creates an ``Fn::ValueOfAll`` function."
        },
        "initializer": true,
        "parameters": [
          {
            "docs": {
              "comment": "An AWS-specific parameter type, such as AWS::EC2::SecurityGroup::Id or AWS::EC2::VPC::Id. For more information, see Parameters in the AWS CloudFormation User Guide."
            },
            "name": "parameterType",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "comment": "The name of an attribute from which you want to retrieve a value. For more information about attributes, see Supported Attributes."
            },
            "name": "attribute",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "kind": "class",
      "name": "FnValueOfAll"
    },
    "@aws-cdk/cdk.HashedAddressingScheme": {
      "assembly": "@aws-cdk/cdk",
      "docs": {
        "comment": "Renders a hashed ID for a resource.\n\nIn order to make sure logical IDs are unique and stable, we hash the resource\nconstruct tree path (i.e. toplevel/secondlevel/.../myresource) and add it as\na suffix to the path components joined without a separator (CloudFormation\nIDs only allow alphanumeric characters).\n\nThe result will be:\n\n   <path.join('')><md5(path.join('/')>\n     \"human\"      \"hash\"\n\nIf the \"human\" part of the ID exceeds 240 characters, we simply trim it so\nthe total ID doesn't exceed CloudFormation's 255 character limit.\n\nWe only take 8 characters from the md5 hash (0.000005 chance of collision).\n\nSpecial cases:\n\n- If the path only contains a single component (i.e. it's a top-level\n   resource), we won't add the hash to it. The hash is not needed for\n   disamiguation and also, it allows for a more straightforward migration an\n   existing CloudFormation template to a CDK stack without logical ID changes\n   (or renames).\n- For aesthetic reasons, if the last components of the path are the same\n   (i.e. `L1/L2/Pipeline/Pipeline`), they will be de-duplicated to make the\n   resulting human portion of the ID more pleasing: `L1L2Pipeline<HASH>`\n   instead of `L1L2PipelinePipeline<HASH>`\n- If a component is named \"Default\" it will be omitted from the path. This\n   allows refactoring higher level abstractions around constructs without affecting\n   the IDs of already deployed resources.\n- If a component is named \"Resource\" it will be omitted from the user-visible\n   path, but included in the hash. This reduces visual noise in the human readable\n   part of the identifier."
      },
      "fqn": "@aws-cdk/cdk.HashedAddressingScheme",
      "initializer": {
        "initializer": true
      },
      "interfaces": [
        {
          "fqn": "@aws-cdk/cdk.IAddressingScheme"
        }
      ],
      "kind": "class",
      "methods": [
        {
          "docs": {
            "comment": "Return the logical ID for the given list of Construct names on the path."
          },
          "name": "allocateAddress",
          "overrides": {
            "fqn": "@aws-cdk/cdk.IAddressingScheme"
          },
          "parameters": [
            {
              "name": "addressComponents",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "string"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "returns": {
            "primitive": "string"
          }
        }
      ],
      "name": "HashedAddressingScheme"
    },
    "@aws-cdk/cdk.IAddressingScheme": {
      "assembly": "@aws-cdk/cdk",
      "docs": {
        "comment": "Interface for classes that implementation logical ID assignment strategies"
      },
      "fqn": "@aws-cdk/cdk.IAddressingScheme",
      "kind": "interface",
      "methods": [
        {
          "abstract": true,
          "docs": {
            "comment": "Return the logical ID for the given list of Construct names on the path."
          },
          "name": "allocateAddress",
          "parameters": [
            {
              "name": "addressComponents",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "string"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "returns": {
            "primitive": "string"
          }
        }
      ],
      "name": "IAddressingScheme"
    },
    "@aws-cdk/cdk.IDependable": {
      "assembly": "@aws-cdk/cdk",
      "docs": {
        "comment": "Represents a construct that can be \"depended on\" via `addDependency`."
      },
      "fqn": "@aws-cdk/cdk.IDependable",
      "kind": "interface",
      "name": "IDependable",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "Returns the set of all stack elements (resources, parameters, conditions)\nthat should be added when a resource \"depends on\" this construct."
          },
          "immutable": true,
          "name": "dependencyElements",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/cdk.IDependable"
              },
              "kind": "array"
            }
          }
        }
      ]
    },
    "@aws-cdk/cdk.ITaggable": {
      "assembly": "@aws-cdk/cdk",
      "docs": {
        "comment": "ITaggable indicates a entity manages tags via the `tags` property"
      },
      "fqn": "@aws-cdk/cdk.ITaggable",
      "kind": "interface",
      "name": "ITaggable",
      "properties": [
        {
          "abstract": true,
          "immutable": true,
          "name": "tags",
          "type": {
            "fqn": "@aws-cdk/cdk.TagManager"
          }
        }
      ]
    },
    "@aws-cdk/cdk.ITokenJoiner": {
      "assembly": "@aws-cdk/cdk",
      "docs": {
        "comment": "Interface that Token joiners implement"
      },
      "fqn": "@aws-cdk/cdk.ITokenJoiner",
      "kind": "interface",
      "methods": [
        {
          "abstract": true,
          "docs": {
            "comment": "Return the language intrinsic that will combine the strings in the given engine"
          },
          "name": "join",
          "parameters": [
            {
              "name": "fragments",
              "type": {
                "collection": {
                  "elementtype": {
                    "optional": true,
                    "primitive": "any"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "returns": {
            "optional": true,
            "primitive": "any"
          }
        }
      ],
      "name": "ITokenJoiner",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "The name of the joiner.\n\nMust be unique per joiner: this value will be used to assert that there\nis exactly only type of joiner in a join operation."
          },
          "name": "id",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/cdk.Include": {
      "assembly": "@aws-cdk/cdk",
      "base": {
        "fqn": "@aws-cdk/cdk.StackElement"
      },
      "docs": {
        "comment": "Includes a CloudFormation template into a stack. All elements of the template will be merged into\nthe current stack, together with any elements created programmatically."
      },
      "fqn": "@aws-cdk/cdk.Include",
      "initializer": {
        "docs": {
          "comment": "Creates an adopted template construct. The template will be incorporated into the stack as-is with no changes at all.\nThis means that logical IDs of entities within this template may conflict with logical IDs of entities that are part of the\nstack."
        },
        "initializer": true,
        "parameters": [
          {
            "docs": {
              "comment": "The parent construct of this template"
            },
            "name": "parent",
            "type": {
              "fqn": "@aws-cdk/cdk.Construct"
            }
          },
          {
            "name": "name",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/cdk.IncludeProps"
            }
          }
        ]
      },
      "kind": "class",
      "methods": [
        {
          "docs": {
            "comment": "Returns the CloudFormation 'snippet' for this entity. The snippet will only be merged\nat the root level to ensure there are no identity conflicts.\n\nFor example, a Resource class will return something like:\n{\n   Resources: {\n     [this.logicalId]: {\n       Type: this.resourceType,\n       Properties: this.props,\n       Condition: this.condition\n     }\n   }\n}"
          },
          "name": "toCloudFormation",
          "overrides": {
            "fqn": "@aws-cdk/cdk.StackElement"
          },
          "returns": {
            "primitive": "json"
          }
        }
      ],
      "name": "Include",
      "properties": [
        {
          "docs": {
            "comment": "The included template."
          },
          "immutable": true,
          "name": "template",
          "type": {
            "primitive": "json"
          }
        }
      ]
    },
    "@aws-cdk/cdk.IncludeProps": {
      "assembly": "@aws-cdk/cdk",
      "datatype": true,
      "fqn": "@aws-cdk/cdk.IncludeProps",
      "kind": "interface",
      "name": "IncludeProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "The CloudFormation template to include in the stack (as is)."
          },
          "name": "template",
          "type": {
            "primitive": "json"
          }
        }
      ]
    },
    "@aws-cdk/cdk.LogicalIDs": {
      "assembly": "@aws-cdk/cdk",
      "docs": {
        "comment": "Class that keeps track of the logical IDs that are assigned to resources\n\nSupports renaming the generated IDs."
      },
      "fqn": "@aws-cdk/cdk.LogicalIDs",
      "initializer": {
        "initializer": true,
        "parameters": [
          {
            "name": "namingScheme",
            "type": {
              "fqn": "@aws-cdk/cdk.IAddressingScheme"
            }
          }
        ]
      },
      "kind": "class",
      "methods": [
        {
          "docs": {
            "comment": "Throw an error if not all renames have been used\n\nThis is to assure that users didn't make typoes when registering renames."
          },
          "name": "assertAllRenamesApplied"
        },
        {
          "docs": {
            "comment": "Return the logical ID for the given stack element"
          },
          "name": "getLogicalId",
          "parameters": [
            {
              "name": "stackElement",
              "type": {
                "fqn": "@aws-cdk/cdk.StackElement"
              }
            }
          ],
          "returns": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "Rename a logical ID from an old ID to a new ID"
          },
          "name": "renameLogical",
          "parameters": [
            {
              "name": "oldId",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "newId",
              "type": {
                "primitive": "string"
              }
            }
          ]
        }
      ],
      "name": "LogicalIDs",
      "properties": [
        {
          "immutable": true,
          "name": "namingScheme",
          "type": {
            "fqn": "@aws-cdk/cdk.IAddressingScheme"
          }
        }
      ]
    },
    "@aws-cdk/cdk.Mapping": {
      "assembly": "@aws-cdk/cdk",
      "base": {
        "fqn": "@aws-cdk/cdk.Referenceable"
      },
      "docs": {
        "comment": "Represents a CloudFormation mapping."
      },
      "fqn": "@aws-cdk/cdk.Mapping",
      "initializer": {
        "initializer": true,
        "parameters": [
          {
            "name": "parent",
            "type": {
              "fqn": "@aws-cdk/cdk.Construct"
            }
          },
          {
            "name": "name",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/cdk.MappingProps"
            }
          }
        ]
      },
      "kind": "class",
      "methods": [
        {
          "docs": {
            "return": "A reference to a value in the map based on the two keys."
          },
          "name": "findInMap",
          "parameters": [
            {
              "name": "key1",
              "type": {
                "optional": true,
                "primitive": "any"
              }
            },
            {
              "name": "key2",
              "type": {
                "optional": true,
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "fqn": "@aws-cdk/cdk.FnFindInMap"
          }
        },
        {
          "docs": {
            "comment": "Sets a value in the map based on the two keys."
          },
          "name": "setValue",
          "parameters": [
            {
              "name": "key1",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "key2",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "optional": true,
                "primitive": "any"
              }
            }
          ]
        },
        {
          "docs": {
            "comment": "Returns the CloudFormation 'snippet' for this entity. The snippet will only be merged\nat the root level to ensure there are no identity conflicts.\n\nFor example, a Resource class will return something like:\n{\n   Resources: {\n     [this.logicalId]: {\n       Type: this.resourceType,\n       Properties: this.props,\n       Condition: this.condition\n     }\n   }\n}"
          },
          "name": "toCloudFormation",
          "overrides": {
            "fqn": "@aws-cdk/cdk.StackElement"
          },
          "returns": {
            "primitive": "json"
          }
        }
      ],
      "name": "Mapping"
    },
    "@aws-cdk/cdk.MappingProps": {
      "assembly": "@aws-cdk/cdk",
      "datatype": true,
      "fqn": "@aws-cdk/cdk.MappingProps",
      "kind": "interface",
      "name": "MappingProps",
      "properties": [
        {
          "abstract": true,
          "name": "mapping",
          "type": {
            "collection": {
              "elementtype": {
                "collection": {
                  "elementtype": {
                    "optional": true,
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              },
              "kind": "map"
            },
            "optional": true
          }
        }
      ]
    },
    "@aws-cdk/cdk.MetadataEntry": {
      "assembly": "@aws-cdk/cdk",
      "datatype": true,
      "docs": {
        "comment": "An metadata entry in the construct."
      },
      "fqn": "@aws-cdk/cdk.MetadataEntry",
      "kind": "interface",
      "name": "MetadataEntry",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "A stack trace for when the entry was created."
          },
          "name": "trace",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "The type of the metadata entry."
          },
          "name": "type",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "The data."
          },
          "name": "data",
          "type": {
            "optional": true,
            "primitive": "any"
          }
        }
      ]
    },
    "@aws-cdk/cdk.Output": {
      "assembly": "@aws-cdk/cdk",
      "base": {
        "fqn": "@aws-cdk/cdk.StackElement"
      },
      "fqn": "@aws-cdk/cdk.Output",
      "initializer": {
        "docs": {
          "comment": "Creates an Output value for this stack."
        },
        "initializer": true,
        "parameters": [
          {
            "docs": {
              "comment": "The parent construct."
            },
            "name": "parent",
            "type": {
              "fqn": "@aws-cdk/cdk.Construct"
            }
          },
          {
            "name": "name",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "comment": "Output properties."
            },
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/cdk.OutputProps",
              "optional": true
            }
          }
        ]
      },
      "kind": "class",
      "methods": [
        {
          "docs": {
            "comment": "Returns an FnImportValue bound to this export name."
          },
          "name": "makeImportValue",
          "returns": {
            "fqn": "@aws-cdk/cdk.FnImportValue"
          }
        },
        {
          "docs": {
            "comment": "Returns the CloudFormation 'snippet' for this entity. The snippet will only be merged\nat the root level to ensure there are no identity conflicts.\n\nFor example, a Resource class will return something like:\n{\n   Resources: {\n     [this.logicalId]: {\n       Type: this.resourceType,\n       Properties: this.props,\n       Condition: this.condition\n     }\n   }\n}"
          },
          "name": "toCloudFormation",
          "overrides": {
            "fqn": "@aws-cdk/cdk.StackElement"
          },
          "returns": {
            "primitive": "json"
          }
        }
      ],
      "name": "Output",
      "properties": [
        {
          "immutable": true,
          "name": "ref",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "A condition from the \"Conditions\" section to associate with this output\nvalue. If the condition evaluates to `false`, this output value will not\nbe included in the stack."
          },
          "immutable": true,
          "name": "condition",
          "type": {
            "fqn": "@aws-cdk/cdk.Condition",
            "optional": true
          }
        },
        {
          "docs": {
            "comment": "A String type that describes the output value.\nThe description can be a maximum of 4 K in length."
          },
          "immutable": true,
          "name": "description",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "The name of the resource output to be exported for a cross-stack reference.\nBy default, the logical ID of the Output element is used as it's export name."
          },
          "immutable": true,
          "name": "export",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "The value of the property returned by the aws cloudformation describe-stacks command.\nThe value of an output can include literals, parameter references, pseudo-parameters,\na mapping value, or intrinsic functions."
          },
          "immutable": true,
          "name": "value",
          "type": {
            "optional": true,
            "primitive": "any"
          }
        }
      ]
    },
    "@aws-cdk/cdk.OutputProps": {
      "assembly": "@aws-cdk/cdk",
      "datatype": true,
      "fqn": "@aws-cdk/cdk.OutputProps",
      "kind": "interface",
      "name": "OutputProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "A condition from the \"Conditions\" section to associate with this output\nvalue. If the condition evaluates to `false`, this output value will not\nbe included in the stack."
          },
          "name": "condition",
          "type": {
            "fqn": "@aws-cdk/cdk.Condition",
            "optional": true
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "A String type that describes the output value.\nThe description can be a maximum of 4 K in length."
          },
          "name": "description",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "Disables the automatic allocation of an export name for this output.",
            "default": "false, which means that an export name is either explicitly\nspecified or allocated based on the output's logical ID and stack name."
          },
          "name": "disableExport",
          "type": {
            "optional": true,
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "The name used to export the value of this output across stacks. To import\nthe value from another stack, use `FnImportValue(export)`. You can create\nan import value token by calling `output.makeImportValue()`.",
            "default": "The default behavior is to automatically allocate an export name\nfor outputs based on the stack name and the output's logical ID. To\ncreate an output without an export, set `disableExport: true`."
          },
          "name": "export",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "The value of the property returned by the aws cloudformation describe-stacks command.\nThe value of an output can include literals, parameter references, pseudo-parameters,\na mapping value, or intrinsic functions."
          },
          "name": "value",
          "type": {
            "optional": true,
            "primitive": "any"
          }
        }
      ]
    },
    "@aws-cdk/cdk.Parameter": {
      "assembly": "@aws-cdk/cdk",
      "base": {
        "fqn": "@aws-cdk/cdk.Referenceable"
      },
      "docs": {
        "comment": "Use the optional Parameters section to customize your templates.\nParameters enable you to input custom values to your template each time you create or\nupdate a stack."
      },
      "fqn": "@aws-cdk/cdk.Parameter",
      "initializer": {
        "docs": {
          "comment": "Creates a parameter construct.\nNote that the name (logical ID) of the parameter will derive from it's `coname` and location\nwithin the stack. Therefore, it is recommended that parameters are defined at the stack level."
        },
        "initializer": true,
        "parameters": [
          {
            "docs": {
              "comment": "The parent construct."
            },
            "name": "parent",
            "type": {
              "fqn": "@aws-cdk/cdk.Construct"
            }
          },
          {
            "name": "name",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "comment": "The parameter properties."
            },
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/cdk.ParameterProps"
            }
          }
        ]
      },
      "kind": "class",
      "methods": [
        {
          "docs": {
            "comment": "Allows using parameters as tokens without the need to dereference them.\nThis implicitly implements Token, until we make it an interface."
          },
          "name": "resolve",
          "returns": {
            "optional": true,
            "primitive": "any"
          }
        },
        {
          "docs": {
            "comment": "Returns the CloudFormation 'snippet' for this entity. The snippet will only be merged\nat the root level to ensure there are no identity conflicts.\n\nFor example, a Resource class will return something like:\n{\n   Resources: {\n     [this.logicalId]: {\n       Type: this.resourceType,\n       Properties: this.props,\n       Condition: this.condition\n     }\n   }\n}"
          },
          "name": "toCloudFormation",
          "overrides": {
            "fqn": "@aws-cdk/cdk.StackElement"
          },
          "returns": {
            "primitive": "json"
          }
        }
      ],
      "name": "Parameter",
      "properties": [
        {
          "docs": {
            "comment": "A token that represents the actual value of this parameter."
          },
          "name": "value",
          "type": {
            "fqn": "@aws-cdk/cdk.Token"
          }
        }
      ]
    },
    "@aws-cdk/cdk.ParameterProps": {
      "assembly": "@aws-cdk/cdk",
      "datatype": true,
      "fqn": "@aws-cdk/cdk.ParameterProps",
      "kind": "interface",
      "name": "ParameterProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "The data type for the parameter (DataType)."
          },
          "name": "type",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "A regular expression that represents the patterns to allow for String types."
          },
          "name": "allowedPattern",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "An array containing the list of values allowed for the parameter."
          },
          "name": "allowedValues",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            },
            "optional": true
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "A string that explains a constraint when the constraint is violated.\nFor example, without a constraint description, a parameter that has an allowed\npattern of [A-Za-z0-9]+ displays the following error message when the user specifies\nan invalid value:"
          },
          "name": "constraintDescription",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "A value of the appropriate type for the template to use if no value is specified\nwhen a stack is created. If you define constraints for the parameter, you must specify\na value that adheres to those constraints."
          },
          "name": "default",
          "type": {
            "optional": true,
            "primitive": "any"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "A string of up to 4000 characters that describes the parameter."
          },
          "name": "description",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "An integer value that determines the largest number of characters you want to allow for String types."
          },
          "name": "maxLength",
          "type": {
            "optional": true,
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "A numeric value that determines the largest numeric value you want to allow for Number types."
          },
          "name": "maxValue",
          "type": {
            "optional": true,
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "An integer value that determines the smallest number of characters you want to allow for String types."
          },
          "name": "minLength",
          "type": {
            "optional": true,
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "A numeric value that determines the smallest numeric value you want to allow for Number types."
          },
          "name": "minValue",
          "type": {
            "optional": true,
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "Whether to mask the parameter value when anyone makes a call that describes the stack.\nIf you set the value to ``true``, the parameter value is masked with asterisks (``*****``)."
          },
          "name": "noEcho",
          "type": {
            "optional": true,
            "primitive": "boolean"
          }
        }
      ]
    },
    "@aws-cdk/cdk.PseudoParameter": {
      "assembly": "@aws-cdk/cdk",
      "base": {
        "fqn": "@aws-cdk/cdk.CloudFormationToken"
      },
      "fqn": "@aws-cdk/cdk.PseudoParameter",
      "initializer": {
        "initializer": true,
        "parameters": [
          {
            "name": "name",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "kind": "class",
      "name": "PseudoParameter"
    },
    "@aws-cdk/cdk.Ref": {
      "assembly": "@aws-cdk/cdk",
      "base": {
        "fqn": "@aws-cdk/cdk.CloudFormationToken"
      },
      "docs": {
        "comment": "A generic, untyped reference to a Stack Element"
      },
      "fqn": "@aws-cdk/cdk.Ref",
      "initializer": {
        "initializer": true,
        "parameters": [
          {
            "name": "element",
            "type": {
              "fqn": "@aws-cdk/cdk.StackElement"
            }
          }
        ]
      },
      "kind": "class",
      "name": "Ref"
    },
    "@aws-cdk/cdk.Referenceable": {
      "abstract": true,
      "assembly": "@aws-cdk/cdk",
      "base": {
        "fqn": "@aws-cdk/cdk.StackElement"
      },
      "docs": {
        "comment": "Base class for referenceable CloudFormation constructs which are not Resources\n\nThese constructs are things like Conditions and Parameters, can be\nreferenced by taking the `.ref` attribute.\n\nResource constructs do not inherit from Referenceable because they have their\nown, more specific types returned from the .ref attribute. Also, some\nresources aren't referenceable at all (such as BucketPolicies or GatewayAttachments)."
      },
      "fqn": "@aws-cdk/cdk.Referenceable",
      "initializer": {
        "docs": {
          "comment": "Creates an entity and binds it to a tree.\nNote that the root of the tree must be a Stack object (not just any Root)."
        },
        "initializer": true,
        "parameters": [
          {
            "docs": {
              "comment": "The parent construct"
            },
            "name": "parent",
            "type": {
              "fqn": "@aws-cdk/cdk.Construct"
            }
          },
          {
            "name": "name",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "kind": "class",
      "name": "Referenceable",
      "properties": [
        {
          "docs": {
            "comment": "Returns a token to a CloudFormation { Ref } that references this entity based on it's logical ID."
          },
          "immutable": true,
          "name": "ref",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/cdk.RemovalPolicy": {
      "assembly": "@aws-cdk/cdk",
      "fqn": "@aws-cdk/cdk.RemovalPolicy",
      "kind": "enum",
      "members": [
        {
          "docs": {
            "comment": "This is the default removal policy for most resources. It means that when the resource\nis removed from the app, it will be physically destroyed."
          },
          "name": "Destroy"
        },
        {
          "docs": {
            "comment": "This uses the 'Retain' DeletionPolicy, which will cause the resource to be retained\nin the account, but orphaned from the stack."
          },
          "name": "Orphan"
        },
        {
          "docs": {
            "comment": "This will apply the 'Retain' DeletionPolicy and also add metadata for the toolkit\nto apply a CloudFormation stack policy which forbids the deletion of resource."
          },
          "name": "Forbid"
        }
      ],
      "name": "RemovalPolicy"
    },
    "@aws-cdk/cdk.RemoveProps": {
      "assembly": "@aws-cdk/cdk",
      "datatype": true,
      "docs": {
        "comment": "Properties for removing tags"
      },
      "fqn": "@aws-cdk/cdk.RemoveProps",
      "kind": "interface",
      "name": "RemoveProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "If true prevent this tag form being set via propagation",
            "default": "true"
          },
          "name": "blockPropagate",
          "type": {
            "optional": true,
            "primitive": "boolean"
          }
        }
      ]
    },
    "@aws-cdk/cdk.Resource": {
      "assembly": "@aws-cdk/cdk",
      "base": {
        "fqn": "@aws-cdk/cdk.Referenceable"
      },
      "docs": {
        "comment": "Represents a CloudFormation resource."
      },
      "fqn": "@aws-cdk/cdk.Resource",
      "initializer": {
        "docs": {
          "comment": "Creates a resource construct."
        },
        "initializer": true,
        "parameters": [
          {
            "name": "parent",
            "type": {
              "fqn": "@aws-cdk/cdk.Construct"
            }
          },
          {
            "name": "name",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/cdk.ResourceProps"
            }
          }
        ]
      },
      "kind": "class",
      "methods": [
        {
          "docs": {
            "comment": "A decoration used to create a CloudFormation attribute property."
          },
          "name": "attribute",
          "parameters": [
            {
              "docs": {
                "comment": "Custom name for the attribute (default is the name of the property)\nNOTE: we return \"any\" here to satistfy jsii, which doesn't support lambdas."
              },
              "name": "customName",
              "type": {
                "optional": true,
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "optional": true,
            "primitive": "any"
          },
          "static": true
        },
        {
          "docs": {
            "comment": "Syntactic sugar for `addOverride(path, undefined)`."
          },
          "name": "addDeletionOverride",
          "parameters": [
            {
              "docs": {
                "comment": "The path of the value to delete"
              },
              "name": "path",
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "docs": {
            "comment": "Adds a dependency on another resource."
          },
          "name": "addDependency",
          "parameters": [
            {
              "docs": {
                "comment": "The other resource."
              },
              "name": "other",
              "type": {
                "fqn": "@aws-cdk/cdk.IDependable"
              },
              "variadic": true
            }
          ],
          "variadic": true
        },
        {
          "docs": {
            "comment": "Adds an override to the synthesized CloudFormation resource. To add a\nproperty override, either use `addPropertyOverride` or prefix `path` with\n\"Properties.\" (i.e. `Properties.TopicName`)."
          },
          "name": "addOverride",
          "parameters": [
            {
              "docs": {
                "comment": "The path of the property, you can use dot notation to\noverride values in complex types. Any intermdediate keys\nwill be created as needed."
              },
              "name": "path",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "comment": "The value. Could be primitive or complex."
              },
              "name": "value",
              "type": {
                "optional": true,
                "primitive": "any"
              }
            }
          ]
        },
        {
          "docs": {
            "comment": "Adds an override that deletes the value of a property from the resource definition."
          },
          "name": "addPropertyDeletionOverride",
          "parameters": [
            {
              "docs": {
                "comment": "The path to the property."
              },
              "name": "propertyPath",
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "docs": {
            "comment": "Adds an override to a resource property.\n\nSyntactic sugar for `addOverride(\"Properties.<...>\", value)`."
          },
          "name": "addPropertyOverride",
          "parameters": [
            {
              "docs": {
                "comment": "The path of the property"
              },
              "name": "propertyPath",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "comment": "The value"
              },
              "name": "value",
              "type": {
                "optional": true,
                "primitive": "any"
              }
            }
          ]
        },
        {
          "docs": {
            "comment": "Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. `resource.arn`), but this can be used for future compatibility\nin case there is no generated attribute."
          },
          "name": "getAtt",
          "parameters": [
            {
              "docs": {
                "comment": "The name of the attribute."
              },
              "name": "attributeName",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "fqn": "@aws-cdk/cdk.CloudFormationToken"
          }
        },
        {
          "name": "renderProperties",
          "parameters": [
            {
              "name": "properties",
              "type": {
                "optional": true,
                "primitive": "any"
              }
            }
          ],
          "protected": true,
          "returns": {
            "collection": {
              "elementtype": {
                "optional": true,
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "comment": "Emits CloudFormation for this resource."
          },
          "name": "toCloudFormation",
          "overrides": {
            "fqn": "@aws-cdk/cdk.StackElement"
          },
          "returns": {
            "primitive": "json"
          }
        }
      ],
      "name": "Resource",
      "properties": [
        {
          "docs": {
            "comment": "Options for this resource, such as condition, update policy etc."
          },
          "immutable": true,
          "name": "options",
          "type": {
            "fqn": "@aws-cdk/cdk.ResourceOptions"
          }
        },
        {
          "docs": {
            "comment": "AWS resource type."
          },
          "immutable": true,
          "name": "resourceType",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "AWS resource properties.\n\nThis object is rendered via a call to \"renderProperties(this.properties)\"."
          },
          "immutable": true,
          "name": "properties",
          "protected": true,
          "type": {
            "optional": true,
            "primitive": "any"
          }
        },
        {
          "docs": {
            "comment": "AWS resource property overrides.\n\nDuring synthesis, the method \"renderProperties(this.overrides)\" is called\nwith this object, and merged on top of the output of\n\"renderProperties(this.properties)\".\n\nDerived classes should expose a strongly-typed version of this object as\na public property called `propertyOverrides`."
          },
          "immutable": true,
          "name": "untypedPropertyOverrides",
          "protected": true,
          "type": {
            "optional": true,
            "primitive": "any"
          }
        }
      ]
    },
    "@aws-cdk/cdk.ResourceOptions": {
      "assembly": "@aws-cdk/cdk",
      "datatype": true,
      "fqn": "@aws-cdk/cdk.ResourceOptions",
      "kind": "interface",
      "name": "ResourceOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "A condition to associate with this resource. This means that only if the condition evaluates to 'true' when the stack\nis deployed, the resource will be included. This is provided to allow CDK projects to produce legacy templates, but noramlly\nthere is no need to use it in CDK projects."
          },
          "name": "condition",
          "type": {
            "fqn": "@aws-cdk/cdk.Condition",
            "optional": true
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "Associate the CreationPolicy attribute with a resource to prevent its status from reaching create complete until\nAWS CloudFormation receives a specified number of success signals or the timeout period is exceeded. To signal a\nresource, you can use the cfn-signal helper script or SignalResource API. AWS CloudFormation publishes valid signals\nto the stack events so that you track the number of signals sent."
          },
          "name": "creationPolicy",
          "type": {
            "fqn": "@aws-cdk/cdk.CreationPolicy",
            "optional": true
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "With the DeletionPolicy attribute you can preserve or (in some cases) backup a resource when its stack is deleted.\nYou specify a DeletionPolicy attribute for each resource that you want to control. If a resource has no DeletionPolicy\nattribute, AWS CloudFormation deletes the resource by default. Note that this capability also applies to update operations\nthat lead to resources being removed."
          },
          "name": "deletionPolicy",
          "type": {
            "fqn": "@aws-cdk/cdk.DeletionPolicy",
            "optional": true
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "Metadata associated with the CloudFormation resource. This is not the same as the construct metadata which can be added\nusing construct.addMetadata(), but would not appear in the CloudFormation template automatically."
          },
          "name": "metadata",
          "type": {
            "collection": {
              "elementtype": {
                "optional": true,
                "primitive": "any"
              },
              "kind": "map"
            },
            "optional": true
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "Use the UpdatePolicy attribute to specify how AWS CloudFormation handles updates to the AWS::AutoScaling::AutoScalingGroup\nresource. AWS CloudFormation invokes one of three update policies depending on the type of change you make or whether a\nscheduled action is associated with the Auto Scaling group."
          },
          "name": "updatePolicy",
          "type": {
            "fqn": "@aws-cdk/cdk.UpdatePolicy",
            "optional": true
          }
        }
      ]
    },
    "@aws-cdk/cdk.ResourceProps": {
      "assembly": "@aws-cdk/cdk",
      "datatype": true,
      "fqn": "@aws-cdk/cdk.ResourceProps",
      "kind": "interface",
      "name": "ResourceProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "CloudFormation resource type."
          },
          "name": "type",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "CloudFormation properties."
          },
          "name": "properties",
          "type": {
            "optional": true,
            "primitive": "any"
          }
        }
      ]
    },
    "@aws-cdk/cdk.ResourceSignal": {
      "assembly": "@aws-cdk/cdk",
      "datatype": true,
      "docs": {
        "comment": "When AWS CloudFormation creates the associated resource, configures the number of required success signals and\nthe length of time that AWS CloudFormation waits for those signals."
      },
      "fqn": "@aws-cdk/cdk.ResourceSignal",
      "kind": "interface",
      "name": "ResourceSignal",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "The number of success signals AWS CloudFormation must receive before it sets the resource status as CREATE_COMPLETE.\nIf the resource receives a failure signal or doesn't receive the specified number of signals before the timeout period\nexpires, the resource creation fails and AWS CloudFormation rolls the stack back."
          },
          "name": "count",
          "type": {
            "optional": true,
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "The length of time that AWS CloudFormation waits for the number of signals that was specified in the Count property.\nThe timeout period starts after AWS CloudFormation starts creating the resource, and the timeout expires no sooner\nthan the time you specify but can occur shortly thereafter. The maximum time that you can specify is 12 hours."
          },
          "name": "timeout",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/cdk.Root": {
      "assembly": "@aws-cdk/cdk",
      "base": {
        "fqn": "@aws-cdk/cdk.Construct"
      },
      "docs": {
        "comment": "Represents the root of a construct tree.\nNo parent and no name."
      },
      "fqn": "@aws-cdk/cdk.Root",
      "initializer": {
        "initializer": true
      },
      "kind": "class",
      "name": "Root"
    },
    "@aws-cdk/cdk.Rule": {
      "assembly": "@aws-cdk/cdk",
      "base": {
        "fqn": "@aws-cdk/cdk.Referenceable"
      },
      "docs": {
        "comment": "The Rules that define template constraints in an AWS Service Catalog portfolio describe when\nend users can use the template and which values they can specify for parameters that are declared\nin the AWS CloudFormation template used to create the product they are attempting to use. Rules\nare useful for preventing end users from inadvertently specifying an incorrect value.\nFor example, you can add a rule to verify whether end users specified a valid subnet in a\ngiven VPC or used m1.small instance types for test environments. AWS CloudFormation uses\nrules to validate parameter values before it creates the resources for the product.\n\nA rule can include a RuleCondition property and must include an Assertions property.\nFor each rule, you can define only one rule condition; you can define one or more asserts within the Assertions property.\nYou define a rule condition and assertions by using rule-specific intrinsic functions.",
        "link": "https://docs.aws.amazon.com/servicecatalog/latest/adminguide/reference-template_constraint_rules.html"
      },
      "fqn": "@aws-cdk/cdk.Rule",
      "initializer": {
        "docs": {
          "comment": "Creates and adds a rule."
        },
        "initializer": true,
        "parameters": [
          {
            "docs": {
              "comment": "The parent construct."
            },
            "name": "parent",
            "type": {
              "fqn": "@aws-cdk/cdk.Construct"
            }
          },
          {
            "name": "name",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "comment": "The rule props."
            },
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/cdk.RuleProps",
              "optional": true
            }
          }
        ]
      },
      "kind": "class",
      "methods": [
        {
          "docs": {
            "comment": "Adds an assertion to the rule."
          },
          "name": "addAssertion",
          "parameters": [
            {
              "docs": {
                "comment": "The expression to evaluation."
              },
              "name": "condition",
              "type": {
                "fqn": "@aws-cdk/cdk.FnCondition"
              }
            },
            {
              "docs": {
                "comment": "The description of the assertion."
              },
              "name": "description",
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "docs": {
            "comment": "Returns the CloudFormation 'snippet' for this entity. The snippet will only be merged\nat the root level to ensure there are no identity conflicts.\n\nFor example, a Resource class will return something like:\n{\n   Resources: {\n     [this.logicalId]: {\n       Type: this.resourceType,\n       Properties: this.props,\n       Condition: this.condition\n     }\n   }\n}"
          },
          "name": "toCloudFormation",
          "overrides": {
            "fqn": "@aws-cdk/cdk.StackElement"
          },
          "returns": {
            "primitive": "json"
          }
        }
      ],
      "name": "Rule",
      "properties": [
        {
          "docs": {
            "comment": "Assertions which define the rule."
          },
          "name": "assertions",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/cdk.RuleAssertion"
              },
              "kind": "array"
            },
            "optional": true
          }
        },
        {
          "docs": {
            "comment": "If the rule condition evaluates to false, the rule doesn't take effect.\nIf the function in the rule condition evaluates to true, expressions in each assert are evaluated and applied."
          },
          "name": "ruleCondition",
          "type": {
            "fqn": "@aws-cdk/cdk.FnCondition",
            "optional": true
          }
        }
      ]
    },
    "@aws-cdk/cdk.RuleAssertion": {
      "assembly": "@aws-cdk/cdk",
      "datatype": true,
      "docs": {
        "comment": "A rule assertion."
      },
      "fqn": "@aws-cdk/cdk.RuleAssertion",
      "kind": "interface",
      "name": "RuleAssertion",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "The assertion."
          },
          "name": "assert",
          "type": {
            "fqn": "@aws-cdk/cdk.FnCondition"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "The assertion description."
          },
          "name": "assertDescription",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/cdk.RuleProps": {
      "assembly": "@aws-cdk/cdk",
      "datatype": true,
      "docs": {
        "comment": "A rule can include a RuleCondition property and must include an Assertions property.\nFor each rule, you can define only one rule condition; you can define one or more asserts within the Assertions property.\nYou define a rule condition and assertions by using rule-specific intrinsic functions.\n\nYou can use the following rule-specific intrinsic functions to define rule conditions and assertions:\n\n  Fn::And\n  Fn::Contains\n  Fn::EachMemberEquals\n  Fn::EachMemberIn\n  Fn::Equals\n  Fn::If\n  Fn::Not\n  Fn::Or\n  Fn::RefAll\n  Fn::ValueOf\n  Fn::ValueOfAll\n\nhttps://docs.aws.amazon.com/servicecatalog/latest/adminguide/reference-template_constraint_rules.html"
      },
      "fqn": "@aws-cdk/cdk.RuleProps",
      "kind": "interface",
      "name": "RuleProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "Assertions which define the rule."
          },
          "name": "assertions",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/cdk.RuleAssertion"
              },
              "kind": "array"
            },
            "optional": true
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "If the rule condition evaluates to false, the rule doesn't take effect.\nIf the function in the rule condition evaluates to true, expressions in each assert are evaluated and applied."
          },
          "name": "ruleCondition",
          "type": {
            "fqn": "@aws-cdk/cdk.FnCondition",
            "optional": true
          }
        }
      ]
    },
    "@aws-cdk/cdk.SSMParameterProvider": {
      "assembly": "@aws-cdk/cdk",
      "docs": {
        "comment": "Context provider that will read values from the SSM parameter store in the indicated account and region"
      },
      "fqn": "@aws-cdk/cdk.SSMParameterProvider",
      "initializer": {
        "initializer": true,
        "parameters": [
          {
            "name": "context",
            "type": {
              "fqn": "@aws-cdk/cdk.Construct"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/cdk.SSMParameterProviderProps"
            }
          }
        ]
      },
      "kind": "class",
      "methods": [
        {
          "docs": {
            "comment": "Return the SSM parameter string with the indicated key"
          },
          "name": "parameterValue",
          "parameters": [
            {
              "name": "defaultValue",
              "type": {
                "optional": true,
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "optional": true,
            "primitive": "any"
          }
        }
      ],
      "name": "SSMParameterProvider"
    },
    "@aws-cdk/cdk.SSMParameterProviderProps": {
      "assembly": "@aws-cdk/cdk",
      "datatype": true,
      "fqn": "@aws-cdk/cdk.SSMParameterProviderProps",
      "kind": "interface",
      "name": "SSMParameterProviderProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "The name of the parameter to lookup"
          },
          "name": "parameterName",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/cdk.Secret": {
      "assembly": "@aws-cdk/cdk",
      "base": {
        "fqn": "@aws-cdk/cdk.Token"
      },
      "docs": {
        "comment": "A token that represents a value that's expected to be a secret, like\npasswords and keys.\n\nIt is recommended to use the `SecretParameter` construct in order to import\nsecret values from the SSM Parameter Store instead of storing them in your\ncode.\n\nHowever, you can also just pass in values, like any other token: `new Secret('bla')`"
      },
      "fqn": "@aws-cdk/cdk.Secret",
      "initializer": {
        "docs": {
          "comment": "Creates a token that resolves to `value`.\n\nIf value is a function, the function is evaluated upon resolution and\nthe value it returns will be used as the token's value.\n\ndisplayName is used to represent the Token when it's embedded into a string; it\nwill look something like this:\n\n    \"embedded in a larger string is ${Token[DISPLAY_NAME.123]}\"\n\nThis value is used as a hint to humans what the meaning of the Token is,\nand does not have any effect on the evaluation.\n\nMust contain only alphanumeric and simple separator characters (_.:-)."
        },
        "initializer": true,
        "parameters": [
          {
            "docs": {
              "comment": "What this token will evaluate to, literal or function."
            },
            "name": "valueOrFunction",
            "type": {
              "optional": true,
              "primitive": "any"
            }
          },
          {
            "docs": {
              "comment": "A human-readable display hint for this Token"
            },
            "name": "displayName",
            "type": {
              "optional": true,
              "primitive": "string"
            }
          }
        ]
      },
      "kind": "class",
      "name": "Secret"
    },
    "@aws-cdk/cdk.SecretParameter": {
      "assembly": "@aws-cdk/cdk",
      "base": {
        "fqn": "@aws-cdk/cdk.Construct"
      },
      "docs": {
        "comment": "Defines a secret value resolved from the Systems Manager (SSM) Parameter\nStore during deployment. This is useful for referencing values that you do\nnot wish to include in your code base, such as secrets, passwords and keys.\n\nThis construct will add a CloudFormation parameter to your template bound to\nan SSM parameter (of type \"AWS::SSM::Parameter::Value<String>\"). Deployment\nwill fail if the value doesn't exist in the target environment.\n\nImportant: For values other than secrets, prefer to use the\n`SSMParameterProvider` which resolves SSM parameter in design-time, and\nensures that stack deployments are deterministic."
      },
      "fqn": "@aws-cdk/cdk.SecretParameter",
      "initializer": {
        "initializer": true,
        "parameters": [
          {
            "name": "parent",
            "type": {
              "fqn": "@aws-cdk/cdk.Construct"
            }
          },
          {
            "name": "name",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/cdk.SecretProps"
            }
          }
        ]
      },
      "kind": "class",
      "name": "SecretParameter",
      "properties": [
        {
          "docs": {
            "comment": "The value of the secret parameter."
          },
          "name": "value",
          "type": {
            "fqn": "@aws-cdk/cdk.Secret"
          }
        }
      ]
    },
    "@aws-cdk/cdk.SecretProps": {
      "assembly": "@aws-cdk/cdk",
      "datatype": true,
      "fqn": "@aws-cdk/cdk.SecretProps",
      "kind": "interface",
      "name": "SecretProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "The name of the SSM parameter where the secret value is stored."
          },
          "name": "ssmParameter",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "A regular expression that represents the patterns to allow for String types."
          },
          "name": "allowedPattern",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "An array containing the list of values allowed for the parameter."
          },
          "name": "allowedValues",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            },
            "optional": true
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "A string that explains a constraint when the constraint is violated.\nFor example, without a constraint description, a parameter that has an allowed\npattern of [A-Za-z0-9]+ displays the following error message when the user specifies\nan invalid value:"
          },
          "name": "constraintDescription",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "A string of up to 4000 characters that describes the parameter.",
            "default": "No description"
          },
          "name": "description",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "An integer value that determines the largest number of characters you want to allow for String types."
          },
          "name": "maxLength",
          "type": {
            "optional": true,
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "An integer value that determines the smallest number of characters you want to allow for String types."
          },
          "name": "minLength",
          "type": {
            "optional": true,
            "primitive": "number"
          }
        }
      ]
    },
    "@aws-cdk/cdk.Stack": {
      "assembly": "@aws-cdk/cdk",
      "base": {
        "fqn": "@aws-cdk/cdk.Construct"
      },
      "docs": {
        "comment": "A root construct which represents a single CloudFormation stack."
      },
      "fqn": "@aws-cdk/cdk.Stack",
      "initializer": {
        "docs": {
          "comment": "Creates a new stack."
        },
        "initializer": true,
        "parameters": [
          {
            "docs": {
              "comment": "Parent of this stack, usually a Program instance."
            },
            "name": "parent",
            "type": {
              "fqn": "@aws-cdk/cdk.App",
              "optional": true
            }
          },
          {
            "docs": {
              "comment": "The name of the CloudFormation stack. Defaults to \"Stack\"."
            },
            "name": "name",
            "type": {
              "optional": true,
              "primitive": "string"
            }
          },
          {
            "docs": {
              "comment": "Stack properties."
            },
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/cdk.StackProps",
              "optional": true
            }
          }
        ]
      },
      "kind": "class",
      "methods": [
        {
          "docs": {
            "comment": "Adds a metadata annotation \"aws:cdk:physical-name\" to the construct if physicalName\nis non-null. This can be used later by tools and aspects to determine if resources\nhave been created with physical names."
          },
          "name": "annotatePhysicalName",
          "parameters": [
            {
              "name": "construct",
              "type": {
                "fqn": "@aws-cdk/cdk.Construct"
              }
            },
            {
              "name": "physicalName",
              "type": {
                "optional": true,
                "primitive": "string"
              }
            }
          ],
          "static": true
        },
        {
          "docs": {
            "comment": "Traverses the tree and looks up for the Stack root.",
            "return": "The Stack object (throws if the node is not part of a Stack-rooted tree)"
          },
          "name": "find",
          "parameters": [
            {
              "docs": {
                "comment": "A construct in the tree"
              },
              "name": "node",
              "type": {
                "fqn": "@aws-cdk/cdk.Construct"
              }
            }
          ],
          "returns": {
            "fqn": "@aws-cdk/cdk.Stack"
          },
          "static": true
        },
        {
          "docs": {
            "comment": "Looks up a resource by path.",
            "return": "The Resource or undefined if not found"
          },
          "name": "findResource",
          "parameters": [
            {
              "name": "path",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "fqn": "@aws-cdk/cdk.Resource",
            "optional": true
          }
        },
        {
          "docs": {
            "comment": "Rename a generated logical identities"
          },
          "name": "renameLogical",
          "parameters": [
            {
              "name": "oldId",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "newId",
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "docs": {
            "comment": "Indicate that a context key was expected\n\nContains instructions on how the key should be supplied."
          },
          "name": "reportMissingContext",
          "parameters": [
            {
              "docs": {
                "comment": "Key that uniquely identifies this missing context."
              },
              "name": "key",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "comment": "The set of parameters needed to obtain the context (specific to context provider)."
              },
              "name": "details",
              "type": {
                "fqn": "@aws-cdk/cx-api.MissingContext"
              }
            }
          ]
        },
        {
          "docs": {
            "return": "The region in which this stack is deployed. Throws if region is not defined."
          },
          "name": "requireRegion",
          "parameters": [
            {
              "docs": {
                "comment": "more information about why region is required."
              },
              "name": "why",
              "type": {
                "optional": true,
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "Returns the CloudFormation template for this stack by traversing\nthe tree and invoking toCloudFormation() on all Entity objects."
          },
          "name": "toCloudFormation",
          "returns": {
            "optional": true,
            "primitive": "any"
          }
        }
      ],
      "name": "Stack",
      "properties": [
        {
          "docs": {
            "comment": "The environment in which this stack is deployed."
          },
          "immutable": true,
          "name": "env",
          "type": {
            "fqn": "@aws-cdk/cdk.Environment"
          }
        },
        {
          "docs": {
            "comment": "Used to determine if this construct is a stack."
          },
          "immutable": true,
          "name": "isStack",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "comment": "Logical ID generation strategy"
          },
          "immutable": true,
          "name": "logicalIds",
          "type": {
            "fqn": "@aws-cdk/cdk.LogicalIDs"
          }
        },
        {
          "docs": {
            "comment": "Lists all missing contextual information.\nThis is returned when the stack is synthesized under the 'missing' attribute\nand allows tooling to obtain the context and re-synthesize."
          },
          "immutable": true,
          "name": "missingContext",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/cx-api.MissingContext"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "comment": "The CloudFormation stack name."
          },
          "immutable": true,
          "name": "name",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "Options for CloudFormation template (like version, transform, description)."
          },
          "immutable": true,
          "name": "templateOptions",
          "type": {
            "fqn": "@aws-cdk/cdk.TemplateOptions"
          }
        }
      ]
    },
    "@aws-cdk/cdk.StackElement": {
      "abstract": true,
      "assembly": "@aws-cdk/cdk",
      "base": {
        "fqn": "@aws-cdk/cdk.Construct"
      },
      "docs": {
        "comment": "An element of a CloudFormation stack."
      },
      "fqn": "@aws-cdk/cdk.StackElement",
      "initializer": {
        "docs": {
          "comment": "Creates an entity and binds it to a tree.\nNote that the root of the tree must be a Stack object (not just any Root)."
        },
        "initializer": true,
        "parameters": [
          {
            "docs": {
              "comment": "The parent construct"
            },
            "name": "parent",
            "type": {
              "fqn": "@aws-cdk/cdk.Construct"
            }
          },
          {
            "name": "name",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "interfaces": [
        {
          "fqn": "@aws-cdk/cdk.IDependable"
        }
      ],
      "kind": "class",
      "methods": [
        {
          "abstract": true,
          "docs": {
            "comment": "Returns the CloudFormation 'snippet' for this entity. The snippet will only be merged\nat the root level to ensure there are no identity conflicts.\n\nFor example, a Resource class will return something like:\n{\n   Resources: {\n     [this.logicalId]: {\n       Type: this.resourceType,\n       Properties: this.props,\n       Condition: this.condition\n     }\n   }\n}"
          },
          "name": "toCloudFormation",
          "returns": {
            "primitive": "json"
          }
        }
      ],
      "name": "StackElement",
      "properties": [
        {
          "docs": {
            "return": "the stack trace of the point where this Resource was created from, sourced\nfrom the +metadata+ entry typed +aws:cdk:logicalId+, and with the bottom-most\nnode +internal+ entries filtered."
          },
          "immutable": true,
          "name": "creationStackTrace",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "comment": "Returns the set of all stack elements (resources, parameters, conditions)\nthat should be added when a resource \"depends on\" this construct."
          },
          "immutable": true,
          "name": "dependencyElements",
          "overrides": {
            "fqn": "@aws-cdk/cdk.IDependable"
          },
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/cdk.IDependable"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "comment": "The logical ID for this CloudFormation stack element"
          },
          "immutable": true,
          "name": "logicalId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "Return the path with respect to the stack"
          },
          "immutable": true,
          "name": "stackPath",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "The stack this Construct has been made a part of"
          },
          "name": "stack",
          "protected": true,
          "type": {
            "fqn": "@aws-cdk/cdk.Stack"
          }
        }
      ]
    },
    "@aws-cdk/cdk.StackProps": {
      "assembly": "@aws-cdk/cdk",
      "datatype": true,
      "fqn": "@aws-cdk/cdk.StackProps",
      "kind": "interface",
      "name": "StackProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "The AWS environment (account/region) where this stack will be deployed.\n\nIf not supplied, the `default-account` and `default-region` context parameters will be\nused. If they are undefined, it will not be possible to deploy the stack."
          },
          "name": "env",
          "type": {
            "fqn": "@aws-cdk/cdk.Environment",
            "optional": true
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "Strategy for logical ID generation\n\nOptional. If not supplied, the HashedNamingScheme will be used."
          },
          "name": "namingScheme",
          "type": {
            "fqn": "@aws-cdk/cdk.IAddressingScheme",
            "optional": true
          }
        }
      ]
    },
    "@aws-cdk/cdk.StringListOutput": {
      "assembly": "@aws-cdk/cdk",
      "base": {
        "fqn": "@aws-cdk/cdk.Construct"
      },
      "docs": {
        "comment": "An output for a list of strings.\n\nExports a list of Tokens via an Output variable, and return a list of Tokens\nthat selects the imported values for them."
      },
      "fqn": "@aws-cdk/cdk.StringListOutput",
      "initializer": {
        "initializer": true,
        "parameters": [
          {
            "name": "parent",
            "type": {
              "fqn": "@aws-cdk/cdk.Construct"
            }
          },
          {
            "name": "name",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/cdk.StringListOutputProps"
            }
          }
        ]
      },
      "kind": "class",
      "methods": [
        {
          "docs": {
            "comment": "Return an array of imported values for this Output"
          },
          "name": "makeImportValues",
          "returns": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/cdk.Token"
              },
              "kind": "array"
            }
          }
        }
      ],
      "name": "StringListOutput",
      "properties": [
        {
          "docs": {
            "comment": "Number of elements in the stringlist"
          },
          "immutable": true,
          "name": "length",
          "type": {
            "primitive": "number"
          }
        }
      ]
    },
    "@aws-cdk/cdk.StringListOutputProps": {
      "assembly": "@aws-cdk/cdk",
      "datatype": true,
      "docs": {
        "comment": "Properties for ListOutput"
      },
      "fqn": "@aws-cdk/cdk.StringListOutputProps",
      "kind": "interface",
      "name": "StringListOutputProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "The list of primitives to export"
          },
          "immutable": true,
          "name": "values",
          "type": {
            "collection": {
              "elementtype": {
                "optional": true,
                "primitive": "any"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "A condition from the \"Conditions\" section to associate with this output\nvalue. If the condition evaluates to `false`, this output value will not\nbe included in the stack."
          },
          "immutable": true,
          "name": "condition",
          "type": {
            "fqn": "@aws-cdk/cdk.Condition",
            "optional": true
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "A String type that describes the output value.\nThe description can be a maximum of 4 K in length."
          },
          "immutable": true,
          "name": "description",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "Disables the automatic allocation of an export name for this output.",
            "default": "false, which means that an export name is either explicitly\nspecified or allocated based on the output's logical ID and stack name."
          },
          "immutable": true,
          "name": "disableExport",
          "type": {
            "optional": true,
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "The name used to export the value of this output across stacks. To import\nthe value from another stack, use `FnImportValue(export)`. You can create\nan import value token by calling `output.makeImportValue()`.",
            "default": "The default behavior is to automatically allocate an export name\nfor outputs based on the stack name and the output's logical ID. To\ncreate an output without an export, set `disableExport: true`."
          },
          "immutable": true,
          "name": "export",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "The separator to use to separate stringified values",
            "default": "\",\""
          },
          "immutable": true,
          "name": "separator",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/cdk.Tag": {
      "assembly": "@aws-cdk/cdk",
      "datatype": true,
      "docs": {
        "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html"
      },
      "fqn": "@aws-cdk/cdk.Tag",
      "kind": "interface",
      "name": "Tag",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html#cfn-resource-tags-key"
          },
          "name": "key",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html#cfn-resource-tags-value"
          },
          "name": "value",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/cdk.TagGroups": {
      "assembly": "@aws-cdk/cdk",
      "datatype": true,
      "docs": {
        "comment": "This is the interface for arguments to `tagFormatResolve` to enable extensions"
      },
      "fqn": "@aws-cdk/cdk.TagGroups",
      "kind": "interface",
      "name": "TagGroups",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "Tags that are propagated from ancestors"
          },
          "name": "ancestorTags",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "Tags that are overwritten by ancestor tags"
          },
          "name": "nonStickyTags",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "Tags with propagate true not from an ancestor"
          },
          "name": "propagateTags",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "Tags that overwrite ancestor tags"
          },
          "name": "stickyTags",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        }
      ]
    },
    "@aws-cdk/cdk.TagManager": {
      "assembly": "@aws-cdk/cdk",
      "base": {
        "fqn": "@aws-cdk/cdk.Token"
      },
      "docs": {
        "comment": "TagManager facilitates a common implementation of tagging for Constructs.\n\nEach construct that wants to support tags should implement the `ITaggable`\ninterface and properly pass tags to the `Resources` (Cloudformation) elements\nthe `Construct` creates. The `TagManager` extends `Token` the object can be\npassed directly to `Resources` that support tag properties.\n\nThere are a few standard use cases the `TagManager` supports for managing\ntags across the resources in your stack.\n\nPropagation: If you tag a resource and it has children, by default those tags\nwill be propagated to the children. This is controlled by\n`TagProps.propagate`.\n\nDefault a tag unless an ancestor has a value: There are situations where a\nconstruct author might want to set a tag value, but choose to take a parents\nvalue. For example, you might default `{Key: \"Compliance\", Value: \"None\"}`,\nbut if a parent has `{Key: \"Compliance\", Value: \"PCI\"}` allow that parent to\noverride your tag. This is can be done by setting `TagProps.sticky` to false.\nThe default behavior is that child tags have precedence and `TagProps.sticky`\ndefaults to true to reflect this.\n\nOverwrite: Construct authors have the need to set a tag, but only if one was\nnot provided by the consumer. The most common example is the `Name` tag.\nOverwrite is for this purpose and is controlled by `TagProps.overwrite`. The\ndefault is `true`.\n\nRemoving Tags: Tags can be removed from the local manager via `removeTag`. If\na parent also has a tag with the same name then it can be propagated to the\nchild (after removal). The user can control this `RemoveProps.blockPropagate`. By default\nthis is `true` and prevents a parent tag from propagating to the child after\nthe `removeTag` is invoked. However, if user wants the parent tag to\npropagate, if it is provided by a parent this can be set to `false`."
      },
      "fqn": "@aws-cdk/cdk.TagManager",
      "initializer": {
        "initializer": true,
        "parameters": [
          {
            "name": "parent",
            "type": {
              "fqn": "@aws-cdk/cdk.Construct"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/cdk.TagManagerProps",
              "optional": true
            }
          }
        ]
      },
      "kind": "class",
      "methods": [
        {
          "docs": {
            "comment": "Checks if the object implements the `ITaggable` interface"
          },
          "name": "isTaggable",
          "parameters": [
            {
              "name": "taggable",
              "type": {
                "optional": true,
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "primitive": "boolean"
          },
          "static": true
        },
        {
          "docs": {
            "comment": "Removes the specified tag from the array if it exists"
          },
          "name": "removeTag",
          "parameters": [
            {
              "docs": {
                "comment": "The key of the tag to remove"
              },
              "name": "key",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "comment": "The `RemoveProps` for the tag"
              },
              "name": "props",
              "type": {
                "fqn": "@aws-cdk/cdk.RemoveProps",
                "optional": true
              }
            }
          ]
        },
        {
          "docs": {
            "comment": "Converts the `tags` to a Token for use in lazy evaluation"
          },
          "name": "resolve",
          "overrides": {
            "fqn": "@aws-cdk/cdk.Token"
          },
          "returns": {
            "optional": true,
            "primitive": "any"
          }
        },
        {
          "docs": {
            "comment": "Adds the specified tag to the array of tags",
            "default": "`TagManager.DEFAULT_TAG_PROPS`"
          },
          "name": "setTag",
          "parameters": [
            {
              "docs": {
                "comment": "The key value of the tag"
              },
              "name": "key",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "comment": "The value value of the tag"
              },
              "name": "value",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "tagProps",
              "type": {
                "fqn": "@aws-cdk/cdk.TagProps",
                "optional": true
              }
            }
          ]
        },
        {
          "docs": {
            "comment": "Handles returning the tags in the desired format\n\nThis function can be overridden to support another tag format. This was\nspecifically designed to enable AutoScalingGroup Tags that have an\nadditional CloudFormation key for `PropagateAtLaunch`"
          },
          "name": "tagFormatResolve",
          "parameters": [
            {
              "name": "tagGroups",
              "type": {
                "fqn": "@aws-cdk/cdk.TagGroups"
              }
            }
          ],
          "protected": true,
          "returns": {
            "optional": true,
            "primitive": "any"
          }
        }
      ],
      "name": "TagManager",
      "properties": [
        {
          "immutable": true,
          "name": "parent",
          "type": {
            "fqn": "@aws-cdk/cdk.Construct"
          }
        }
      ]
    },
    "@aws-cdk/cdk.TagManagerProps": {
      "assembly": "@aws-cdk/cdk",
      "datatype": true,
      "docs": {
        "comment": "Properties for Tag Manager"
      },
      "fqn": "@aws-cdk/cdk.TagManagerProps",
      "kind": "interface",
      "name": "TagManagerProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "Initial tags to set on the tag manager using TAG_DEFAULTS"
          },
          "name": "initialTags",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            },
            "optional": true
          }
        }
      ]
    },
    "@aws-cdk/cdk.TagProps": {
      "assembly": "@aws-cdk/cdk",
      "datatype": true,
      "docs": {
        "comment": "Properties for a tag"
      },
      "fqn": "@aws-cdk/cdk.TagProps",
      "kind": "interface",
      "name": "TagProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "If set this tag will overwrite existing tags",
            "default": "true"
          },
          "name": "overwrite",
          "type": {
            "optional": true,
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "If true all child taggable `Constructs` will receive this tag",
            "default": "true"
          },
          "name": "propagate",
          "type": {
            "optional": true,
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "If set propagated tags from parents will not overwrite the tag",
            "default": "true"
          },
          "name": "sticky",
          "type": {
            "optional": true,
            "primitive": "boolean"
          }
        }
      ]
    },
    "@aws-cdk/cdk.TemplateOptions": {
      "assembly": "@aws-cdk/cdk",
      "datatype": true,
      "docs": {
        "comment": "CloudFormation template options for a stack."
      },
      "fqn": "@aws-cdk/cdk.TemplateOptions",
      "kind": "interface",
      "name": "TemplateOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "Gets or sets the description of this stack.\nIf provided, it will be included in the CloudFormation template's \"Description\" attribute."
          },
          "name": "description",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "Metadata associated with the CloudFormation template."
          },
          "name": "metadata",
          "type": {
            "collection": {
              "elementtype": {
                "optional": true,
                "primitive": "any"
              },
              "kind": "map"
            },
            "optional": true
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "Gets or sets the AWSTemplateFormatVersion field of the CloudFormation template."
          },
          "name": "templateFormatVersion",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "Gets or sets the top-level template transform for this stack (e.g. \"AWS::Serverless-2016-10-31\")."
          },
          "name": "transform",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/cdk.Token": {
      "assembly": "@aws-cdk/cdk",
      "docs": {
        "comment": "Represents a special or lazily-evaluated value.\n\nCan be used to delay evaluation of a certain value in case, for example,\nthat it requires some context or late-bound data. Can also be used to\nmark values that need special processing at document rendering time.\n\nTokens can be embedded into strings while retaining their original\nsemantics."
      },
      "fqn": "@aws-cdk/cdk.Token",
      "initializer": {
        "docs": {
          "comment": "Creates a token that resolves to `value`.\n\nIf value is a function, the function is evaluated upon resolution and\nthe value it returns will be used as the token's value.\n\ndisplayName is used to represent the Token when it's embedded into a string; it\nwill look something like this:\n\n    \"embedded in a larger string is ${Token[DISPLAY_NAME.123]}\"\n\nThis value is used as a hint to humans what the meaning of the Token is,\nand does not have any effect on the evaluation.\n\nMust contain only alphanumeric and simple separator characters (_.:-)."
        },
        "initializer": true,
        "parameters": [
          {
            "docs": {
              "comment": "What this token will evaluate to, literal or function."
            },
            "name": "valueOrFunction",
            "type": {
              "optional": true,
              "primitive": "any"
            }
          },
          {
            "docs": {
              "comment": "A human-readable display hint for this Token"
            },
            "name": "displayName",
            "type": {
              "optional": true,
              "primitive": "string"
            }
          }
        ]
      },
      "kind": "class",
      "methods": [
        {
          "docs": {
            "comment": "Return a concated version of this Token in a string context\n\nThe default implementation of this combines strings, but specialized\nimplements of Token can return a more appropriate value."
          },
          "name": "concat",
          "parameters": [
            {
              "name": "left",
              "type": {
                "optional": true,
                "primitive": "any"
              }
            },
            {
              "name": "right",
              "type": {
                "optional": true,
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "fqn": "@aws-cdk/cdk.Token"
          }
        },
        {
          "docs": {
            "return": "The resolved value for this token."
          },
          "name": "resolve",
          "returns": {
            "optional": true,
            "primitive": "any"
          }
        },
        {
          "docs": {
            "comment": "Turn this Token into JSON\n\nThis gets called by JSON.stringify(). We want to prohibit this, because\nit's not possible to do this properly, so we just throw an error here."
          },
          "name": "toJSON",
          "returns": {
            "optional": true,
            "primitive": "any"
          }
        },
        {
          "docs": {
            "comment": "Return a reversible string representation of this token\n\nIf the Token is initialized with a literal, the stringified value of the\nliteral is returned. Otherwise, a special quoted string representation\nof the Token is returned that can be embedded into other strings.\n\nStrings with quoted Tokens in them can be restored back into\ncomplex values with the Tokens restored by calling `resolve()`\non the string."
          },
          "name": "toString",
          "returns": {
            "primitive": "string"
          }
        }
      ],
      "name": "Token",
      "properties": [
        {
          "docs": {
            "comment": "A human-readable display hint for this Token"
          },
          "immutable": true,
          "name": "displayName",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "What this token will evaluate to, literal or function."
          },
          "immutable": true,
          "name": "valueOrFunction",
          "type": {
            "optional": true,
            "primitive": "any"
          }
        }
      ]
    },
    "@aws-cdk/cdk.UpdatePolicy": {
      "assembly": "@aws-cdk/cdk",
      "datatype": true,
      "docs": {
        "comment": "Use the UpdatePolicy attribute to specify how AWS CloudFormation handles updates to the AWS::AutoScaling::AutoScalingGroup\nresource. AWS CloudFormation invokes one of three update policies depending on the type of change you make or whether a\nscheduled action is associated with the Auto Scaling group."
      },
      "fqn": "@aws-cdk/cdk.UpdatePolicy",
      "kind": "interface",
      "name": "UpdatePolicy",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "Specifies whether an Auto Scaling group and the instances it contains are replaced during an update. During replacement,\nAWS CloudFormation retains the old group until it finishes creating the new one. If the update fails, AWS CloudFormation\ncan roll back to the old Auto Scaling group and delete the new Auto Scaling group."
          },
          "name": "autoScalingReplacingUpdate",
          "type": {
            "fqn": "@aws-cdk/cdk.AutoScalingReplacingUpdate",
            "optional": true
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "To specify how AWS CloudFormation handles rolling updates for an Auto Scaling group, use the AutoScalingRollingUpdate\npolicy. Rolling updates enable you to specify whether AWS CloudFormation updates instances that are in an Auto Scaling\ngroup in batches or all at once."
          },
          "name": "autoScalingRollingUpdate",
          "type": {
            "fqn": "@aws-cdk/cdk.AutoScalingRollingUpdate",
            "optional": true
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "To specify how AWS CloudFormation handles updates for the MinSize, MaxSize, and DesiredCapacity properties when\nthe AWS::AutoScaling::AutoScalingGroup resource has an associated scheduled action, use the AutoScalingScheduledAction\npolicy."
          },
          "name": "autoScalingScheduledAction",
          "type": {
            "fqn": "@aws-cdk/cdk.AutoScalingScheduledAction",
            "optional": true
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "To modify a replication group's shards by adding or removing shards, rather than replacing the entire\nAWS::ElastiCache::ReplicationGroup resource, use the UseOnlineResharding update policy."
          },
          "name": "useOnlineResharding",
          "type": {
            "optional": true,
            "primitive": "boolean"
          }
        }
      ]
    },
    "@aws-cdk/cdk.ValidationError": {
      "assembly": "@aws-cdk/cdk",
      "fqn": "@aws-cdk/cdk.ValidationError",
      "initializer": {
        "initializer": true,
        "parameters": [
          {
            "name": "source",
            "type": {
              "fqn": "@aws-cdk/cdk.Construct"
            }
          },
          {
            "name": "message",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "kind": "class",
      "name": "ValidationError",
      "properties": [
        {
          "immutable": true,
          "name": "message",
          "type": {
            "primitive": "string"
          }
        },
        {
          "immutable": true,
          "name": "source",
          "type": {
            "fqn": "@aws-cdk/cdk.Construct"
          }
        }
      ]
    },
    "@aws-cdk/cdk.ValidationResult": {
      "assembly": "@aws-cdk/cdk",
      "docs": {
        "comment": "Representation of validation results\n\nModels a tree of validation errors so that we have as much information as possible\nabout the failure that occurred."
      },
      "fqn": "@aws-cdk/cdk.ValidationResult",
      "initializer": {
        "initializer": true,
        "parameters": [
          {
            "name": "errorMessage",
            "type": {
              "optional": true,
              "primitive": "string"
            }
          },
          {
            "name": "results",
            "type": {
              "fqn": "@aws-cdk/cdk.ValidationResults",
              "optional": true
            }
          }
        ]
      },
      "kind": "class",
      "methods": [
        {
          "docs": {
            "comment": "Turn a failed validation into an exception"
          },
          "name": "assertSuccess"
        },
        {
          "docs": {
            "comment": "Return a string rendering of the tree of validation failures"
          },
          "name": "errorTree",
          "returns": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "Wrap this result with an error message, if it concerns an error"
          },
          "name": "prefix",
          "parameters": [
            {
              "name": "message",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "fqn": "@aws-cdk/cdk.ValidationResult"
          }
        }
      ],
      "name": "ValidationResult",
      "properties": [
        {
          "immutable": true,
          "name": "errorMessage",
          "type": {
            "primitive": "string"
          }
        },
        {
          "immutable": true,
          "name": "isSuccess",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "immutable": true,
          "name": "results",
          "type": {
            "fqn": "@aws-cdk/cdk.ValidationResults"
          }
        }
      ]
    },
    "@aws-cdk/cdk.ValidationResults": {
      "assembly": "@aws-cdk/cdk",
      "docs": {
        "comment": "A collection of validation results"
      },
      "fqn": "@aws-cdk/cdk.ValidationResults",
      "initializer": {
        "initializer": true,
        "parameters": [
          {
            "name": "results",
            "type": {
              "collection": {
                "elementtype": {
                  "fqn": "@aws-cdk/cdk.ValidationResult"
                },
                "kind": "array"
              },
              "optional": true
            }
          }
        ]
      },
      "kind": "class",
      "methods": [
        {
          "name": "collect",
          "parameters": [
            {
              "name": "result",
              "type": {
                "fqn": "@aws-cdk/cdk.ValidationResult"
              }
            }
          ]
        },
        {
          "name": "errorTreeList",
          "returns": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "Wrap up all validation results into a single tree node\n\nIf there are failures in the collection, add a message, otherwise\nreturn a success."
          },
          "name": "wrap",
          "parameters": [
            {
              "name": "message",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "fqn": "@aws-cdk/cdk.ValidationResult"
          }
        }
      ],
      "name": "ValidationResults",
      "properties": [
        {
          "immutable": true,
          "name": "isSuccess",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "name": "results",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/cdk.ValidationResult"
              },
              "kind": "array"
            }
          }
        }
      ]
    }
  },
  "version": "0.15.2",
  "fingerprint": "SJqj1+laVzHkPe7J3v31Xsl0hDcvxgfWmJR7sdhRGnc="
}
