"use strict";
/**
 * File with definitions for the interface between the Cloud Executable and the CDK toolkit.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Bump this to the library version if and only if the CX protocol changes.
 *
 * We could also have used 1, 2, 3, ... here to indicate protocol versions, but
 * those then still need to be mapped to software versions to be useful. So we
 * might as well use the software version as protocol version and immediately
 * generate a useful error message from this.
 *
 * Note the following:
 *
 * - The versions are not compared in a semver way, they are used as
 *    opaque ordered tokens.
 * - The version needs to be set to the NEXT releasable version when it's
 *   updated (as the current verison in package.json has already been released!)
 * - The request does not have versioning yet, only the response.
 */
exports.PROTO_RESPONSE_VERSION = '0.14.0';
exports.OUTFILE_NAME = 'cdk.out';
exports.OUTDIR_ENV = 'CDK_OUTDIR';
exports.CONTEXT_ENV = 'CDK_CONTEXT_JSON';
/**
 * Context parameter for the default AWS account to use if a stack's environment is not set.
 */
exports.DEFAULT_ACCOUNT_CONTEXT_KEY = 'aws:cdk:toolkit:default-account';
/**
 * Context parameter for the default AWS region to use if a stack's environment is not set.
 */
exports.DEFAULT_REGION_CONTEXT_KEY = 'aws:cdk:toolkit:default-region';
exports.ASSET_METADATA = 'aws:cdk:asset';
/**
 * Metadata key used to print INFO-level messages by the toolkit when an app is syntheized.
 */
exports.INFO_METADATA_KEY = 'aws:cdk:info';
/**
 * Metadata key used to print WARNING-level messages by the toolkit when an app is syntheized.
 */
exports.WARNING_METADATA_KEY = 'aws:cdk:warning';
/**
 * Metadata key used to print ERROR-level messages by the toolkit when an app is syntheized.
 */
exports.ERROR_METADATA_KEY = 'aws:cdk:error';
/**
 * Separator string that separates the prefix separator from the object key separator.
 *
 * Asset keys will look like:
 *
 *    /assets/MyConstruct12345678/||abcdef12345.zip
 *
 * This allows us to encode both the prefix and the full location in a single
 * CloudFormation Template Parameter.
 */
exports.ASSET_PREFIX_SEPARATOR = '||';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3hhcGkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjeGFwaS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7O0dBRUc7O0FBSUg7Ozs7Ozs7Ozs7Ozs7OztHQWVHO0FBQ1UsUUFBQSxzQkFBc0IsR0FBRyxRQUFRLENBQUM7QUFFbEMsUUFBQSxZQUFZLEdBQUcsU0FBUyxDQUFDO0FBQ3pCLFFBQUEsVUFBVSxHQUFHLFlBQVksQ0FBQztBQUMxQixRQUFBLFdBQVcsR0FBRyxrQkFBa0IsQ0FBQztBQXFFOUM7O0dBRUc7QUFDVSxRQUFBLDJCQUEyQixHQUFHLGlDQUFpQyxDQUFDO0FBRTdFOztHQUVHO0FBQ1UsUUFBQSwwQkFBMEIsR0FBRyxnQ0FBZ0MsQ0FBQztBQUU5RCxRQUFBLGNBQWMsR0FBRyxlQUFlLENBQUM7QUEwRDlDOztHQUVHO0FBQ1UsUUFBQSxpQkFBaUIsR0FBRyxjQUFjLENBQUM7QUFFaEQ7O0dBRUc7QUFDVSxRQUFBLG9CQUFvQixHQUFHLGlCQUFpQixDQUFDO0FBRXREOztHQUVHO0FBQ1UsUUFBQSxrQkFBa0IsR0FBRyxlQUFlLENBQUM7QUFFbEQ7Ozs7Ozs7OztHQVNHO0FBQ1UsUUFBQSxzQkFBc0IsR0FBRyxJQUFJLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEZpbGUgd2l0aCBkZWZpbml0aW9ucyBmb3IgdGhlIGludGVyZmFjZSBiZXR3ZWVuIHRoZSBDbG91ZCBFeGVjdXRhYmxlIGFuZCB0aGUgQ0RLIHRvb2xraXQuXG4gKi9cblxuaW1wb3J0IHsgRW52aXJvbm1lbnQgfSBmcm9tICcuL2Vudmlyb25tZW50JztcblxuLyoqXG4gKiBCdW1wIHRoaXMgdG8gdGhlIGxpYnJhcnkgdmVyc2lvbiBpZiBhbmQgb25seSBpZiB0aGUgQ1ggcHJvdG9jb2wgY2hhbmdlcy5cbiAqXG4gKiBXZSBjb3VsZCBhbHNvIGhhdmUgdXNlZCAxLCAyLCAzLCAuLi4gaGVyZSB0byBpbmRpY2F0ZSBwcm90b2NvbCB2ZXJzaW9ucywgYnV0XG4gKiB0aG9zZSB0aGVuIHN0aWxsIG5lZWQgdG8gYmUgbWFwcGVkIHRvIHNvZnR3YXJlIHZlcnNpb25zIHRvIGJlIHVzZWZ1bC4gU28gd2VcbiAqIG1pZ2h0IGFzIHdlbGwgdXNlIHRoZSBzb2Z0d2FyZSB2ZXJzaW9uIGFzIHByb3RvY29sIHZlcnNpb24gYW5kIGltbWVkaWF0ZWx5XG4gKiBnZW5lcmF0ZSBhIHVzZWZ1bCBlcnJvciBtZXNzYWdlIGZyb20gdGhpcy5cbiAqXG4gKiBOb3RlIHRoZSBmb2xsb3dpbmc6XG4gKlxuICogLSBUaGUgdmVyc2lvbnMgYXJlIG5vdCBjb21wYXJlZCBpbiBhIHNlbXZlciB3YXksIHRoZXkgYXJlIHVzZWQgYXNcbiAqICAgIG9wYXF1ZSBvcmRlcmVkIHRva2Vucy5cbiAqIC0gVGhlIHZlcnNpb24gbmVlZHMgdG8gYmUgc2V0IHRvIHRoZSBORVhUIHJlbGVhc2FibGUgdmVyc2lvbiB3aGVuIGl0J3NcbiAqICAgdXBkYXRlZCAoYXMgdGhlIGN1cnJlbnQgdmVyaXNvbiBpbiBwYWNrYWdlLmpzb24gaGFzIGFscmVhZHkgYmVlbiByZWxlYXNlZCEpXG4gKiAtIFRoZSByZXF1ZXN0IGRvZXMgbm90IGhhdmUgdmVyc2lvbmluZyB5ZXQsIG9ubHkgdGhlIHJlc3BvbnNlLlxuICovXG5leHBvcnQgY29uc3QgUFJPVE9fUkVTUE9OU0VfVkVSU0lPTiA9ICcwLjE0LjAnO1xuXG5leHBvcnQgY29uc3QgT1VURklMRV9OQU1FID0gJ2Nkay5vdXQnO1xuZXhwb3J0IGNvbnN0IE9VVERJUl9FTlYgPSAnQ0RLX09VVERJUic7XG5leHBvcnQgY29uc3QgQ09OVEVYVF9FTlYgPSAnQ0RLX0NPTlRFWFRfSlNPTic7XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIG1pc3NpbmcgcGllY2Ugb2YgY29udGV4dC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBNaXNzaW5nQ29udGV4dCB7XG4gIHByb3ZpZGVyOiBzdHJpbmc7XG4gIHByb3BzOiB7XG4gICAgYWNjb3VudD86IHN0cmluZztcbiAgICByZWdpb24/OiBzdHJpbmc7XG4gICAgW2tleTogc3RyaW5nXTogYW55O1xuICB9O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFN5bnRoZXNpemVSZXNwb25zZSB7XG4gIC8qKlxuICAgKiBQcm90b2NvbCB2ZXJzaW9uXG4gICAqL1xuICB2ZXJzaW9uOiBzdHJpbmc7XG4gIHN0YWNrczogU3ludGhlc2l6ZWRTdGFja1tdO1xuICBydW50aW1lPzogQXBwUnVudGltZTtcbn1cblxuLyoqXG4gKiBBIGNvbXBsZXRlIHN5bnRoZXNpemVkIHN0YWNrXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgU3ludGhlc2l6ZWRTdGFjayB7XG4gIG5hbWU6IHN0cmluZztcbiAgZW52aXJvbm1lbnQ6IEVudmlyb25tZW50O1xuICBtaXNzaW5nPzogeyBba2V5OiBzdHJpbmddOiBNaXNzaW5nQ29udGV4dCB9O1xuICBtZXRhZGF0YTogU3RhY2tNZXRhZGF0YTtcbiAgdGVtcGxhdGU6IGFueTtcbn1cblxuLyoqXG4gKiBBbiBtZXRhZGF0YSBlbnRyeSBpbiB0aGUgY29uc3RydWN0LlxuICovXG5leHBvcnQgaW50ZXJmYWNlIE1ldGFkYXRhRW50cnkge1xuICAvKipcbiAgICogVGhlIHR5cGUgb2YgdGhlIG1ldGFkYXRhIGVudHJ5LlxuICAgKi9cbiAgdHlwZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgZGF0YS5cbiAgICovXG4gIGRhdGE/OiBhbnk7XG5cbiAgLyoqXG4gICAqIEEgc3RhY2sgdHJhY2UgZm9yIHdoZW4gdGhlIGVudHJ5IHdhcyBjcmVhdGVkLlxuICAgKi9cbiAgdHJhY2U6IHN0cmluZ1tdO1xufVxuXG4vKipcbiAqIE1ldGFkYXRhIGFzc29jaWF0ZWQgd2l0aCB0aGUgb2JqZWN0cyBpbiB0aGUgc3RhY2sncyBDb25zdHJ1Y3QgdHJlZVxuICovXG5leHBvcnQgdHlwZSBTdGFja01ldGFkYXRhID0geyBbcGF0aDogc3RyaW5nXTogTWV0YWRhdGFFbnRyeVtdIH07XG5cbi8qKlxuICogSW5mb3JtYXRpb24gYWJvdXQgdGhlIGFwcGxpY2F0aW9uJ3MgcnVudGltZSBjb21wb25lbnRzLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEFwcFJ1bnRpbWUge1xuICAvKipcbiAgICogVGhlIGxpc3Qgb2YgbGlicmFyaWVzIGxvYWRlZCBpbiB0aGUgYXBwbGljYXRpb24sIGFzc29jaWF0ZWQgd2l0aCB0aGVpciB2ZXJzaW9ucy5cbiAgICovXG4gIGxpYnJhcmllczogeyBbbmFtZTogc3RyaW5nXTogc3RyaW5nIH07XG59XG5cbi8qKlxuICogQ29udGV4dCBwYXJhbWV0ZXIgZm9yIHRoZSBkZWZhdWx0IEFXUyBhY2NvdW50IHRvIHVzZSBpZiBhIHN0YWNrJ3MgZW52aXJvbm1lbnQgaXMgbm90IHNldC5cbiAqL1xuZXhwb3J0IGNvbnN0IERFRkFVTFRfQUNDT1VOVF9DT05URVhUX0tFWSA9ICdhd3M6Y2RrOnRvb2xraXQ6ZGVmYXVsdC1hY2NvdW50JztcblxuLyoqXG4gKiBDb250ZXh0IHBhcmFtZXRlciBmb3IgdGhlIGRlZmF1bHQgQVdTIHJlZ2lvbiB0byB1c2UgaWYgYSBzdGFjaydzIGVudmlyb25tZW50IGlzIG5vdCBzZXQuXG4gKi9cbmV4cG9ydCBjb25zdCBERUZBVUxUX1JFR0lPTl9DT05URVhUX0tFWSA9ICdhd3M6Y2RrOnRvb2xraXQ6ZGVmYXVsdC1yZWdpb24nO1xuXG5leHBvcnQgY29uc3QgQVNTRVRfTUVUQURBVEEgPSAnYXdzOmNkazphc3NldCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRmlsZUFzc2V0TWV0YWRhdGFFbnRyeSB7XG4gIC8qKlxuICAgKiBSZXF1ZXN0ZWQgcGFja2FnaW5nIHN0eWxlXG4gICAqL1xuICBwYWNrYWdpbmc6ICd6aXAnIHwgJ2ZpbGUnO1xuXG4gIC8qKlxuICAgKiBQYXRoIG9uIGRpc2sgdG8gdGhlIGFzc2V0XG4gICAqL1xuICBwYXRoOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIExvZ2ljYWwgaWRlbnRpZmllciBmb3IgdGhlIGFzc2V0XG4gICAqL1xuICBpZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBOYW1lIG9mIHBhcmFtZXRlciB3aGVyZSBTMyBidWNrZXQgc2hvdWxkIGJlIHBhc3NlZCBpblxuICAgKi9cbiAgczNCdWNrZXRQYXJhbWV0ZXI6IHN0cmluZztcblxuICAvKipcbiAgICogTmFtZSBvZiBwYXJhbWV0ZXIgd2hlcmUgUzMga2V5IHNob3VsZCBiZSBwYXNzZWQgaW5cbiAgICovXG4gIHMzS2V5UGFyYW1ldGVyOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29udGFpbmVySW1hZ2VBc3NldE1ldGFkYXRhRW50cnkge1xuICAvKipcbiAgICogVHlwZSBvZiBhc3NldFxuICAgKi9cbiAgcGFja2FnaW5nOiAnY29udGFpbmVyLWltYWdlJztcblxuICAvKipcbiAgICogUGF0aCBvbiBkaXNrIHRvIHRoZSBhc3NldFxuICAgKi9cbiAgcGF0aDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBMb2dpY2FsIGlkZW50aWZpZXIgZm9yIHRoZSBhc3NldFxuICAgKi9cbiAgaWQ6IHN0cmluZztcblxuICAvKipcbiAgICogTmFtZSBvZiB0aGUgcGFyYW1ldGVyIHRoYXQgdGFrZXMgdGhlIHJlcG9zaXRvcnkgbmFtZVxuICAgKi9cbiAgcmVwb3NpdG9yeVBhcmFtZXRlcjogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBOYW1lIG9mIHRoZSBwYXJhbWV0ZXIgdGhhdCB0YWtlcyB0aGUgdGFnXG4gICAqL1xuICB0YWdQYXJhbWV0ZXI6IHN0cmluZztcbn1cblxuZXhwb3J0IHR5cGUgQXNzZXRNZXRhZGF0YUVudHJ5ID0gRmlsZUFzc2V0TWV0YWRhdGFFbnRyeSB8IENvbnRhaW5lckltYWdlQXNzZXRNZXRhZGF0YUVudHJ5O1xuXG4vKipcbiAqIE1ldGFkYXRhIGtleSB1c2VkIHRvIHByaW50IElORk8tbGV2ZWwgbWVzc2FnZXMgYnkgdGhlIHRvb2xraXQgd2hlbiBhbiBhcHAgaXMgc3ludGhlaXplZC5cbiAqL1xuZXhwb3J0IGNvbnN0IElORk9fTUVUQURBVEFfS0VZID0gJ2F3czpjZGs6aW5mbyc7XG5cbi8qKlxuICogTWV0YWRhdGEga2V5IHVzZWQgdG8gcHJpbnQgV0FSTklORy1sZXZlbCBtZXNzYWdlcyBieSB0aGUgdG9vbGtpdCB3aGVuIGFuIGFwcCBpcyBzeW50aGVpemVkLlxuICovXG5leHBvcnQgY29uc3QgV0FSTklOR19NRVRBREFUQV9LRVkgPSAnYXdzOmNkazp3YXJuaW5nJztcblxuLyoqXG4gKiBNZXRhZGF0YSBrZXkgdXNlZCB0byBwcmludCBFUlJPUi1sZXZlbCBtZXNzYWdlcyBieSB0aGUgdG9vbGtpdCB3aGVuIGFuIGFwcCBpcyBzeW50aGVpemVkLlxuICovXG5leHBvcnQgY29uc3QgRVJST1JfTUVUQURBVEFfS0VZID0gJ2F3czpjZGs6ZXJyb3InO1xuXG4vKipcbiAqIFNlcGFyYXRvciBzdHJpbmcgdGhhdCBzZXBhcmF0ZXMgdGhlIHByZWZpeCBzZXBhcmF0b3IgZnJvbSB0aGUgb2JqZWN0IGtleSBzZXBhcmF0b3IuXG4gKlxuICogQXNzZXQga2V5cyB3aWxsIGxvb2sgbGlrZTpcbiAqXG4gKiAgICAvYXNzZXRzL015Q29uc3RydWN0MTIzNDU2NzgvfHxhYmNkZWYxMjM0NS56aXBcbiAqXG4gKiBUaGlzIGFsbG93cyB1cyB0byBlbmNvZGUgYm90aCB0aGUgcHJlZml4IGFuZCB0aGUgZnVsbCBsb2NhdGlvbiBpbiBhIHNpbmdsZVxuICogQ2xvdWRGb3JtYXRpb24gVGVtcGxhdGUgUGFyYW1ldGVyLlxuICovXG5leHBvcnQgY29uc3QgQVNTRVRfUFJFRklYX1NFUEFSQVRPUiA9ICd8fCc7XG4iXX0=